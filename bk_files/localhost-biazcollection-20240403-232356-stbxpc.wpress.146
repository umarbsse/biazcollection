	return $this;
	}

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'                   => 'required|string',
			'landing_site'         => 'required|string',
			'customer'             => 'required',
			'financial_status'     => 'string',
			'fulfillment_status'   => 'string',
			'currency_code'        => 'required|currency_code',
			'order_total'          => 'required|numeric',
			'tax_total'            => 'numeric',
			'discount_total'       => 'numeric',
			'processed_at_foreign' => 'date',
			'updated_at_foreign'   => 'date',
			'cancelled_at_foreign' => 'date',
			'order_url'            => 'string',
			'lines'                => 'required|array',
		);
	}

	/**
	 * @param $id
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setId( $id ) {
		// old regex preg_replace('/[^0-9]/i','', $id);
		$this->id = preg_replace( '/[^a-zA-Z\d\-_]/', '', $id );
		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param $landing_site
	 * @return $this
	 */
	public function setLandingSite( $landing_site ) {
		$this->landing_site = $landing_site;

		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getLandingSite() {
		return $this->landing_site;
	}

	/**
	 * @param MailChimp_WooCommerce_Customer $customer
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setCustomer( MailChimp_WooCommerce_Customer $customer ) {
		$this->customer = $customer;

		return $this;
	}

	/**
	 * @return null|MailChimp_WooCommerce_Customer
	 */
	public function getCustomer() {
		if ( empty( $this->customer ) ) {
			$this->customer = new MailChimp_WooCommerce_Customer();
		}
		return $this->customer;
	}

	/**
	 * @param MailChimp_WooCommerce_LineItem $item
	 * @return $this
	 */
	public function addItem( MailChimp_WooCommerce_LineItem $item ) {
		$this->lines[] = $item;
		return $this;
	}

	/**
	 * @param $code
	 * @param $amount
	 * @param bool   $is_percentage
	 * @return $this
	 */
	public function addDiscount( $code, $amount, $is_percentage = false ) {
		$this->promos[] = array(
			'code'              => $code,
			'amount_discounted' => $amount,
			'type'              => $is_percentage ? 'percent' : 'fixed',
		);

		return $this;
	}

	/**
	 * @return array
	 */
	public function discounts() {
		return $this->promos;
	}

	/**
	 * @return array
	 */
	public function items() {
		return $this->lines;
	}

	/**
	 * @return null
	 */
	public function getCampaignId() {
		return $this->campaign_id;
	}

	/**
	 * @param $campaign_id
	 *
	 * @return $this
	 */
	public function setCampaignId( $campaign_id ) {
		$this->campaign_id = $campaign_id;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getFinancialStatus() {
		return $this->financial_status;
	}

	/**
	 * @param null $financial_status
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setFinancialStatus( $financial_status ) {
		$this->financial_status = $financial_status;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getFulfillmentStatus() {
		return $this->fulfillment_status;
	}

	/**
	 * @param null $fulfillment_status
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setFulfillmentStatus( $fulfillment_status ) {
		$this->fulfillment_status = $fulfillment_status;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getCurrencyCode() {
		return ! empty( $this->currency_code ) ? $this->currency_code : 'USD';
	}

	/**
	 * @param null $code
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setCurrencyCode( $code = null ) {
		if ( ! empty( $code ) ) {
			$this->currency_code = $code;
			return $this;
		}

		try {
			$woo                 = wc_get_order( $this->id );
			$this->currency_code = $woo->get_currency();
		} catch ( Exception $e ) {
			$this->currency_code = get_woocommerce_currency();
		}

		return $this;
	}

	/**
	 * @return mixed
	 */
	public function getOrderTotal() {
		return $this->order_total;
	}

	/**
	 * @param mixed $order_total
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setOrderTotal( $order_total ) {
		$this->order_total = $order_total;

		return $this;
	}

	/**
	 * @param $url
	 * @return $this
	 */
	public function setOrderURL( $url ) {
		if ( ( $url = wp_http_validate_url( $url ) ) ) {
			$this->order_url = $url;
		}

		return $this;
	}

	/**
	 * @return string
	 */
	public function getOrderURL() {
		return $this->order_url;
	}

	/**
	 * @return mixed
	 */
	public function getTaxTotal() {
		return $this->tax_total;
	}

	/**
	 * @param mixed $tax_total
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setTaxTotal( $tax_total ) {
		$this->tax_total = $tax_total;

		return $this;
	}

	/**
	 * @return mixed
	 */
	public function getShippingTotal() {
		return $this->shipping_total;
	}

	/**
	 * @param mixed $shipping_total
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setShippingTotal( $shipping_total ) {
		$this->shipping_total = $shipping_total;

		return $this;
	}

	/**
	 * @return mixed
	 */
	public function getDiscountTotal() {
		return $this->discount_total;
	}

	/**
	 * @param mixed $discount_total
	 * @return MailChimp_WooCommerce_Order
	 */
	public function setDiscountTotal( $discount_total ) {
		$this->discount_total = $discount_total;

		return $this;
	}

	/**
	 * @param DateTime $time
	 * @return $this
	 */
	public function setProcessedAt( DateTime $time ) {
		$this->processed_at_foreign = $time->format( 'Y-m-d H:i:s' );
		$this->processed_at = $time;
		return $this;
	}

	/**
	 * @return null|DateTime
	 */
	public function getProcessedAt() {
		return $this->processed_at_foreign;
	}

	public function getProcessedAtDate() {
		return !empty($this->processed_at) ?
			$this->processed_at :
			(!empty($this->processed_at_foreign) ? new DateTime($this->processed_at_foreign) : null);
	}

	/**
	 * @param DateTime $time
	 * @return $this
	 */
	public function setCancelledAt( DateTime $time ) {
		$this->cancelled_at_foreign = $time->format( 'Y-m-d H:i:s' );

		return $this;
	}

	/**
	 * @return null
	 */
	public function getCancelledAt() {
		return $this->cancelled_at_foreign;
	}

	/**
	 * @param DateTime $time
	 * @return $this
	 */
	public function setUpdatedAt( DateTime $time ) {
		$this->updated_at_foreign = $time->format( 'Y-m-d H:i:s' );

		return $this;
	}

	/**
	 * @return null
	 */
	public function getUpdatedAt() {
		return $this->updated_at_foreign;
	}

	/**
	 * @return Array lines_ids
	 */
	public function getLinesIds() {
		foreach ( $this->lines as $line ) {
			$lines_ids[] = $line->getId();
		}
		return $lines_ids;
	}

	/**
	 * @param $bool
	 *
	 * @return $this
	 */
	public function confirmAndPay( $bool ) {
		$this->confirm_and_paid = (bool) $bool;

		return $this;
	}

	/**
	 * @return bool
	 */
	public function shouldConfirmAndPay() {
		return $this->confirm_and_paid;
	}

	/**
	 * @param MailChimp_WooCommerce_Address $address
	 * @return $this
	 */
	public function setShippingAddress( MailChimp_WooCommerce_Address $address ) {
		$this->shipping_address = $address;

		return $this;
	}

	/**
	 * @return MailChimp_WooCommerce_Address
	 */
	public function getShippingAddress() {
		if ( empty( $this->shipping_address ) ) {
			$this->shipping_address = new MailChimp_WooCommerce_Address();
		}
		return $this->shipping_address;
	}

	/**
	 * @param MailChimp_WooCommerce_Address $address
	 * @return $this
	 */
	public function setBillingAddress( MailChimp_WooCommerce_Address $address ) {
		$this->billing_address = $address;

		return $this;
	}

	/**
	 * @return MailChimp_WooCommerce_Address
	 */
	public function getBillingAddress() {
		if ( empty( $this->billing_address ) ) {
			$this->billing_address = new MailChimp_WooCommerce_Address();
		}
		return $this->billing_address;
	}

	/**
	 * @param string $url
	 *
	 * @return mixed|string|void
	 */
	public function setTrackingUrl( $url = '' ) {

		if ( ! empty( $url ) ) {
			return $this->tracking_url = $url; }

		$tracking_url = '';
		// Taken from woocommercer-services plugin example
		if ( ! empty( $this->tracking_number ) && ! empty( $this->tracking_carrier ) ) {
			switch ( $this->tracking_carrier ) {
				case 'fedex':
					$tracking_url = 'https://www.fedex.com/apps/fedextrack/?action=track&tracknumbers=' . $this->tracking_number;
					break;
				case 'usps':
					$tracking_url = 'https://tools.usps.com/go/TrackConfirmAction.action?tLabels=' . $this->tracking_number;
					break;
				case 'ups':
					$tracking_url = 'https://www.ups.com/track?tracknum=' . $this->tracking_number;
					break;
				case 'dhlexpress':
					$tracking_url = 'https://www.dhl.com/en/express/tracking.html?AWB=' . $this->tracking_number . '&brand=DHL';
					break;
			}
		}

		$this->tracking_url = $tracking_url;
		return;
	}
	/**
	 * @return string               Tracking url
	 */
	public function getTrackingUrl() {
		return $this->tracking_url;
	}

	/**
	 * @param $tracking_number
	 */
	public function setTrackingNumber( $tracking_number ) {
		$this->tracking_number = $tracking_number;
	}
	/**
	 * @return string
	 */
	public function getTrackingNumber() {
		return $this->tracking_number;
	}

	/**
	 * @param $tracking_carrier
	 */
	public function setTrackingCarrier( $tracking_carrier ) {
		$this->tracking_carrier = $tracking_carrier;
	}
	/**
	 * @return string               Tracking carrier
	 */
	public function getTrackingCarrier() {
		return $this->tracking_carrier;
	}
	/**
	 * @return array
	 */
	public function toArray() {
		$this->setTrackingInfo();
		return mailchimp_array_remove_empty(
			array(
				'id'                   => (string) $this->getId(),
				'landing_site'         => (string) $this->getLandingSite(),
				'customer'             => $this->getCustomer()->toArray(),
				'financial_status'     => (string) $this->getFinancialStatus(),
				'fulfillment_status'   => (string) $this->getFulfillmentStatus(),
				'currency_code'        => (string) $this->getCurrencyCode(),
				'order_total'          => floatval( $this->getOrderTotal() ),
				'order_url'            => (string) $this->getOrderURL(),
				'tax_total'            => floatval( $this->getTaxTotal() ),
				'discount_total'       => floatval( $this->getDiscountTotal() ),
				'shipping_total'       => floatval( $this->getShippingTotal() ),
				'processed_at_foreign' => (string) $this->getProcessedAt(),
				'cancelled_at_foreign' => (string) $this->getCancelledAt(),
				'updated_at_foreign'   => (string) $this->getUpdatedAt(),
				'shipping_address'     => $this->getShippingAddress()->toArray(),
				'billing_address'      => $this->getBillingAddress()->toArray(),
				'promos'               => ! empty( $this->promos ) ? $this->promos : null,
				'tracking_number'      => $this->getTrackingNumber(),
				'tracking_url'         => $this->getTrackingUrl(),
				'tracking_carrier'     => $this->getTrackingCarrier(),
				'lines'                => array_map(
					function ( $item ) {
						/** @var MailChimp_WooCommerce_LineItem $item */
						return $item->toArray();
					},
					$this->items()
				),
			)
		);
	}

	/**
	 * @param array $data
	 * @return MailChimp_WooCommerce_Order
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'landing_site',
			'financial_status',
			'fulfillment_status',
			'currency_code',
			'order_total',
			'order_url',
			'tax_total',
			'discount_total',
			'processed_at_foreign',
			'cancelled_at_foreign',
			'updated_at_foreign',
			'tracking_carrier',
			'tracking_number',
			'tracking_url',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		if ( array_key_exists( 'shipping_address', $data ) && is_array( $data['shipping_address'] ) ) {
			$shipping               = new MailChimp_WooCommerce_Address();
			$this->shipping_address = $shipping->fromArray( $data['shipping_address'] );
		}

		if ( array_key_exists( 'billing_address', $data ) && is_array( $data['billing_address'] ) ) {
			$billing               = new MailChimp_WooCommerce_Address();
			$this->billing_address = $billing->fromArray( $data['billing_address'] );
		}

		if ( array_key_exists( 'promos', $data ) ) {
			$this->promos = $data['promos'];
		}

		if ( array_key_exists( 'lines', $data ) && is_array( $data['lines'] ) ) {
			$this->lines = array();
			foreach ( $data['lines'] as $line_item ) {
				$item          = new MailChimp_WooCommerce_LineItem();
				$this->lines[] = $item->fromArray( $line_item );
			}
		}

		if ( array_key_exists( 'customer', $data ) ) {
			$customer_object = new MailChimp_WooCommerce_Customer();
			$this->setCustomer( $customer_object->fromArray( $data['customer'] ) );
		}

		// apply the campaign id from the response if there is one.
		if (array_key_exists('outreach', $data) && !empty($data['outreach']) && array_key_exists('id', $data['outreach'])) {
			$this->setCampaignId($data['outreach']['id']);
		}

		return $this;
	}
	/**
	 * Set Tracking info before the job gets executed
	 */
	public function setTrackingInfo() {
		// Support for woocommerce shipment tracking plugin (https://woocommerce.com/products/shipment-tracking)
		if ( function_exists( 'wc_st_add_tracking_number' ) && class_exists( 'WC_Shipment_Tracking_Actions' ) ) {
			$trackings = get_post_meta( (int) $this->getId(), '_wc_shipment_tracking_items', true );
			if ( empty( $trackings ) ) {
				return;
			}
			foreach ( $trackings as $tracking ) {
				// carrier
				if ( ! empty( $tracking['custom_tracking_provider'] ) ) {
					$this->setTrackingCarrier( $tracking['custom_tracking_provider'] );
				} elseif ( ! empty( $tracking['tracking_provider'] ) ) {
					$this->setTrackingCarrier( $tracking['tracking_provider'] );
				}
				// tracking url
				$ship = WC_Shipment_Tracking_Actions::get_instance();
				$url  = $ship->get_formatted_tracking_item( $this->getId(), $tracking );
				$this->setTrackingUrl( $url['formatted_tracking_link'] );
				// tracking number
				$this->setTrackingNumber( $tracking['tracking_number'] );
				return;
			}
		}

		// Support for woocommerce shipping plugin (https://woocommerce.com/woocommerce-shipping/)
		if ( class_exists( 'WC_Connect_Loader' ) ) {
			$label_data = get_post_meta( (int) $this->getId(), 'wc_connect_labels', true );
			// return an empty array if the data doesn't exist.
			if ( empty( $label_data ) ) {
				return;
			}
			if ( ! is_array( $label_data ) && is_string( $label_data ) ) {
				$label_data = json_decode( $label_data, true );
			}
			// labels stored as an array, return.
			if ( is_array( $label_data ) ) {
				foreach ( $label_data as $label ) {
					if ( ! empty( $label['tracking'] ) && ! empty( $label['carrier_id'] ) ) {
						$this->setTrackingNumber( $label['tracking'] );
						$this->setTrackingCarrier( $label['carrier_id'] );
						$this->setTrackingUrl();
					}
				}
			}
			return;
		}
	}
}
class-mailchimp-product-variation.php                                                                                                                                                                                                                          4483          1711191352  plugins/mailchimp-for-woocommerce/includes/api/assets                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 3/8/16
 * Time: 2:17 PM
 */
class MailChimp_WooCommerce_ProductVariation {

	protected $id                 = null;
	protected $title              = null;
	protected $url                = null;
	protected $sku                = null;
	protected $price              = null;
	protected $inventory_quantity = null;
	protected $image_url          = null;
	protected $backorders         = null;
	protected $visibility         = null;

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'                 => 'required|string',
			'title'              => 'required|string',
			'url'                => 'url',
			'sku'                => 'string',
			'price'              => 'numeric',
			'inventory_quantity' => 'integer',
			'image_url'          => 'url',
			'backorders'         => 'string',
			'visibility'         => 'string',
		);
	}

	/**
	 * @return null
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param null $id
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setId( $id ) {
		$this->id = $id;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * @param null $title
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setTitle( $title ) {
		$this->title = strip_tags( $title );

		return $this;
	}

	/**
	 * @return null
	 */
	public function getUrl() {
		return $this->url;
	}

	/**
	 * @param null $url
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setUrl( $url ) {
		$this->url = $url;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getSku() {
		return $this->sku;
	}

	/**
	 * @param null $sku
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setSku( $sku ) {
		$this->sku = $sku;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getPrice() {
		return $this->price;
	}

	/**
	 * @param null $price
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setPrice( $price ) {
		$this->price = $price;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getInventoryQuantity() {
		return $this->inventory_quantity;
	}

	/**
	 * @param null $inventory_quantity
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setInventoryQuantity( $inventory_quantity ) {
		$this->inventory_quantity = $inventory_quantity;

		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getImageUrl() {
		return ! empty( $this->image_url ) ? (string) $this->image_url : null;
	}

	/**
	 * @param null $image_url
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setImageUrl( $image_url ) {
		$this->image_url = $image_url;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getBackorders() {
		return $this->backorders;
	}

	/**
	 * @param null $backorders
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setBackorders( $backorders ) {
		$this->backorders = $backorders;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getVisibility() {
		return $this->visibility;
	}

	/**
	 * @param null $visibility
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function setVisibility( $visibility ) {
		$this->visibility = $visibility;

		return $this;
	}

	/**
	 * @return array
	 */
	public function toArray() {
		return mailchimp_array_remove_empty(
			array(
				'id'                 => (string) $this->getId(),
				'title'              => $this->getTitle(),
				'url'                => (string) $this->getUrl(),
				'sku'                => (string) $this->getSku(),
				'price'              => $this->getPrice(),
				'inventory_quantity' => (int) $this->getInventoryQuantity(),
				'image_url'          => (string) $this->getImageUrl(),
				'backorders'         => $this->getBackorders() ? 'true' : 'false',
				'visibility'         => (string) $this->getVisibility(),
			)
		);
	}

	/**
	 * @param array $data
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'title',
			'url',
			'sku',
			'price',
			'inventory_quantity',
			'image_url',
			'backorders',
			'visibility',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		return $this;
	}
}
class-mailchimp-product.php                                                                                                                                                                                                                                    5212          1711191352  plugins/mailchimp-for-woocommerce/includes/api/assets                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 3/8/16
 * Time: 2:17 PM
 */
class MailChimp_WooCommerce_Product {

	protected $id;
	protected $title;
	protected $handle               = null;
	protected $url                  = null;
	protected $description          = null;
	protected $type                 = null;
	protected $vendor               = null;
	protected $image_url            = null;
	protected $variants             = array();
	protected $published_at_foreign = null;

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'                   => 'required|string',
			'title'                => 'required|string',
			'handle'               => 'string',
			'url'                  => 'url',
			'description'          => 'string',
			'type'                 => 'string',
			'vendor'               => 'string',
			'image_url'            => 'url',
			'variants'             => 'required|array',
			'published_at_foreign' => 'date',
		);
	}

	/**
	 * @return mixed
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param mixed $id
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setId( $id ) {
		$this->id = $id;

		return $this;
	}

	/**
	 * @return mixed
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * @param mixed $title
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setTitle( $title ) {
		$this->title = strip_tags( $title );

		return $this;
	}

	/**
	 * @return null
	 */
	public function getHandle() {
		return $this->handle;
	}

	/**
	 * @param null $handle
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setHandle( $handle ) {
		$this->handle = $handle;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getUrl() {
		return $this->url;
	}

	/**
	 * @param null $url
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setUrl( $url ) {
		$this->url = $url;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * @param null $description
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setDescription( $description ) {
		$this->description = $description;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getType() {
		return $this->type;
	}

	/**
	 * @param null $type
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setType( $type ) {
		$this->type = $type;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getVendor() {
		return $this->vendor;
	}

	/**
	 * @param null $vendor
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setVendor( $vendor ) {
		$this->vendor = $vendor;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getImageUrl() {
		return $this->image_url;
	}

	/**
	 * @param null $image_url
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setImageUrl( $image_url ) {
		$this->image_url = $image_url;

		return $this;
	}

	/**
	 * @return array
	 */
	public function getVariations() {
		return $this->variants;
	}

	/**
	 * @param MailChimp_WooCommerce_ProductVariation $variation
	 * @return MailChimp_WooCommerce_Product
	 */
	public function addVariant( MailChimp_WooCommerce_ProductVariation $variation ) {
		$this->variants[] = $variation;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getPublishedAtForeign() {
		return $this->published_at_foreign;
	}

	/**
	 * @param DateTime $time
	 * @return MailChimp_WooCommerce_Product
	 */
	public function setPublishedAtForeign( DateTime $time ) {
		$this->published_at_foreign = $time->format( 'Y-m-d H:i:s' );

		return $this;
	}

	/**
	 * @return array
	 */
	public function toArray() {
		return mailchimp_array_remove_empty(
			array(
				'id'                   => (string) $this->getId(),
				'title'                => $this->getTitle(),
				'handle'               => (string) $this->getHandle(),
				'url'                  => (string) $this->getUrl(),
				'description'          => (string) $this->getDescription(),
				'type'                 => (string) $this->getType(),
				'vendor'               => (string) $this->getVendor(),
				'image_url'            => (string) $this->getImageUrl(),
				'variants'             => array_map(
					function ( $item ) {
						return $item->toArray();
					},
					$this->getVariations()
				),
				'published_at_foreign' => (string) $this->getPublishedAtForeign(),
			)
		);
	}

	/**
	 * @param array $data
	 * @return MailChimp_WooCommerce_Product
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'title',
			'handle',
			'url',
			'description',
			'type',
			'vendor',
			'image_url',
			'published_at_foreign',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		if ( array_key_exists( 'variants', $data ) && is_array( $data['variants'] ) ) {
			$this->variants = array();
			foreach ( $data['variants'] as $variant ) {
				$variation        = new MailChimp_WooCommerce_ProductVariation();
				$this->variants[] = $variation->fromArray( $variant );
			}
		}

		return $this;
	}
}
class-mailchimp-promo-code.php                                                                                                                                                                                                                                 4048          1711191352  plugins/mailchimp-for-woocommerce/includes/api/assets                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 6/13/17
 * Time: 1:19 PM
 */
class MailChimp_WooCommerce_PromoCode {

	/**
	 * @var string
	 * @title Promo Rule Foreign ID
	 * @description A unique identifier for the promo code
	 */
	protected $id;

	/**
	 * @var string
	 * @title Code
	 * @required
	 * @description The discount code
	 */
	protected $code;

	/**
	 * @var string
	 * @title Promo Redemption Url
	 * @required
	 * @description The url that should be used in the promotion campaign. Eg. A url that applies promo code directly at checkout or a url that points to sale page. Use store url if promotion url is not available.
	 */
	protected $redemption_url;

	/**
	 * @var string
	 * @title Description
	 * @default null
	 * @description Number of times promo code has been used.
	 */
	protected $usage_count;

	/**
	 * @var boolean
	 * @title Enabled
	 * @default true
	 * @description Whether the promo code is currently enabled. ***
	 */
	protected $enabled;

	/**
	 * @var DateTime
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $created_at_foreign;

	/**
	 * @var DateTime
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $updated_at_foreign;

	/**
	 * @var MailChimp_WooCommerce_PromoRule|null
	 */
	protected $promo_rule;

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'                 => 'required',
			'code'               => 'required',
			'redemption_url'     => 'required',
			'usage_count'        => 'integer',
			'created_at_foreign' => 'date',
			'updated_at_foreign' => 'date',
		);
	}

	/**
	 * @param MailChimp_WooCommerce_PromoRule $promo
	 * @return MailChimp_WooCommerce_PromoCode
	 */
	public function attachPromoRule( MailChimp_WooCommerce_PromoRule $promo ) {
		$this->promo_rule = $promo;
		return $this;
	}

	/**
	 * @return MailChimp_WooCommerce_PromoRule|null
	 */
	public function getAttachedPromoRule() {
		return $this->promo_rule;
	}

	/**
	 * @return string
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param null $id
	 * @return MailChimp_WooCommerce_PromoCode
	 */
	public function setId( $id ) {
		$this->id = $id;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getCode() {
		return $this->code;
	}

	/**
	 * @param $code
	 *
	 * @return $this
	 */
	public function setCode( $code ) {
		$this->code = $code;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getRedemptionURL() {
		return $this->redemption_url;
	}

	/**
	 * @param $url
	 *
	 * @return $this
	 */
	public function setRedemptionURL( $url ) {
		$this->redemption_url = $url;

		return $this;
	}

	public function getUsageCount() {
		return $this->usage_count;
	}

	/**
	 * @param $count
	 *
	 * @return $this
	 */
	public function setUsageCount( $count ) {
		$this->usage_count = $count;

		return $this;
	}

	/**
	 * @param $enabled
	 *
	 * @return $this
	 */
	public function setEnabled( $enabled ) {
		$this->enabled = (bool) $enabled;
		return $this;
	}

	/**
	 * @return bool
	 */
	public function isEnabled() {
		return (bool) $this->enabled;
	}

	/**
	 * @return array
	 */
	public function toArray() {
		return mailchimp_array_remove_empty(
			array(
				'id'             => (string) $this->getId(),
				'code'           => (string) $this->getCode(),
				'redemption_url' => (string) $this->getRedemptionURL(),
				'usage_count'    => $this->getUsageCount(),
				'enabled'        => $this->isEnabled(),
			)
		);
	}

	/**
	 * @param array $data
	 *
	 * @return $this
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'code',
			'usage_count',
			'enabled',
			'redemption_url',
			'created_at_foreign',
			'updated_at_foreign',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		return $this;
	}
}
class-mailchimp-promo-rule.php                                                                                                                                                                                                                                 6779          1711191352  plugins/mailchimp-for-woocommerce/includes/api/assets                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 6/13/17
 * Time: 1:19 PM
 */
class MailChimp_WooCommerce_PromoRule {

	/**
	 * @var string
	 * @title Promo Rule Foreign ID
	 * @default = null
	 * @description
	 * A unique identifier for the promo rule. If Ecomm platform does not support promo rule,
	 * use promo code id as promo rule id.
	 * Restricted to UTF-8 characters with max length 50
	 */
	protected $id;

	/**
	 * @var string
	 * @title Title
	 * @default null
	 * @description The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length 100
	 */
	protected $title;

	/**
	 * @var string
	 * @title Description
	 * @default null
	 * @description The description of a promotion
	 */
	protected $description;

	/**
	 * @var string
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $starts_at;

	/**
	 * @var string
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $ends_at;

	/**
	 * @var float
	 * @title Amount
	 * @required
	 * @description The amount of discount; Positive dollar or percentage amount.
	 */
	protected $amount;

	/**
	 * @var string
	 * @title Type
	 * @required
	 * @description One of ‘fixed’ , ‘percentage’
	 */
	protected $type;

	/**
	 * @var string
	 * @title Target
	 * @required
	 * @description One of ‘per_item’, ‘total’, ‘shipping’
	 */
	protected $target;

	/**
	 * @var boolean
	 * @title Enabled
	 * @default true
	 * @description Whether the promo rule is currently enabled
	 */
	protected $enabled = true;

	/**
	 * @var DateTime
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $created_at_foreign;

	/**
	 * @var DateTime
	 * @title Start Time
	 * @default null
	 * @description The date and time when the promotion starts in ISO 8601 format
	 */
	protected $updated_at_foreign;

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'                 => 'required',
			'amount'             => 'required|number',
			'type'               => 'required',
			'target'             => 'required',
			'enabled'            => 'boolean',
			'starts_at'          => 'date',
			'ends_at'            => 'date',
			'created_at_foreign' => 'date',
			'updated_at_foreign' => 'date',
		);
	}

	/**
	 * @return string
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param null $id
	 * @return MailChimp_WooCommerce_PromoRule
	 */
	public function setId( $id ) {
		$this->id = $id;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * @param $name
	 *
	 * @return $this
	 */
	public function setTitle( $name ) {
		$this->title = $name;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * @param $description
	 *
	 * @return $this
	 */
	public function setDescription( $description ) {
		$this->description = $description;

		return $this;
	}

	/**
	 * @param DateTime $date
	 * @return $this
	 */
	public function setStartsAt( DateTime $date ) {
		$this->starts_at = $date->format( DATE_ISO8601 );

		return $this;
	}

	/**
	 * @return string
	 */
	public function getStartsAt() {
		return $this->starts_at;
	}

	/**
	 * @param DateTime $date
	 * @return $this
	 */
	public function setEndsAt( DateTime $date ) {
		$this->ends_at = $date->format( DATE_ISO8601 );

		return $this;
	}

	/**
	 * @return string
	 */
	public function getEndsAt() {
		return $this->ends_at;
	}

	/**
	 * @param $enabled
	 * @return $this
	 */
	public function setEnabled( $enabled ) {
		$this->enabled = (bool) $enabled;
		return $this;
	}

	/**
	 * @return bool
	 */
	public function isEnabled() {
		return (bool) $this->enabled;
	}

	/**
	 * @return string
	 */
	public function getAmount() {
		return $this->amount;
	}

	/**
	 * @param $amount
	 *
	 * @return $this
	 */
	public function setAmount( $amount ) {
		$this->amount = $amount;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getType() {
		return $this->type;
	}

	/**
	 * @return string
	 */
	public function getTarget() {
		return $this->target;
	}

	/**
	 * @return $this
	 */
	public function setTypeFixed() {
		$this->type = 'fixed';

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setTypePercentage() {
		$this->type = 'percentage';

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setTargetTypePerItem() {
		$this->target = 'per_item';

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setTargetTypeShipping() {
		$this->target = 'shipping';

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setTargetTypeTotal() {
		$this->target = 'total';

		return $this;
	}
	/**
	 * @param DateTime $time
	 * @return $this
	 */
	public function setUpdatedAt( DateTime $time ) {
		$this->updated_at_foreign = $time->format( DATE_ISO8601 );

		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getUpdatedAt() {
		return $this->updated_at_foreign;
	}

	/**
	 * @param DateTime $time
	 * @return $this
	 */
	public function setCreatedAt( DateTime $time ) {
		$this->created_at_foreign = $time->format( DATE_ISO8601 );

		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getCreatedAt() {
		return $this->created_at_foreign;
	}

	/**
	 * @return array
	 */
	public function toArray() {
		return mailchimp_array_remove_empty(
			array(
				'id'                 => (string) $this->getId(),
				'title'              => (string) $this->getTitle(),
				'description'        => (string) $this->getDescription(),
				'starts_at'          => (string) $this->getStartsAt(),
				'ends_at'            => (string) $this->getEndsAt(),
				'amount'             => floatval( $this->getAmount() ),
				'type'               => (string) $this->getType(),
				'target'             => (string) $this->getTarget(),
				'enabled'            => (bool) $this->isEnabled(),
				'created_at_foreign' => (string) $this->getCreatedAt(),
				'updated_at_foreign' => (string) $this->getUpdatedAt(),
			)
		);
	}

	/**
	 * @param array $data
	 * @return MailChimp_WooCommerce_PromoRule
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'title',
			'description',
			'starts_at',
			'ends_at',
			'amount',
			'type',
			'target',
			'enabled',
			'created_at_foreign',
			'updated_at_foreign',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		return $this;
	}
}
class-mailchimp-store.php                                                                                                                                                                                                                                      7046          1711191352  plugins/mailchimp-for-woocommerce/includes/api/assets                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 3/8/16
 * Time: 3:13 PM
 */
class MailChimp_WooCommerce_Store {

	protected $id             = null;
	protected $is_syncing     = false;
	protected $list_id        = null;
	protected $name           = null;
	protected $domain         = null;
	protected $email_address  = null;
	protected $currency_code  = null;
	protected $money_format   = null;
	protected $primary_locale = null;
	protected $timezone       = null;
	protected $phone          = null;
	protected $address        = null;
	protected $platform       = null;
	protected $connected_site = null;

	/**
	 * @return array
	 */
	public function getValidation() {
		return array(
			'id'             => 'required|string',
			'list_id'        => 'required|string',
			'name'           => 'required|string',
			'domain'         => 'string',
			'email_address'  => 'email',
			'currency_code'  => 'required|currency_code',
			'primary_locale' => 'locale_basic',
			'timezone'       => 'timezone',
			'phone'          => 'string',
		);
	}

	/**
	 * @return null
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param null $id
	 * @return MailChimp_WooCommerce_Store
	 */
	public function setId( $id ) {
		$this->id = $id;

		return $this;
	}

	/**
	 * @param $bool
	 * @return $this
	 */
	public function flagSyncing( $bool ) {
		$this->is_syncing = $bool;

		return $this;
	}

	/**
	 * @return bool
	 */
	public function isSyncing() {
		return $this->is_syncing;
	}

	/**
	 * @return null
	 */
	public function getListId() {
		return $this->list_id;
	}

	/**
	 * @param null $list_id
	 * @return MailChimp_WooCommerce_Store
	 */
	public function setListId( $list_id ) {
		$this->list_id = $list_id;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getName() {
		return $this->name;
	}

	/**
	 * @param null $name
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setName( $name ) {
		$this->name = $name;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getDomain() {
		return $this->domain;
	}

	/**
	 * @param null $domain
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setDomain( $domain ) {
		$this->domain = $domain;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getEmailAddress() {
		return $this->email_address;
	}

	/**
	 * @param null $email_address
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setEmailAddress( $email_address ) {
		$this->email_address = $email_address;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getCurrencyCode() {
		return $this->currency_code;
	}

	/**
	 * @param $code
	 *
	 * @return $this
	 */
	public function setCurrencyCode( $code ) {
		if ( ! isset( $code ) ) {
			$code = get_woocommerce_currency();
		}
		$this->currency_code = $code;
		return $this;
	}

	/**
	 * @return null
	 */
	public function getMoneyFormat() {
		return $this->money_format;
	}

	/**
	 * @param $code
	 *
	 * @return $this
	 */
	public function setMoneyFormat( $code ) {
		if ( ! isset( $code ) ) {
			$code = get_woocommerce_currency();
		}

		$this->money_format = html_entity_decode( get_woocommerce_currency_symbol( $code ) );

		return $this;
	}

	/**
	 * @return null
	 */
	public function getPrimaryLocale() {
		return $this->primary_locale;
	}

	/**
	 * @param null $primary_locale
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setPrimaryLocale( $primary_locale ) {
		$this->primary_locale = $primary_locale;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getTimezone() {
		return $this->timezone;
	}

	/**
	 * @param null $timezone
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setTimezone( $timezone ) {
		$this->timezone = $timezone;

		return $this;
	}

	/**
	 * @return null
	 */
	public function getPhone() {
		return $this->phone;
	}

	/**
	 * @param null $phone
	 * @return MailChimp_WooCommerce_Store;
	 */
	public function setPhone( $phone ) {
		$this->phone = $phone;

		return $this;
	}

	/**
	 * @param $platform
	 * @return $this
	 */
	public function setPlatform( $platform ) {
		$this->platform = $platform;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getPlatform() {
		return $this->platform;
	}

	/**
	 * @return MailChimp_WooCommerce_Address
	 */
	public function getAddress() {
		if ( empty( $this->address ) ) {
			$this->address = new MailChimp_WooCommerce_Address();
		}
		return $this->address;
	}

	/**
	 * @param MailChimp_WooCommerce_Address $address
	 *
	 * @return $this
	 */
	public function setAddress( MailChimp_WooCommerce_Address $address ) {
		$this->address = $address;

		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getConnectedSiteForeignID() {
		return $this->getConnectedSiteParam( 'site_foreign_id' );
	}

	/**
	 * @return null|string
	 */
	public function getConnectedSiteScriptUrl() {
		if ( ( $script = $this->getConnectedSiteParam( 'site_script' ) ) ) {
			return $script['url'];
		}
		return false;
	}

	/**
	 * @return null|string
	 */
	public function getConnectedSiteScriptFragment() {
		if ( ( $script = $this->getConnectedSiteParam( 'site_script' ) ) ) {
			return $script['fragment'];
		}
		return false;
	}

	/**
	 * @param $key
	 * @param null $default
	 * @return null
	 */
	public function getConnectedSiteParam( $key, $default = null ) {
		if ( empty( $this->connected_site ) ) {
			return $default;
		}
		return array_key_exists( $key, $this->connected_site ) ? $this->connected_site[ $key ] : null;
	}

	/**
	 * @return array
	 */
	public function toArray() {
		return mailchimp_array_remove_empty(
			array(
				'id'             => $this->getId(),
				'is_syncing'     => $this->isSyncing(),
				'platform'       => $this->getPlatform(),
				'list_id'        => $this->getListId(),
				'name'           => $this->getName(),
				'domain'         => $this->getDomain(),
				'email_address'  => $this->getEmailAddress(),
				'currency_code'  => $this->getCurrencyCode(),
				'money_format'   => $this->getMoneyFormat(),
				'primary_locale' => $this->getPrimaryLocale(),
				'timezone'       => $this->getTimezone(),
				'phone'          => $this->getPhone(),
				'address'        => $this->getAddress()->toArray(),
			)
		);
	}

	/**
	 * @param array $data
	 * @return MailChimp_WooCommerce_Store
	 */
	public function fromArray( array $data ) {
		$singles = array(
			'id',
			'list_id',
			'name',
			'domain',
			'is_syncing',
			'email_address',
			'currency_code',
			'money_format',
			'primary_locale',
			'timezone',
			'phone',
			'platform',
		);

		foreach ( $singles as $key ) {
			if ( array_key_exists( $key, $data ) ) {
				$this->$key = $data[ $key ];
			}
		}

		if ( array_key_exists( 'address', $data ) ) {
			$address       = new MailChimp_WooCommerce_Address();
			$this->address = $address->fromArray( $data['address'] );
		}

		if ( array_key_exists( 'connected_site', $data ) ) {
			$this->connected_site = $data['connected_site'];
		}

		return $this;
	}
}
class-mailchimp-api.php                                                                                                                                                                                                                                        68088         1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Class MailChimp_WooCommerce_MailChimpApi
 */
class MailChimp_WooCommerce_MailChimpApi {

	protected $version     = '3.0';
	protected $data_center = 'us2';
	protected $api_key     = null;
	protected $auth_type   = 'key';

	/** @var null|MailChimp_WooCommerce_MailChimpApi */
	protected static $instance = null;

	/**
	 * @return null|MailChimp_WooCommerce_MailChimpApi
	 */
	public static function getInstance() {
		return static::$instance;
	}

	/**
	 * @param $api_key
	 *
	 * @return MailChimp_WooCommerce_MailChimpApi
	 */
	public static function constructInstance( $api_key ) {
		return static::$instance = new MailChimp_WooCommerce_MailChimpApi( $api_key );
	}

	/**
	 * MailChimp_WooCommerce_MailChimpApi constructor.
	 *
	 * @param null $api_key
	 */
	public function __construct( $api_key = null ) {
		if ( ! empty( $api_key ) ) {
			$this->setApiKey( $api_key );
		}
	}

	/**
	 * @param $key
	 *
	 * @return $this
	 */
	public function setApiKey( $key ) {
		$parts = str_getcsv( $key, '-' );

		if ( count( $parts ) == 2 ) {
			$this->data_center = $parts[1];
		}

		$this->api_key = $parts[0];

		return $this;
	}

	/**
	 * @param $dc
	 *
	 * @return $this
	 */
	public function setDataCenter( $dc ) {
		$this->data_center = $dc;

		return $this;
	}

	/**
	 * @param $version
	 *
	 * @return $this
	 */
	public function setVersion( $version ) {
		$this->version = $version;

		return $this;
	}

	/**
	 * @param false $return_profile
	 * @param false $throw_error
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function ping( $return_profile = false, $throw_error = false ) {
		try {
			$profile = $this->get( '/' );
			return $return_profile ? $profile : true;
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw_error ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getProfile() {
		return $this->get( '/' );
	}

	/**
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getAuthorizedApps() {
		return $this->get( 'authorized-apps' );
	}

	/**
	 * @param $id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getAuthorizedAppDetails( $id ) {
		return $this->get( "authorized-apps/$id" );
	}

	/**
	 * @param $client_id
	 * @param $client_secret
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function linkAuthorizedApp( $client_id, $client_secret ) {
		return $this->post(
			'authorized-apps',
			array(
				'client_id'     => $client_id,
				'client_secret' => $client_secret,
			)
		);
	}

	/**
	 * @param $list_id
	 * @param $email
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function member( $list_id, $email ) {
		$hash = md5( strtolower( trim( $email ) ) );
		return $this->get( "lists/$list_id/members/$hash", array() );
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @return array|bool
	 * @throws \Throwable
	 */
	public function activity($list_id, $email)
	{
		$hash = md5(strtolower(trim($email)));
		return $this->get("lists/{$list_id}/members/{$hash}/activity");
	}

	/**
	 * @param $list_id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function members( $list_id ) {
		return $this->get( "lists/$list_id/members" );
	}

	/**
	 * @param $list_id
	 * @param $email
	 *
	 * @return bool
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function deleteMember( $list_id, $email ) {
		$hash = md5( strtolower( trim( $email ) ) );
		return (bool) $this->delete( "lists/$list_id/members/$hash", array() );
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @param bool    $subscribed
	 * @param array   $merge_fields
	 * @param array   $list_interests
	 * @param null    $language
	 * @param null    $gdpr_fields
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function subscribe( $list_id, $email, $subscribed = '1', $merge_fields = array(), $list_interests = array(), $language = null, $gdpr_fields = null ) {
		if ( $subscribed === '1' ) {
            $status = 'subscribed';
		} elseif ( $subscribed === '0' || empty($subscribed) ) {
            $status = 'transactional';
        } else {
            $status = $subscribed;
        }

		$data = $this->cleanListSubmission(
			array(
				'email_type'            => 'html',
				'email_address'         => $email,
				'status'                => $status,
				'merge_fields'          => $merge_fields,
				'interests'             => $list_interests,
				'language'              => $language,
				'marketing_permissions' => $gdpr_fields,
			)
		);

		$this->validateNaughtyListEmail( $email );

		mailchimp_debug( 'api.subscribe', "Subscribing {$email}", $data );

		try {
			return $this->post( "lists/$list_id/members?skip_merge_validation=true", $data );
		} catch ( Exception $e ) {
			// If mailchimp says is already a member lets send the update by PUT
			if ( mailchimp_string_contains( $e->getMessage(), 'is already a list member' ) ) {
				return $this->applyPutRequestOnSubscriber( $list_id, $email, $data );
			} elseif ( $data['status'] !== 'subscribed' || ! mailchimp_string_contains( $e->getMessage(), 'compliance state' ) ) {
				throw $e;
			}
			$data['status'] = 'pending';
			$result         = $this->post( "lists/$list_id/members?skip_merge_validation=true", $data );
			mailchimp_log( 'api', "{$email} was in compliance state, sending the double opt in message" );
			return $result;
		}
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @param bool    $subscribed
	 * @param array   $merge_fields
	 * @param array   $list_interests
	 * @param null    $language
	 * @param null    $gdpr_fields
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function update( $list_id, $email, $subscribed = '1', $merge_fields = array(), $list_interests = array(), $language = null, $gdpr_fields = null ) {
		$hash = md5( strtolower( trim( $email ) ) );

		if ( $subscribed === '1' ) {
			$status = 'subscribed';
		} elseif ( $subscribed === '0' ) {
			$status = 'transactional';
		} elseif ( $subscribed === null ) {
			$status = 'cleaned';
		} else {
			$status = $subscribed;
		}

		$data = $this->cleanListSubmission(
			array(
				'email_address'         => $email,
				'status'                => $status,
				'merge_fields'          => $merge_fields,
				'interests'             => $list_interests,
				'language'              => $language,
				'marketing_permissions' => $gdpr_fields,
			)
		);

		$this->validateNaughtyListEmail( $email );

		mailchimp_debug( 'api.update_member', "Updating {$email}", $data );

		try {
			return $this->patch( "lists/$list_id/members/$hash?skip_merge_validation=true", $data );
		} catch ( Exception $e ) {

			// If mailchimp says is already a member lets send the update by PUT
			if ( mailchimp_string_contains( $e->getMessage(), 'is already a list member' ) ) {
				return $this->applyPutRequestOnSubscriber( $list_id, $email, $data );
			} elseif ( $data['status'] !== 'subscribed' || ! mailchimp_string_contains( $e->getMessage(), 'compliance state' ) ) {
				throw $e;
			}

			$data['status'] = 'pending';
			$result         = $this->patch( "lists/$list_id/members/$hash?skip_merge_validation=true", $data );
			mailchimp_log( 'api', "{$email} was in compliance state, sending the double opt in message" );
			return $result;

		}
	}

	/**
	 * @param $data
	 *
	 * @return mixed
	 */
	protected function cleanListSubmission( $data ) {
		if ( empty( $data['merge_fields'] ) ) {
			unset( $data['merge_fields'] );
		}

		if ( empty( $data['interests'] ) ) {
			unset( $data['interests'] );
		}

		if ( empty( $data['language'] ) ) {
			unset( $data['language'] );
		}

		if ( empty( $data['marketing_permissions'] ) ) {
			unset( $data['marketing_permissions'] );
		}
		return $data;
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @param $data
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function applyPutRequestOnSubscriber( $list_id, $email, $data ) {
		try {
			$hash = md5( strtolower( trim( $email ) ) );
			mailchimp_log( 'api.update', "{$email} was already a list member sending the update by PUT" );
			return $this->put( "lists/$list_id/members/$hash?skip_merge_validation=true", $data );
		} catch ( Exception $e ) {
			throw $e;
		}
	}

	/**
	 * @param $list_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getSubscribedCount( $list_id ) {
		if ( empty( $list_id ) ) {
			return 0;
		}
		return $this->get( "lists/{$list_id}/members?status=subscribed&count=1" )['total_items'];
	}

	/**
	 * @param $list_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getUnsubscribedCount( $list_id ) {
		if ( empty( $list_id ) ) {
			return 0;
		}
		return $this->get( "lists/{$list_id}/members?status=unsubscribed&count=1" )['total_items'];
	}

	/**
	 * @param $list_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getTransactionalCount( $list_id ) {
		if ( empty( $list_id ) ) {
			return 0;
		}
		return $this->get( "lists/{$list_id}/members?status=transactional&count=1" )['total_items'];
	}


	/**
	 * @param $list_id
	 * @param $email
	 * @param false   $fail_silently
	 * @param null    $order
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function updateMemberTags( $list_id, $email, $fail_silently = false, $order = null ) {
		$hash = md5( strtolower( trim( $email ) ) );
		$tags = mailchimp_get_user_tags_to_update( $email, $order );

		if ( empty( $tags ) ) {
			return false;
		}

		$data = array(
			'tags' => $tags,
		);

		mailchimp_debug( 'api.update_member_tags', "Updating {$email}", $data );

		try {
			return $this->post( "lists/$list_id/members/$hash/tags", $data );
		} catch ( Exception $e ) {
			if ( ! $fail_silently ) {
				throw $e;
			}
		}

		return false;
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @param bool    $subscribed
	 * @param array   $merge_fields
	 * @param array   $list_interests
	 * @param null    $language
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function updateOrCreate( $list_id, $email, $subscribed = true, $merge_fields = array(), $list_interests = array(), $language = null ) {
		$hash = md5( strtolower( trim( $email ) ) );

		if ( $subscribed === true ) {
			$status        = 'subscribed';
			$status_if_new = 'subscribed';
		} elseif ( $subscribed === false ) {
			$status        = 'transactional';
			$status_if_new = 'pending';
		} elseif ( $subscribed === null ) {
			$status        = 'cleaned';
			$status_if_new = 'subscribed';
		} else {
			$status        = $subscribed;
			$status_if_new = 'pending';
		}

		$data = array(
			'email_address' => $email,
			'status'        => $status,
			'status_if_new' => $status_if_new,
			'merge_fields'  => $merge_fields,
			'interests'     => $list_interests,
			'language'      => $language,
		);

		if ( empty( $data['merge_fields'] ) ) {
			unset( $data['merge_fields'] );
		}

		if ( empty( $data['interests'] ) ) {
			unset( $data['interests'] );
		}

		if ( empty( $data['language'] ) ) {
			unset( $data['language'] );
		}

		$this->validateNaughtyListEmail( $email );

		mailchimp_debug( 'api.update_or_create', "Update Or Create {$email}", $data );

		return $this->put( "lists/$list_id/members/$hash", $data );
	}

	/**
	 * @param MailChimp_WooCommerce_CreateListSubmission $submission
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function createList( MailChimp_WooCommerce_CreateListSubmission $submission ) {
		return $this->post( 'lists', $submission->getSubmission() );
	}

	/**
	 * @param $list_id
	 * @param MailChimp_WooCommerce_CreateListSubmission $submission
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateList( $list_id, MailChimp_WooCommerce_CreateListSubmission $submission ) {
		return $this->patch( "lists/{$list_id}", $submission->getSubmission() );
	}

	/**
	 * @param false $as_list
	 * @param int   $count
	 *
	 * @return array|bool|object
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getLists( $as_list = false, $count = 100 ) {
		$result = $this->get( 'lists', array( 'count' => $count ) );

		if ( ! is_array( $result ) ) {
			throw new MailChimp_WooCommerce_RateLimitError( 'getting lists api failure, retry again.' );
		}

		if ( $as_list ) {
			$lists = array();
			if ( $result ) {
				$result = (object) $result;
				if ( isset( $result->lists ) && is_array( $result->lists ) ) {
					foreach ( $result->lists as $list ) {
						$list               = (object) $list;
						$lists[ $list->id ] = $list->name;
					}
				}
			}

			return $lists;
		}

		return $result;
	}

	/**
	 * @param $id
	 *
	 * @return bool
	 */
	public function hasList( $id ) {
		try {
			return (bool) $this->getList( $id );
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $id
	 *
	 * @return array|bool|object
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getList( $id ) {
		$result = $this->get( 'lists/' . $id );
		if ( ! is_array( $result ) ) {
			throw new MailChimp_WooCommerce_RateLimitError( 'getting list api failure, retry again.' );
		}
		return $result;
	}

	/**
	 * @param $id
	 *
	 * @return bool
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function deleteList( $id ) {
		return (bool) $this->delete( 'lists/' . $id );
	}

	/**
	 * @return array|bool|mixed|object
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getListsWithMergeFields() {
		$lists = $this->getLists( true );

		foreach ( $lists as $id => $name ) {
			$lists[ $id ] = $this->mergeFields( $id, 100 );
		}

		return $lists;
	}

	/**
	 * @param $list_id
	 * @param int     $count
	 *
	 * @return array|bool|object
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function mergeFields( $list_id, $count = 10 ) {
		$result = $this->get( "lists/$list_id/merge-fields", array( 'count' => $count ) );

		if ( ! is_array( $result ) ) {
			throw new MailChimp_WooCommerce_RateLimitError( 'getting merge field api failure, retry again.' );
		}

		return $result;
	}

	/**
	 * @param $list_id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getInterestGroups( $list_id ) {
		if ( empty( $list_id ) ) {
			return array();
		}
		return $this->get( "lists/$list_id/interest-categories" );
	}

	/**
	 * @param $list_id
	 * @param $group_id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getInterestGroupOptions( $list_id, $group_id ) {
		if ( empty( $list_id ) || empty( $group_id ) ) {
			return array();
		}
		return $this->get( "lists/$list_id/interest-categories/$group_id/interests" );
	}

	/**
	 * @param $store_id
	 * @param int           $page
	 * @param int           $count
	 * @param DateTime|null $since
	 * @param null          $campaign_id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function orders( $store_id, $page = 1, $count = 10, DateTime $since = null, $campaign_id = null ) {
		return $this->get(
			'ecommerce/stores/' . $store_id . '/orders',
			array(
				'start'  => $page,
				'count'  => $count,
				'offset' => ( $page * $count ),
				'since'  => ( $since ? $since->format( 'Y-m-d H:i:s' ) : null ),
				'cid'    => $campaign_id,
			)
		);
	}

	/**
	 * @param $store_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getOrderCount( $store_id ) {
		$data = $this->get( "ecommerce/stores/{$store_id}/orders?count=1" );
		if ( ! is_array( $data ) ) {
			return 0;
		}
		return $data['total_items'];
	}

	/**
	 * @param $store_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getProductCount( $store_id ) {
		$data = $this->get( "ecommerce/stores/{$store_id}/products?count=1" );
		if ( ! is_array( $data ) ) {
			return 0;
		}
		return $data['total_items'];
	}

	/**
	 * @param $store_id
	 *
	 * @return int|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getCustomerCount( $store_id ) {
		$data = $this->get( "ecommerce/stores/{$store_id}/customers?count=1" );
		if ( ! is_array( $data ) ) {
			return 0;
		}
		return $data['total_items'];
	}

	/**
	 * @param $store_id
	 *
	 * @return false|MailChimp_WooCommerce_Store
	 */
	public function getStoreIfAvailable( $store_id ) {
		try {
			return $this->getStore( $store_id, true );
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param false    $throw
	 *
	 * @return false|MailChimp_WooCommerce_Store
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getStore( $store_id, $throw = false ) {
		try {
			$data = $this->get( "ecommerce/stores/$store_id" );
			if ( ! is_array( $data ) ) {
				throw new MailChimp_WooCommerce_RateLimitError( 'getting store api failure, retry again.' );
			}
			if ( ! isset( $data['id'] ) || ! isset( $data['name'] ) ) {
				return false;
			}
			$store = new MailChimp_WooCommerce_Store();
			return $store->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		} catch ( Exception $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $campaign_id
	 * @param bool        $throw_if_invalid
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getCampaign( $campaign_id, $throw_if_invalid = true ) {
		// don't let an empty campaign ID do anything
		if ( empty( $campaign_id ) ) {
			return false;
		}

		// if we found the campaign ID already and it's been stored in the cache, return it from the cache instead.
		if ( ( $data = get_site_transient( 'mailchimp-woocommerce-has-campaign-id-' . $campaign_id ) ) && ! empty( $data ) ) {
			return $data;
		}
		if ( get_site_transient( 'mailchimp-woocommerce-no-campaign-id-' . $campaign_id ) ) {
			return false;
		}
		try {
			$data = $this->get( "campaigns/$campaign_id" );
			delete_site_transient( 'mailchimp-woocommerce-no-campaign-id-' . $campaign_id );
			set_site_transient( 'mailchimp-woocommerce-has-campaign-id-' . $campaign_id, $data, 60 * 30 );
			return $data;
		} catch ( Exception $e ) {
			mailchimp_debug( 'campaign_get.error', 'No campaign with provided ID: ' . $campaign_id . ' :: ' . $e->getMessage() . ' :: in ' . $e->getFile() . ' :: on ' . $e->getLine() );
			set_site_transient( 'mailchimp-woocommerce-no-campaign-id-' . $campaign_id, true, 60 * 30 );

			if ( ! $throw_if_invalid ) {
				return false;
			}
			throw $e;
		}
	}

	/**
	 * @param $store_id
	 *
	 * @return array|bool|mixed|object|null
	 */
	public function checkConnectedSite( $store_id ) {
		try {
			 return $this->get( "connected-sites/{$store_id}" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 *
	 * @return array|bool|mixed|object|null
	 */
	public function connectSite( $store_id ) {
		try {
			return $this->post( "connected-sites/{$store_id}/actions/verify-script-installation", array() );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @return array|false
	 */
	public function stores() {
		try {
			$data = $this->get( 'ecommerce/stores', array( 'count' => 1000 ) );

			if ( ! isset( $data['stores'] ) || empty( $data['stores'] ) || ! is_array( $data['stores'] ) ) {
				return array();
			}

			$response = array();

			foreach ( $data['stores'] as $store_data ) {
				$store      = new MailChimp_WooCommerce_Store();
				$response[] = $store->fromArray( $store_data );
			}

			return $response;
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $is_syncing
	 *
	 * @return array|bool|mixed|object|null
	 */
	public function flagStoreSync( $store_id, $is_syncing ) {
		try {
			// pull the store to make sure we have one.
			if ( ! ( $store = $this->getStore( $store_id ) ) ) {
				return false;
			}

			// flag it as ^^^ is_syncing ^^^
			$store->flagSyncing( $is_syncing );

			// patch the store data
			return $this->patch( "ecommerce/stores/{$store_id}", $store->toArray() );

		} catch ( Exception $e ) {
			mailchimp_log( 'flag.store_sync', $e->getMessage() . ' :: in ' . $e->getFile() . ' :: on ' . $e->getLine() );
		}
		return false;
	}

	/**
	 * @param MailChimp_WooCommerce_Store $store
	 * @param bool                        $silent
	 *
	 * @return false|MailChimp_WooCommerce_Store
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addStore( MailChimp_WooCommerce_Store $store, $silent = true ) {
		try {
			$this->validateStoreSubmission( $store );
			$data  = $this->post( 'ecommerce/stores', $store->toArray() );
			$store = new MailChimp_WooCommerce_Store();
			return $store->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param MailChimp_WooCommerce_Store $store
	 * @param bool                        $silent
	 *
	 * @return false|MailChimp_WooCommerce_Store
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateStore( MailChimp_WooCommerce_Store $store, $silent = true ) {
		try {
			$this->validateStoreSubmission( $store );
			$data  = $this->patch( "ecommerce/stores/{$store->getId()}", $store->toArray() );
			$store = new MailChimp_WooCommerce_Store();
			return $store->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 *
	 * @return bool
	 */
	public function deleteStore( $store_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/$store_id" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			mailchimp_error( "delete_store {$store_id}", $e->getMessage() );
			return false;
		} catch ( Exception $e ) {
			mailchimp_error( "delete_store {$store_id}", $e->getMessage() );
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $customer_id
	 * @param false       $throw
	 *
	 * @return false|MailChimp_WooCommerce_Customer
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getCustomer( $store_id, $customer_id, $throw = false ) {
		try {
			$data = $this->get( "ecommerce/stores/$store_id/customers/$customer_id" );
			if ( ! is_array( $data ) ) {
				throw new MailChimp_WooCommerce_RateLimitError( 'getting customer api failure, retry again.' );
			}
			$customer = new MailChimp_WooCommerce_Customer();
			return $customer->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param MailChimp_WooCommerce_Customer $customer
	 *
	 * @return false|MailChimp_WooCommerce_Customer
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addCustomer( MailChimp_WooCommerce_Customer $customer ) {
		if ( ! ( $this->validateStoreSubmission( $customer ) ) ) {
			return false;
		}
		$data = $this->post( 'ecommerce/stores', $customer->toArray() );
		if ( ! is_array( $data ) ) {
			throw new MailChimp_WooCommerce_RateLimitError( 'adding customer api failure, retry again.' );
		}
		$customer = new MailChimp_WooCommerce_Customer();
		return $customer->fromArray( $data );
	}

	/**
	 * @param $store_id
	 * @param int      $page
	 * @param int      $count
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function carts( $store_id, $page = 1, $count = 10 ) {
		return $this->get(
			'ecommerce/stores/' . $store_id . '/carts',
			array(
				'start'  => $page,
				'count'  => $count,
				'offset' => ( $page * $count ),
			)
		);
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Cart $cart
	 * @param bool                       $silent
	 *
	 * @return false|MailChimp_WooCommerce_Cart
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addCart( $store_id, MailChimp_WooCommerce_Cart $cart, $silent = true ) {
		try {
			$email = $cart->getCustomer()->getEmailAddress();

			if ( mailchimp_email_is_privacy_protected( $email ) || mailchimp_email_is_amazon( $email ) ) {
				return false;
			}

			$this->validateNaughtyList( $cart->getCustomer() );

			mailchimp_debug( 'api.addCart', "Adding Cart :: {$email}", $data = $cart->toArray() );

			$data = $this->post( "ecommerce/stores/$store_id/carts", $data );
			$cart = new MailChimp_WooCommerce_Cart();
			return $cart->setStoreID( $store_id )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.addCart', $e->getMessage() );
			return false;
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Cart $cart
	 * @param bool                       $silent
	 *
	 * @return false|MailChimp_WooCommerce_Cart
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateCart( $store_id, MailChimp_WooCommerce_Cart $cart, $silent = true ) {
		try {
			$email = $cart->getCustomer()->getEmailAddress();

			if ( mailchimp_email_is_privacy_protected( $email ) || mailchimp_email_is_amazon( $email ) ) {
				return false;
			}

			$this->validateNaughtyList( $cart->getCustomer() );

			mailchimp_debug( 'api.updateCart', "Updating Cart :: {$email}", $data = $cart->toArrayForUpdate() );

			$data = $this->patch( "ecommerce/stores/$store_id/carts/{$cart->getId()}", $data );
			$cart = new MailChimp_WooCommerce_Cart();
			return $cart->setStoreID( $store_id )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.updateCart', $e->getMessage() );
			return false;
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $id
	 *
	 * @return false|MailChimp_WooCommerce_Cart
	 */
	public function getCart( $store_id, $id ) {
		try {
			$data = $this->get( "ecommerce/stores/$store_id/carts/$id" );
			$cart = new MailChimp_WooCommerce_Cart();
			return $cart->setStoreID( $store_id )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $id
	 *
	 * @return bool
	 */
	public function deleteCartByID( $store_id, $id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/$store_id/carts/$id" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Customer $customer
	 * @param bool                           $silent
	 *
	 * @return false|MailChimp_WooCommerce_Customer
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateCustomer( $store_id, MailChimp_WooCommerce_Customer $customer, $silent = true ) {
		try {
			if ( ! $this->validateStoreSubmission( $customer ) ) {
				return false;
			}
			$data     = $this->patch( "ecommerce/stores/$store_id/customers/{$customer->getId()}", $customer->toArray() );
			$customer = new MailChimp_WooCommerce_Customer();
			return $customer->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $customer_id
	 * @return bool
	 */
	public function deleteCustomer( $store_id, $customer_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/$store_id/customers/$customer_id" );
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Order $order
	 * @param bool                        $silent
	 *
	 * @return false|MailChimp_WooCommerce_Order
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addStoreOrder( $store_id, MailChimp_WooCommerce_Order $order, $silent = true ) {
		try {
			if ( ! $this->validateStoreSubmission( $order ) ) {
				return false;
			}

			// submit the first one
			$data = $this->post( "ecommerce/stores/$store_id/orders", $order->toArray() );

			$email_address = $order->getCustomer()->getEmailAddress();

			// if the order is in pending status, we need to submit the order again with a paid status.
			if ( $order->shouldConfirmAndPay() && $order->getFinancialStatus() !== 'paid' ) {
				$order->setFinancialStatus( 'paid' );
				$data = $this->patch( "ecommerce/stores/{$store_id}/orders/{$order->getId()}", $order->toArray() );
			}

			// update the member tags but fail silently just in case.
			$this->updateMemberTags( mailchimp_get_list_id(), $email_address, true, $order );

			update_option( 'mailchimp-woocommerce-resource-last-updated', time() );
			$order = new MailChimp_WooCommerce_Order();
			return $order->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.add_order.error', $e->getMessage(), array( 'submission' => $order->toArray() ) );
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Order $order
	 * @param bool                        $silent
	 *
	 * @return false|MailChimp_WooCommerce_Order
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateStoreOrder( $store_id, MailChimp_WooCommerce_Order $order, $silent = true ) {
		try {
			if ( ! $this->validateStoreSubmission( $order ) ) {
				return false;
			}
			$order_id = $order->getId();
			$data     = $this->patch( "ecommerce/stores/{$store_id}/orders/{$order_id}", $order->toArray() );

			// update user tags
			$email_address = $order->getCustomer()->getEmailAddress();

			// if products list differs, we should remove the old products and add new ones
			$data_lines  = $data['lines'];
			$order_lines = $order->getLinesIds();
			foreach ( $data_lines as $line ) {
				if ( ! in_array( $line['id'], $order_lines ) ) {
					$this->deleteStoreOrderLine( $store_id, $order_id, $line['id'] );
				}
			}

			// if the order is in pending status, we need to submit the order again with a paid status.
			if ( $order->shouldConfirmAndPay() && $order->getFinancialStatus() !== 'paid' ) {
				$order->setFinancialStatus( 'paid' );
				$data = $this->patch( "ecommerce/stores/{$store_id}/orders/{$order_id}", $order->toArray() );
			}

			// update the member tags but fail silently just in case.
			$this->updateMemberTags( mailchimp_get_list_id(), $email_address, true, $order );

			$order = new MailChimp_WooCommerce_Order();
			return $order->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.update_order.error', $e->getMessage(), array( 'submission' => $order->toArray() ) );
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $order_id
	 * @param false    $throw
	 *
	 * @return false|MailChimp_WooCommerce_Order
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getStoreOrder( $store_id, $order_id, $throw = false ) {
		try {
			$data = $this->get( "ecommerce/stores/$store_id/orders/$order_id" );
			if ( ! is_array( $data ) ) {
				throw new MailChimp_WooCommerce_RateLimitError( 'getting order api failure, retry again.' );
			}
			$order = new MailChimp_WooCommerce_Order();
			return $order->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $order_id
	 *
	 * @return bool
	 */
	public function deleteStoreOrder( $store_id, $order_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/$store_id/orders/$order_id" );
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $order_id
	 * @param $line_id
	 *
	 * @return bool
	 */
	public function deleteStoreOrderLine( $store_id, $order_id, $line_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/{$store_id}/orders/{$order_id}/lines/{$line_id}" );
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $product_id
	 * @param false      $throw
	 *
	 * @return false|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getStoreProduct( $store_id, $product_id, $throw = false ) {
		try {
			$data = $this->get( "ecommerce/stores/$store_id/products/$product_id" );
			if ( ! is_array( $data ) ) {
				throw new MailChimp_WooCommerce_RateLimitError( 'getting product api failure, retry again.' );
			}
			$product = new MailChimp_WooCommerce_Product();
			return $product->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param int      $page
	 * @param int      $count
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function products( $store_id, $page = 1, $count = 10 ) {
		return $this->get(
			'ecommerce/stores/' . $store_id . '/products',
			array(
				'start'  => $page,
				'count'  => $count,
				'offset' => ( $page * $count ),
			)
		);
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Product $product
	 * @param bool                          $silent
	 *
	 * @return false|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addStoreProduct( $store_id, MailChimp_WooCommerce_Product $product, $silent = true ) {
		try {
			if ( ! $this->validateStoreSubmission( $product ) ) {
				return false;
			}
			$data = $this->post( "ecommerce/stores/$store_id/products", $product->toArray() );
			update_option( 'mailchimp-woocommerce-resource-last-updated', time() );
			$product = new MailChimp_WooCommerce_Product();
			return $product->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.add_product.error', $e->getMessage(), array( 'submission' => $product->toArray() ) );
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_Product $product
	 * @param bool                          $silent
	 *
	 * @return false|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	public function updateStoreProduct( $store_id, MailChimp_WooCommerce_Product $product, $silent = true ) {
		try {
			if ( ! $this->validateStoreSubmission( $product ) ) {
				return false;
			}
			$data = $this->patch( "ecommerce/stores/$store_id/products/{$product->getId()}", $product->toArray() );
			update_option( 'mailchimp-woocommerce-resource-last-updated', time() );
			$product = new MailChimp_WooCommerce_Product();
			return $product->fromArray( $data );
		} catch ( Exception $e ) {
			if ( ! $silent ) {
				throw $e;
			}
			mailchimp_log( 'api.update_product.error', $e->getMessage(), array( 'submission' => $product->toArray() ) );
			return false;
		}
	}

	/**
	 * @param MailChimp_WooCommerce_Order $order
	 *
	 * @return array
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function handleProductsMissingFromAPI( MailChimp_WooCommerce_Order $order ) {
		$missing_products = array();
		foreach ( $order->items() as $order_item ) {
			/** @var MailChimp_WooCommerce_LineItem $order_item */
			// get the line item name from the order detail just in case we need that title for the product.
			$job = new MailChimp_WooCommerce_Single_Product( $order_item->getProductId(), $order_item->getFallbackTitle() );
			if ( $missing_products[ $order_item->getId() ] = $job->createModeOnly()->fromOrderItem( $order_item )->handle() ) {
				mailchimp_debug( 'missing_products.fallback', "Product {$order_item->getId()} had to be re-pushed into Mailchimp" );
			}
		}
		return $missing_products;
	}

	/**
	 * @return bool|MailChimp_WooCommerce_Product
	 */
	public function createEmptyLineItemProductPlaceholder() {
		$product = new MailChimp_WooCommerce_Product();
		$product->setId( 'empty_line_item_placeholder' );
		$product->setTitle( 'Empty Line Item Placeholder' );
		$product->setVendor( 'deleted' );

		$variation = new MailChimp_WooCommerce_ProductVariation();
		$variation->setId( $product->getId() );
		$variation->setTitle( $product->getTitle() );
		$variation->setInventoryQuantity( 0 );
		$variation->setVisibility( 'hidden' );
		$variation->setPrice( 1 );

		$product->addVariant( $variation );

		if ( (bool) mailchimp_get_data( 'empty_line_item_placeholder', false ) ) {
			return $product;
		}

		$store_id = mailchimp_get_store_id();
		$api      = mailchimp_get_api();

		try {
			$response = $api->addStoreProduct( $store_id, $product, false );
			mailchimp_set_data( 'empty_line_item_placeholder', true );
			return $response;
		} catch ( Exception $e ) {
			return $product;
		}
	}

	/**
	 * @param $store_id
	 * @param $product_id
	 *
	 * @return bool
	 */
	public function deleteStoreProduct( $store_id, $product_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/$store_id/products/$product_id" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_PromoRule $rule
	 * @param bool                            $throw
	 *
	 * @return false|MailChimp_WooCommerce_PromoRule
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addPromoRule( $store_id, MailChimp_WooCommerce_PromoRule $rule, $throw = true ) {
		try {
			if ( ( $response = $this->updatePromoRule( $store_id, $rule, false ) ) ) {
				return $response;
			}
			$data = $this->post( "ecommerce/stores/{$store_id}/promo-rules", $rule->toArray() );
			return ( new MailChimp_WooCommerce_PromoRule() )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_PromoRule $rule
	 * @param bool                            $throw
	 *
	 * @return false|MailChimp_WooCommerce_PromoRule
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function updatePromoRule( $store_id, MailChimp_WooCommerce_PromoRule $rule, $throw = true ) {
		try {
			$data = $this->patch( "ecommerce/stores/{$store_id}/promo-rules/{$rule->getId()}", $rule->toArray() );
			return ( new MailChimp_WooCommerce_PromoRule() )->fromArray( $data );
		} catch ( Exception $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $rule
	 *
	 * @return bool
	 */
	public function deletePromoRule( $store_id, $rule ) {
		try {
			$id = $rule instanceof MailChimp_WooCommerce_PromoRule ? $rule->getId() : $rule;
			// print_r(array('id' => $id, 'store' => $store_id));die();
			return (bool) $this->delete( "ecommerce/stores/{$store_id}/promo-rules/{$id}" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			// \Log::error("MC::deletePromoRule :: {$rule->getId()} :: {$e->getMessage()} on {$e->getLine()} in {$e->getFile()}");
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param int      $page
	 * @param int      $count
	 *
	 * @return array
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getPromoRuleIds( $store_id, $page = 1, $count = 10 ) {
		$result = $this->get(
			"ecommerce/stores/{$store_id}/promo-rules",
			array(
				'start'   => $page,
				'count'   => $count,
				'offset'  => $page > 1 ? ( ( $page - 1 ) * $count ) : 0,
				'include' => 'id',
			)
		);

		$ids = array();
		foreach ( $result['promo_rules'] as $rule ) {
			$id         = (string) $rule['id'];
			$ids[ $id ] = $id;
		}
		return $ids;
	}

	/**
	 * @param $store_id
	 * @param int      $page
	 * @param int      $count
	 * @param false    $return_original
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getPromoRules( $store_id, $page = 1, $count = 10, $return_original = false ) {
		$result = $this->get(
			"ecommerce/stores/{$store_id}/promo-rules",
			array(
				'start'  => $page,
				'count'  => $count,
				'offset' => $page > 1 ? ( ( $page - 1 ) * $count ) : 0,
			)
		);

		if ( $return_original ) {
			return $result;
		}

		$rules = array();
		foreach ( $result['promo_rules'] as $rule_data ) {
			$rule = new MailChimp_WooCommerce_PromoRule();
			$rule->fromArray( $rule_data );
			$rules[] = $rule;
		}
		return $rules;
	}

	/**
	 * @param $store_id
	 * @param $rule_id
	 * @param int      $page
	 * @param int      $count
	 * @param false    $return_original
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getPromoCodesForRule( $store_id, $rule_id, $page = 1, $count = 10, $return_original = false ) {
		$result = $this->get(
			"ecommerce/stores/{$store_id}/promo-rules/{$rule_id}/promo_codes",
			array(
				'start'  => $page,
				'count'  => $count,
				'offset' => $page > 1 ? ( ( $page - 1 ) * $count ) : 0,
			)
		);

		if ( $return_original ) {
			return $result;
		}

		$rules = array();
		foreach ( $result as $rule_data ) {
			$rule = new MailChimp_WooCommerce_PromoCode();
			$rule->fromArray( $rule_data );
			$rules[] = $rule;
		}
		return $rules;
	}

	/**
	 * @param $store_id
	 * @param $rule_id
	 * @param $code_id
	 *
	 * @return false|MailChimp_WooCommerce_PromoCode
	 */
	public function getPromoCodeForRule( $store_id, $rule_id, $code_id ) {
		try {
			$data = $this->get( "ecommerce/stores/{$store_id}/promo-rules/{$rule_id}/promo-codes/{$code_id}" );
			return ( new MailChimp_WooCommerce_PromoCode() )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $rule_id
	 *
	 * @return object
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getPromoRuleWithCodes( $store_id, $rule_id ) {
		$rule = new MailChimp_WooCommerce_PromoCode();
		$rule = $rule->fromArray( $this->get( "ecommerce/stores/{$store_id}/promo-rules/{$rule_id}" ) );
		try {
			$promo_codes = $this->getPromoCodesForRule( $store_id, $rule->getId(), 1, 100 );
			$codes       = array();
			foreach ( $promo_codes as $item ) {
				$codes[] = $item->toArray();
			}
			return (object) array(
				'rule'  => $rule->toArray(),
				'codes' => $codes,
			);
		} catch ( Exception $e ) {
			return (object) array(
				'rule'  => $rule,
				'error' => $e->getMessage(),
			);
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_PromoRule $rule
	 * @param MailChimp_WooCommerce_PromoCode $code
	 * @param bool                            $throw
	 *
	 * @return false|MailChimp_WooCommerce_PromoCode
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function addPromoCodeForRule( $store_id, MailChimp_WooCommerce_PromoRule $rule, MailChimp_WooCommerce_PromoCode $code, $throw = true ) {
		try {
			if ( ( $result = $this->updatePromoCodeForRule( $store_id, $rule, $code, false ) ) ) {
				return $result;
			}
			$data = $this->post( "ecommerce/stores/{$store_id}/promo-rules/{$rule->getId()}/promo-codes", $code->toArray() );
			return ( new MailChimp_WooCommerce_PromoCode() )->fromArray( $data );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param MailChimp_WooCommerce_PromoRule $rule
	 * @param MailChimp_WooCommerce_PromoCode $code
	 * @param bool                            $throw
	 *
	 * @return false|MailChimp_WooCommerce_PromoCode
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function updatePromoCodeForRule( $store_id, MailChimp_WooCommerce_PromoRule $rule, MailChimp_WooCommerce_PromoCode $code, $throw = true ) {
		try {
			$data = $this->patch( "ecommerce/stores/{$store_id}/promo-rules/{$rule->getId()}/promo-codes/{$code->getId()}", $code->toArray() );
			return ( new MailChimp_WooCommerce_PromoCode() )->fromArray( $data );
		} catch ( Exception $e ) {
			if ( $throw ) {
				throw $e;
			}
			return false;
		}
	}

	/**
	 * @param $store_id
	 * @param $rule_id
	 * @param $code_id
	 *
	 * @return bool
	 */
	public function deletePromoCodeForRule( $store_id, $rule_id, $code_id ) {
		try {
			return (bool) $this->delete( "ecommerce/stores/{$store_id}/promo-rules/{$rule_id}/promo-codes/{$code_id}" );
		} catch ( MailChimp_WooCommerce_Error $e ) {
			return false;
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @param $target
	 *
	 * @return bool
	 * @throws MailChimp_WooCommerce_Error
	 */
	protected function validateStoreSubmission( $target ) {
		if ( $target instanceof MailChimp_WooCommerce_Order ) {
			$this->validateNaughtyList( $target->getCustomer() );
			return $this->validateStoreOrder( $target );
		} elseif ( $target instanceof MailChimp_WooCommerce_Customer ) {
			$this->validateNaughtyList( $target );
			return $this->validateStoreCustomer( $target );
		}
		return true;
	}

	/**
	 * @param MailChimp_WooCommerce_Order $order
	 *
	 * @return bool
	 */
	protected function validateStoreOrder( MailChimp_WooCommerce_Order $order ) {
		if ( ! $this->validateStoreCustomer( $order->getCustomer() ) ) {
			return false;
		}
		return true;
	}

	/**
	 * @param MailChimp_WooCommerce_Customer $customer
	 *
	 * @return bool
	 */
	protected function validateStoreCustomer( MailChimp_WooCommerce_Customer $customer ) {
		$email = $customer->getEmailAddress();

		if ( ! is_email( $email ) || mailchimp_email_is_amazon( $email ) || mailchimp_email_is_privacy_protected( $email ) ) {
			return false;
		}

		return true;
	}

	/**
	 * @param $list_id
	 * @param int     $minutes
	 *
	 * @return array|mixed
	 */
	public function getCachedGDPRFields( $list_id, $minutes = 5 ) {
		$transient  = "mailchimp-woocommerce-gdpr-fields.{$list_id}";
		$GDPRfields = get_site_transient( $transient );

		// only return the values if it's a false - or an array
		if ( is_array( $GDPRfields ) ) {
			return $GDPRfields;
		}

		try {
			$GDPRfields = $this->getGDPRFields( $list_id );
			set_site_transient( $transient, $GDPRfields, 60 * $minutes );
		} catch ( Exception $e ) {
			$GDPRfields = array();
		}

		return $GDPRfields;
	}

	/**
	 * @param $list_id
	 *
	 * @return array|mixed
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getGDPRFields( $list_id ) {
		$one_member = $this->get( "lists/$list_id/members?fields=members.marketing_permissions&count=1" );
		$fields     = array();

		if ( is_array( $one_member ) &&
			isset( $one_member['members'] ) &&
			isset( $one_member['members'][0] ) &&
			isset( $one_member['members'][0]['marketing_permissions'] ) ) {
			$fields = $one_member['members'][0]['marketing_permissions'];
		}

		return $fields;
	}

	/**
	 * @param $list_id
	 * @param $email
	 * @param int     $minutes
	 *
	 * @return mixed|string|null
	 */
	public function getCachedSubscriberStatusForAdminProfileView( $list_id, $email, $minutes = 5 ) {
		if ( ! is_email( $email ) || ! mailchimp_is_configured() ) {
			return null;
		}
		$email_hash = md5( strtolower( trim( $email ) ) );
		$transient  = "mailchimp-woocommerce-subscribed.{$list_id}.{$email_hash}";
		$status     = get_site_transient( $transient );

		if ( ! empty( $status ) ) {
			return $status;
		}

		try {
			$member = mailchimp_get_api()->member( $list_id, $email );
			$status = $member['status'];
		} catch ( Exception $e ) {
			$status = 'not_found';
		}

		set_site_transient( $transient, $status, 60 * $minutes );

		return $status;
	}

	/**
	 * @param false $list_id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getWebHooks( $list_id = false ) {
		if ( empty( $list_id ) ) {
			$list_id = mailchimp_get_list_id();
		}
		return $this->get( "lists/{$list_id}/webhooks", array( 'count' => 1000 ) );
	}

	/**
	 * @param $list_id
	 * @param $url
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function webHookSubscribe( $list_id, $url ) {
		return $this->post(
			"lists/{$list_id}/webhooks",
			array(
				'url'     => $url,
				'events'  => array(
					'subscribe'   => true,
					'unsubscribe' => true,
					'cleaned'     => true,
					'profile'     => false,
					'upemail'     => false,
					'campaign'    => false,
				),
				'sources' => array(
					'user'  => true,
					'admin' => true,
					'api'   => true,
				),
			)
		);
	}

	/**
	 * @param $list_id
	 * @param $url
	 *
	 * @return int
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 * @throws Throwable
	 */
	public function webHookDelete( $list_id, $url ) {
		$deleted = 0;
		$hooks   = $this->getWebHooks( $list_id );
		foreach ( $hooks['webhooks'] as $hook ) {
			$href = isset( $hook['url'] ) ? $hook['url'] : ( isset( $hook['href'] ) ? $hook['href'] : null );
			if ( $href && $href === $url || ( $href && ! empty( $url ) && mailchimp_string_contains( $href, $url ) ) ) {
				mailchimp_log( 'admin', "deleting webhook id {$hook['id']} - {$href}" );
				$this->delete( "lists/{$list_id}/webhooks/{$hook['id']}" );
				$deleted++;
			}
		}
		return $deleted;
	}

	/**
	 * @param $list_id
	 * @param $id
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function deleteWebhookByID($list_id, $id)
	{
		mailchimp_log('admin', "deleting webhook id {$id}");
		return $this->delete("lists/{$list_id}/webhooks/{$id}");
	}

	/**
	 * @param $list_id
	 * @param $url
	 *
	 * @return bool
	 * @throws Throwable
	 */
	public function hasWebhook( $list_id, $url ) {
		$hooks = $this->getWebHooks( $list_id );
		foreach ( $hooks['webhooks'] as $hook ) {
			$href = isset( $hook['url'] ) ? $hook['url'] : ( isset( $hook['href'] ) ? $hook['href'] : null );
			if ( $href && $href === $url ) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @param MailChimp_WooCommerce_Customer $customer
	 *
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 */
	public function validateNaughtyList( MailChimp_WooCommerce_Customer $customer ) {
		$this->validateNaughtyListEmail( $customer->getEmailAddress() );
		$this->validateNaughtyListNames( $customer->getFirstName(), $customer->getLastName() );
		return false;
	}

	/**
	 * @param $email
	 *
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 */
	public function validateNaughtyListEmail( $email ) {
		if ( ! empty( $email ) && mailchimp_string_contains( $email, $this->getNaughtyList() ) ) {
			$this->reportSpamToTower( $email );
			throw new MailChimp_WooCommerce_Error( "Email [{$email}] has been blocked due to spam reports." );
		}
		return false;
	}

	/**
	 * @return array|mixed|object
	 */
	public function getNaughtyList() {
		try {
			$domains = mailchimp_get_transient( 'naughty_list_domains' );
			if ( is_array( $domains ) && isset( $domains['value'] ) ) {
				return $domains['value'];
			}
			$domains_response = wp_remote_get( 'https://tower.vextras.com/naughty-domains' );
			$domains          = json_decode( $domains_response['body'], true );
			mailchimp_set_transient( 'naughty_list_domains', $domains, 1440 );
			return $domains;
		} catch ( Throwable $e ) {
			$domains = array();
			mailchimp_set_transient( 'naughty_list_domains', $domains, 300 );
			return $domains;
		}
	}

	/**
	 * @return bool
	 */
	private function allowedToSubmitSpam() {
		// check to see if we've already set the transient.
		$status = mailchimp_get_transient( 'tower' );

		// if we've got it - just return it now.
		if ( ! empty( $status ) ) {
			return $status === 'green';
		}

		// call the API to see if we need to block traffic or not
		// this only impacts reporting spam metrics, does not impact local site blocking
		$response = wp_remote_get( 'https://tower.vextras.com/api/traffic' );
		$body     = json_decode( $response['body'] );
		$status   = $body ? $body->status : 'red';

		// set this for 5 minutes.
		mailchimp_set_transient( 'tower', $status, 120 );

		return $status === 'green';
	}

	/**
	 * @param $email
	 *
	 * @return array|mixed|object|null
	 */
	private function reportSpamToTower( $email ) {
		try {
			if ( ! $this->allowedToSubmitSpam() ) {
				return null;
			}

			$payload  = array(
				'headers' => array(
					'Content-type'     => 'application/json',
					'Accept'           => 'application/json',
					'X-Store-Platform' => 'woocommerce',
					'X-List-Id'        => mailchimp_get_list_id(),
					'X-Store-Key'      => base64_encode( mailchimp_get_store_id() . ':' . mailchimp_get_api_key() ),
				),
				'body'    => json_encode(
					array(
						'store_id' => mailchimp_get_store_id(),
						'list_id'  => mailchimp_get_list_id(),
						'domain'   => site_url(),
						'email'    => $email,
					)
				),
				'timeout' => 30,
			);
			$response = wp_remote_post( 'https://tower.vextras.com/admin-api/woocommerce/report-spam', $payload );
			return json_decode( $response['body'] );
		} catch ( Throwable $e ) {
			return null;
		}
	}

	/**
	 * @param $first_name
	 * @param $last_name
	 *
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 */
	public function validateNaughtyListNames( $first_name, $last_name ) {
		// add a list of naughty list customer names. Seems a little destructive though.
		$naughty_list_names = array(
			'mark mustermann',
		);
		$name               = "{$first_name} {$last_name}";
		if ( mailchimp_string_contains( strtolower( $name ), $naughty_list_names ) ) {
			throw new MailChimp_WooCommerce_Error( "Name [{$name}] has been blocked due to spam reports." );
		}
		return false;
	}

	/**
	 * @param $list_id
	 *
	 * @return array
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getAutomations( $list_id ) {
		$automations = $this->get( 'automations', array( 'limit' => 1000 ) );
		if ( ! is_array( $automations ) || ! array_key_exists( 'automations', $automations ) ) {
			return array();
		}
		$response = array();
		foreach ( $automations['automations'] as $automation ) {
			if ( $list_id === $automation['recipients']['list_id'] ) {
				$response[] = $automation;
			}
		}
		return $response;
	}

	/**
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getJourneys() {
		$journeys = $this->get( 'customer-journeys/journeys', array( 'limit' => 1000 ));
		return is_array($journeys) && array_key_exists( 'journeys', $journeys) ? $journeys['journeys'] : array();
	}

	/**
	 * @param $id
	 */
	public function getJourney($id)
	{
		return $this->get("customer-journeys/journeys/{$id}");
	}

	/**
	 * @param $url
	 * @param null $params
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function delete( $url, $params = null ) {
		$curl = curl_init();

		$options = $this->applyCurlOptions( 'DELETE', $url, $params );

		curl_setopt_array( $curl, $options );

		return $this->processCurlResponse( $curl );
	}

	/**
	 * @param $url
	 * @param null $params
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function get( $url, $params = null ) {
		$curl = curl_init();

		$options = $this->applyCurlOptions( 'GET', $url, $params );

		curl_setopt_array( $curl, $options );

		return $this->processCurlResponse( $curl );
	}

	/**
	 * @param $url
	 * @param $body
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function patch( $url, $body ) {
		// process the patch request the normal way
		$curl = curl_init();

		$json = json_encode( $body );

		$options = $this->applyCurlOptions(
			'PATCH',
			$url,
			array(),
			array(
				'Expect:',
				'Content-Length: ' . strlen( $json ),
			)
		);

		$options[ CURLOPT_POSTFIELDS ] = $json;

		curl_setopt_array( $curl, $options );

		return $this->processCurlResponse( $curl );
	}

	/**
	 * @param $url
	 * @param $body
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function post( $url, $body ) {
		$curl = curl_init();

		$json = json_encode( $body );

		$options = $this->applyCurlOptions(
			'POST',
			$url,
			array(),
			array(
				'Expect:',
				'Content-Length: ' . strlen( $json ),
			)
		);

		$options[ CURLOPT_POSTFIELDS ] = $json;

		curl_setopt_array( $curl, $options );

		return $this->processCurlResponse( $curl );
	}

	/**
	 * @param $url
	 * @param $body
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function put( $url, $body ) {
		$curl = curl_init();

		$json = json_encode( $body );

		$options = $this->applyCurlOptions(
			'PUT',
			$url,
			array(),
			array(
				'Expect:',
				'Content-Length: ' . strlen( $json ),
			)
		);

		$options[ CURLOPT_POSTFIELDS ] = $json;

		curl_setopt_array( $curl, $options );

		return $this->processCurlResponse( $curl );
	}

	/**
	 * @param string $extra
	 * @param null   $params
	 *
	 * @return string
	 */
	protected function url( $extra = '', $params = null ) {
		$url = "https://{$this->data_center}.api.mailchimp.com/{$this->version}/";

		if ( ! empty( $extra ) ) {
			$url .= $extra;
		}

		if ( ! empty( $params ) ) {
			$url .= '?' . ( is_array( $params ) ? http_build_query( $params ) : $params );
		}

		return $url;
	}

	/**
	 * @param $method
	 * @param $url
	 * @param array  $params
	 * @param array  $headers
	 *
	 * @return array
	 */
	protected function applyCurlOptions( $method, $url, $params = array(), $headers = array() ) {
		$env          = mailchimp_environment_variables();
		$curl_options = array(
			CURLOPT_USERPWD        => "mailchimp:{$this->api_key}",
			CURLOPT_CUSTOMREQUEST  => strtoupper( $method ),
			CURLOPT_URL            => $this->url( $url, $params ),
			CURLOPT_RETURNTRANSFER => true,
			CURLOPT_ENCODING       => '',
			CURLOPT_MAXREDIRS      => 10,
			CURLOPT_TIMEOUT        => 30,
			CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
			CURLINFO_HEADER_OUT    => true,
			CURLOPT_HTTPHEADER     => array_merge(
				array(
					'content-type: application/json',
					'accept: application/json',
					"user-agent: MailChimp for WooCommerce/{$env->version}; PHP/{$env->php_version}; WordPress/{$env->wp_version}; Woo/{$env->wc_version};",
				),
				$headers
			),
		);

		// automatically set the proper outbound IP address
		if ( ( $outbound_ip = mailchimp_get_outbound_ip() ) && ! in_array( $outbound_ip, mailchimp_common_loopback_ips() ) ) {
			$curl_options[ CURLOPT_INTERFACE ] = $outbound_ip;
		}

		// if we need to define a specific http version being used for curl requests, we can override this here.
		if ( defined( 'MAILCHIMP_USE_HTTP_VERSION' ) ) {
			$curl_options[ CURLOPT_HTTP_VERSION ] = MAILCHIMP_USE_HTTP_VERSION;
		}

		return $curl_options;
	}

	/**
	 * @param $curl
	 *
	 * @return array|bool|mixed|object|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	protected function processCurlResponse( $curl ) {
		$response = curl_exec( $curl );

		$err  = curl_error( $curl );
		$info = curl_getinfo( $curl );
		curl_close( $curl );

		if ( $err ) {
			throw new MailChimp_WooCommerce_Error( 'CURL error :: ' . $err, 500 );
		}

		$data = json_decode( $response, true );

		$http_code  = ! empty( $info ) && isset( $info['http_code'] ) ? $info['http_code'] : -1;
		$called_url = ! empty( $info ) && isset( $info['url'] ) ? $info['url'] : 'none';

		// let's block these from doing anything below because the API seems to be having trouble.
		if ( $http_code <= 99 ) {
			throw new MailChimp_WooCommerce_RateLimitError( 'API is failing - try again.' );
		}

		// possibily a successful DELETE operation
		if ( $http_code == 204 ) {
			return true;
		}

		if ( $http_code >= 200 && $http_code <= 400 ) {
			if ( is_array( $data ) ) {
				try {
					$this->checkForErrors( $data );
				} catch ( Exception $e ) {
					throw $e;
				}
			}
			return $data;
		}

		$error_status = isset( $data['status'] ) && is_numeric( $data['status'] ) ?
			(int) $data['status'] : (int) $http_code;

		if ( $http_code >= 400 && $http_code <= 500 ) {
			if ( $http_code == 403 ) {
				throw new MailChimp_WooCommerce_RateLimitError();
			}
			$error_message  = isset( $data['title'] ) ? $data['title'] : '';
			$error_message .= isset( $data['detail'] ) ? $data['detail'] : '';
			throw new MailChimp_WooCommerce_Error( $error_message, $error_status );
		}

		if ( $http_code >= 500 ) {
			$error_message = isset( $data['detail'] ) ? $data['detail'] : '';
			throw new MailChimp_WooCommerce_ServerError( $error_message, $error_status );
		}

		if ( ! is_array( $data ) ) {
			mailchimp_error(
				'api.debug',
				'fallback when data is empty from API',
				array(
					'url'      => $called_url,
					'response' => $response,
				)
			);
			throw new MailChimp_WooCommerce_ServerError( 'API response could not be decoded.' );
		}

		return null;
	}

	/**
	 * @param array $data
	 *
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 */
	protected function checkForErrors( array $data ) {
		// if we have an array of error data push it into a message
		if ( isset( $data['errors'] ) ) {
			$message = '';
			foreach ( $data['errors'] as $error ) {
				$message .= '<p>' . $error['field'] . ': ' . $error['message'] . '</p>';
			}
			throw new MailChimp_WooCommerce_Error( $message, (int) $data['status'] );
		}

		// make sure the response is correct from the data in the response array
		if ( isset( $data['status'] ) && is_numeric( $data['status'] ) && $data['status'] >= 400 ) {
			if ( isset( $data['http_code'] ) && $data['http_code'] == 403 ) {
				throw new MailChimp_WooCommerce_RateLimitError();
			}
			$error = isset( $data['detail'] ) ? $data['detail'] : ( 'Error code ' . $data['status'] );
			throw new MailChimp_WooCommerce_Error( $error, (int) $data['status'] );
		}

		return false;
	}
}
class-mailchimp-woocommerce-api.php                                                                                                                                                                                                                            2271          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/13/16
 * Time: 2:32 PM
 */
class MailChimp_WooCommerce_Api {

	protected static $filterable_actions = array(
		'paginate-resource',
	);

	/**
	 * @param int $default_page
	 * @param int $default_per
	 * @return array
	 */
	public static function filter( $default_page = null, $default_per = null ) {
		if ( isset( $_GET['mailchimp-woocommerce'] ) && isset( $_GET['mailchimp-woocommerce']['action'] ) ) {
			if ( in_array( $_GET['mailchimp-woocommerce']['action'], static::$filterable_actions ) ) {
				if ( empty( $default_page ) ) {
					$page = isset( $_GET['page'] ) ? (int) $_GET['page'] : null;
				}
				if ( empty( $default_per ) ) {
					$per = isset( $_GET['per'] ) ? (int) $_GET['per'] : null;
				}
			}
		}

		if ( empty( $page ) ) {
			$page = 1;
		}
		if ( empty( $per ) ) {
			$per = 5;
		}

		return array( $page, $per );
	}

	/**
	 * @param null $page
	 * @param null $per
	 * @return object|stdClass
	 */
	public function paginateProducts( $page = null, $per = null ) {
		return $this->paginate( 'products', $page, $per );
	}

	/**
	 * @param null $page
	 * @param null $per
	 * @return object|stdClass
	 */
	public function paginateOrders( $page = null, $per = null ) {
		return $this->paginate( 'orders', $page, $per );
	}

	/**
	 * @param $resource
	 * @param int      $page
	 * @param int      $per
	 *
	 * @return object|stdClass
	 */
	public function paginate( $resource, $page = 1, $per = 5 ) {
		if ( ( $sync = $this->engine( $resource ) ) ) {
			return $sync->compile( $page, $per );
		}

		return (object) array(
			'endpoint' => $resource,
			'page'     => $page,
			'count'    => 0,
			'stuffed'  => false,
			'items'    => array(),
		);
	}

	/**
	 * @param $resource
	 * @return bool|MailChimp_WooCommerce_Transform_Orders|MailChimp_WooCommerce_Transform_Products|MailChimp_WooCommerce_Transform_Coupons
	 */
	public function engine( $resource ) {
		switch ( $resource ) {
			case 'products':
				return new MailChimp_WooCommerce_Transform_Products();
			case 'orders':
				return new MailChimp_WooCommerce_Transform_Orders();
			case 'coupons':
				return new MailChimp_WooCommerce_Transform_Coupons();
			default:
				return false;
		}
	}
}
class-mailchimp-woocommerce-create-list-submission.php                                                                                                                                                                                                         2960          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/8/16
 * Time: 4:16 PM
 */
class MailChimp_WooCommerce_CreateListSubmission {

	/**
	 * @var array
	 */
	protected $props = array();

	/**
	 * @param $name
	 * @return $this
	 */
	public function setName( $name ) {
		$this->props['name'] = $name;

		return $this;
	}

	/**
	 * @param $bool
	 * @return $this
	 */
	public function setUseArchiveBar( $bool ) {
		$this->props['use_archive_bar'] = (bool) $bool;

		return $this;
	}

	/**
	 * @param $reminder
	 * @return $this
	 */
	public function setPermissionReminder( $reminder ) {
		$this->props['permission_reminder'] = $reminder;

		return $this;
	}

	/**
	 * @param $email
	 * @return $this
	 */
	public function setNotifyOnSubscribe( $email ) {
		$this->props['notify_on_subscribe'] = $email;

		return $this;
	}

	/**
	 * @param $email
	 *
	 * @return $this
	 */
	public function setNotifyOnUnSubscribe( $email ) {
		$this->props['notify_on_unsubscribe'] = $email;

		return $this;
	}

	/**
	 * @param $bool
	 * @return $this
	 */
	public function setEmailTypeOption( $bool ) {
		$this->props['email_type_option'] = (bool) $bool;

		return $this;
	}

	/**
	 * @param bool $public
	 * @return $this
	 */
	public function setVisibility( $public = true ) {
		$this->props['visibility'] = $public ? 'pub' : 'prv';

		return $this;
	}

	/**
	 * @param false $doi
	 *
	 * @return $this
	 */
	public function setDoi( $doi = false ) {
		$this->props['double_optin'] = (bool) $doi;

		return $this;
	}

	/**
	 * @param $name
	 * @param $email
	 * @param $subject
	 * @param string  $language
	 * @return $this
	 */
	public function setCampaignDefaults( $name, $email, $subject, $language = 'en' ) {
		$this->props['campaign_defaults'] = array(
			'from_name'  => $name,
			'from_email' => $email,
			'subject'    => $subject,
			'language'   => $language,
		);

		return $this;
	}

	/**
	 * @param MailChimp_WooCommerce_Address $address
	 * @return $this
	 */
	public function setContact( MailChimp_WooCommerce_Address $address ) {
		$data = array();

		if ( ( $company = $address->getCompany() ) && ! empty( $company ) ) {
			$data['company'] = $company;
		}

		if ( ( $street = $address->getAddress1() ) && ! empty( $address ) ) {
			$data['address1'] = $street;
		}

		if ( ( $city = $address->getCity() ) && ! empty( $city ) ) {
			$data['city'] = $city;
		}

		if ( ( $state = $address->getProvince() ) && ! empty( $state ) ) {
			$data['state'] = $state;
		}

		if ( ( $zip = $address->getPostalCode() ) && ! empty( $zip ) ) {
			$data['zip'] = $zip;
		}

		if ( ( $country = $address->getCountry() ) && ! empty( $country ) ) {
			$data['country'] = $country;
		}

		if ( ( $phone = $address->getPhone() ) && ! empty( $phone ) ) {
			$data['phone'] = $phone;
		}

		$this->props['contact'] = $data;

		return $this;
	}

	/**
	 * @return array
	 */
	public function getSubmission() {
		return $this->props;
	}
}
class-mailchimp-woocommerce-fix-duplicate-store.php                                                                                                                                                                                                            2451          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

class MailChimp_WooCommerce_Fix_Duplicate_Store {

	protected $store;
	protected $has_old_integration     = false;
	protected $duplicate_store_problem = false;
	protected $deleted_stores          = array();
	protected $should_delete_duplicate = false;
	protected $should_delete_legacy    = false;

	/**
	 * FixDuplicatMailChimp_WooCommerce_Fix_Duplicate_StoreeStore constructor.
	 *
	 * @param $store_id
	 * @param bool     $delete_duplicate
	 * @param false    $delete_legacy
	 */
	public function __construct( $store_id, bool $delete_duplicate = false, $delete_legacy = false ) {
		$this->store                   = $store_id;
		$this->should_delete_duplicate = $delete_duplicate;
		$this->should_delete_legacy    = $delete_legacy;
	}

	/**
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function handle() {
		$this->deleted_stores = array();
		$url                  = rtrim( get_option( 'siteurl' ), '/' );
		$stores               = mailchimp_get_api()->stores();
		$compare_url          = $this->domain( $url );
		$public_key           = mailchimp_get_store_id();

		if ( is_array( $stores ) && ! empty( $stores ) ) {
			foreach ( $stores as $mc_store ) {
				/** @var MailChimp_WooCommerce_Store $mc_store */
				$store_url = $this->domain( $mc_store->getDomain() );
				$matched   = strtolower( $mc_store->getPlatform() ) === 'woocommerce';
				if ( $store_url === $compare_url ) {
					if ( $mc_store->getId() !== $public_key && $matched ) {
						$this->duplicate_store_problem = $mc_store;
						if ( $this->should_delete_duplicate ) {
							mailchimp_get_api()->deleteStore( $mc_store->getId() );
							MailChimp_WooCommerce_Admin::instance()->syncStore();
							$this->deleted_stores[] = $mc_store;
						}
					}
				}
			}
		}
	}

	/**
	 * @return array
	 */
	public function getDeletedStores() {
		return $this->deleted_stores;
	}

	/**
	 * @return bool|MailChimp_WooCommerce_Store
	 */
	public function hasDuplicateStoreProblem() {
		return $this->duplicate_store_problem;
	}

	/**
	 * @return bool|MailChimp_WooCommerce_Store
	 */
	public function hasOldIntegration() {
		return $this->has_old_integration;
	}

	/**
	 * @param $url
	 * @return string|string[]
	 */
	public function domain( $url ) {
		return str_replace(
			array( 'http://', 'https://', 'www.' ),
			'',
			rtrim( strtolower( trim( $url ) ), '/' )
		);
	}
}
class-mailchimp-woocommerce-log-viewer.php                                                                                                                                                                                                                     4601          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

class MailChimp_WooCommerce_Log_Viewer {

	/**
	 * @var string file
	 */
	private static $file     = null;
	public static $directory = '*';

	private static $levels_classes = array(
		'debug'     => 'info',
		'info'      => 'success',
		'notice'    => 'info',
		'warning'   => 'warning',
		'error'     => 'error',
		'critical'  => 'error',
		'alert'     => 'error',
		'emergency' => 'error',
		'processed' => 'success',
	);

	private static $levels_imgs = array(
		'debug'     => 'info',
		'info'      => 'info',
		'notice'    => 'info',
		'warning'   => 'warning',
		'error'     => 'warning',
		'critical'  => 'warning',
		'alert'     => 'warning',
		'emergency' => 'warning',
		'processed' => 'info',
	);

	/**
	 * Log levels that are used
	 *
	 * @var array
	 */
	public static $log_levels = array(
		'emergency',
		'alert',
		'critical',
		'error',
		'warning',
		'notice',
		'info',
		'debug',
		'processed',
	);

	const MAX_FILE_SIZE = 52428800;

	/**
	 * @param $file
	 *
	 * @throws Exception
	 */
	public static function setFile( $file ) {
		$file = self::pathToLogFile( $file );
		if ( file_exists( $file ) ) {
			self::$file = $file;
		}
	}

	/**
	 * @param $file
	 * @return string
	 * @throws Exception
	 */
	public static function pathToLogFile( $file ) {
		if ( ! strpos( '/', $file ) ) {
			$logsPath = static::getLogDirectory();
			if ( static::$directory !== '*' ) {
				$logsPath .= '/' . static::$directory;
			}
			$file = $logsPath . '/' . $file;
		}
		return $file;
	}

	/**
	 * @return string
	 */
	public static function getFileName() {
		return basename( self::$file );
	}

	/**
	 * @return array|null
	 */
	public static function all() {
		$log       = array();
		$directory = static::getLogDirectory();
		$pattern   = '/\d{4}-\d{2}-\d{2}[T]\d{2}:\d{2}:\d{2}[+]\d\d[:]\d\d.*/';
		if ( ! self::$file ) {
			$log_file = self::getFiles();
			if ( ! count( $log_file ) ) {
				return array();
			}
			self::$file = $log_file[0];
			if ( self::$file === 'test-log.log' && isset( $log_file[1] ) ) {
				self::$file = $log_file[1];
			}
			self::$file = $directory . '/' . self::$file;
		}
		$file_path = self::$file;
		if ( filesize( $file_path ) > self::MAX_FILE_SIZE ) {
			return null;
		}
		$file = file_get_contents( $file_path );
		preg_match_all( $pattern, $file, $headings );
		if ( ! is_array( $headings ) || empty( $headings ) ) {
			return $log;
		}
		$log_data = preg_split( $pattern, $file );
		if ( $log_data[0] < 1 ) {
			array_shift( $log_data );
		}
		foreach ( $headings as $h ) {
			for ( $i = 0, $j = count( $h ); $i < $j; $i++ ) {
				preg_match( '/^(\d{4}-\d{2}-\d{2}[T]\d{2}:\d{2}:\d{2}[+]\d\d[:]\d\d) (EMERGENCY|ALERT|CRITICAL|ERROR|WARNING|NOTICE|INFO|DEBUG|PROCESSED) (.*)/', $h[ $i ], $current );
				if ( ! isset( $current[3] ) ) {
					continue;
				}
				$context = strtolower( $current[2] );
				if ( ! array_key_exists( $context, self::$levels_classes ) ) {
					continue;
				}
				$log[] = array(
					'context'     => $context,
					'level'       => $context,
					'level_class' => self::$levels_classes[ $context ],
					'level_img'   => self::$levels_imgs[ $context ],
					'date'        => $current[1],
					'text'        => $current[3],
					'stack'       => preg_replace( "/^\n*/", '', $log_data[ $i ] ),
				);
			}
		}
		return array_reverse( $log );
	}

	public static function setDirectory( $dir ) {
		static::$directory = "{$dir}";
	}

	/**
	 * @param bool $basename
	 * @return array
	 */
	public static function getFiles( $basename = false ) {
		if ( ! ( $dir = static::getLogDirectory() ) ) {
			return array();
		}
		$files = @scandir( $dir );
		$files = array_reverse( $files );
		$files = array_filter(
			$files,
			function( $value ) {
				return static::stringEndsWith( $value, '.log' ) && static::isValidLogFile( $value );
			}
		);
		if ( $basename && is_array( $files ) ) {
			foreach ( $files as $k => $file ) {
				$files[ $k ] = basename( $file );
			}
		}
		return array_values( $files );
	}

	/**
	 * @return null
	 */
	public static function getLogDirectory() {
		return ! defined( 'WC_LOG_DIR' ) ? null : rtrim( WC_LOG_DIR, '/' );
	}

	/**
	 * @param $haystack
	 * @param $needles
	 * @return bool
	 */
	public static function stringEndsWith( $haystack, $needles ) {
		foreach ( (array) $needles as $needle ) {
			if ( substr( $haystack, -strlen( $needle ) ) === (string) $needle ) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @param $file
	 *
	 * @return bool
	 */
	public static function isValidLogFile( $file ) {
		return mailchimp_string_contains( $file, array('mailchimp_', 'fatal-') );
	}
}
class-mailchimp-woocommerce-logs.php                                                                                                                                                                                                                           2220          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

class MailChimp_WooCommerce_Logs {

	protected $view         = null;
	protected $limit        = false;
	protected $search_query = null;
	public $items           = array();

	/**
	 * @param $view
	 * @return $this
	 */
	public function withView( $view ) {
		$this->view = $view;
		return $this;
	}

	/**
	 * @param int $limit
	 * @return $this
	 */
	public function limit( int $limit ) {
		$this->limit = $limit;
		return $this;
	}

	/**
	 * @param $value
	 * @return $this
	 */
	public function searching( $value ) {
		$this->search_query = $value;
		return $this;
	}

	/**
	 * @return array
	 * @throws Exception
	 */
	public function handle() {
		if ( $this->view ) {
			MailChimp_WooCommerce_Log_Viewer::setFile( base64_decode( $this->view ) );
		}

		$logs = array();

		foreach ( MailChimp_WooCommerce_Log_Viewer::all() as $item ) {
			try {
				$date = new DateTime( $item['date'] );
			} catch ( Exception $e ) {
				$date = new DateTime();
			}
			$item['date']     = $date->format( 'D, M j, Y g:i A' );
			$item['datetime'] = $date->format( 'Y-m-d H:i:s A' );
			$item['text']     = strtolower( str_replace( '[]', ' ', $item['text'] ) );
			if ( ! empty( $this->search_query ) && ! mailchimp_string_contains( $item['text'], $this->search_query ) ) {
				continue;
			}
			$logs[] = $item;
		}

		if ( $this->limit ) {
			$logs = array_slice( $logs, 0, $this->limit, true );
		}

		$files = array();

		foreach ( MailChimp_WooCommerce_Log_Viewer::getFiles( true ) as $key => $file ) {
			preg_match( '/(.*)-(\d{4}-\d{2}-\d{2})-(.*).log/', $file, $matches );
			// the date should be here
			if ( ! isset( $matches[2] ) ) {
				continue;
			}
			if ( !mailchimp_string_contains($file, array('mailchimp_', 'fatal-')) ) {
				continue;
			}
			$files[] = array(
				'value'    => base64_encode( $file ),
				'filename' => $file,
				'label'    => $matches[1] . ' ' . $matches[2],
			);
		}

		return $this->items = array(
			'view_file' => $this->view,
			'search'    => $this->search_query,
			'dir'       => MailChimp_WooCommerce_Log_Viewer::getLogDirectory(),
			'current'   => base64_encode( MailChimp_WooCommerce_Log_Viewer::getFileName() ),
			'files'     => $files,
			'logs'      => $logs,
		);
	}
}
class-mailchimp-woocommerce-tower.php                                                                                                                                                                                                                          25709         1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

class MailChimp_WooCommerce_Tower extends Mailchimp_Woocommerce_Job {

	protected $store_id;
	protected $with_shop_sales = true;
	protected $with_log_file   = null;
	protected $with_log_search = null;

	/**
	 * OrderCreatedHook constructor.
	 *
	 * @param $store_id
	 */
	public function __construct( $store_id ) {
		$this->store_id = $store_id;
	}

	public function withoutShopSales() {
		$this->with_shop_sales = false;
		return $this;
	}

	public function withShopSales() {
		$this->with_shop_sales = true;
		return $this;
	}

	public function withLogFile( $file ) {
		$this->with_log_file = $file;
		return $this;
	}

	public function withLogSearch( $search ) {
		$this->with_log_search = $search;
		return $this;
	}

	/**
	 * @return array
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function handle() {
		return $this->getData();
	}

	/**
	 * @return array
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function getData() {
		$product_count = $customer_count = $order_count = $mc_product_count = $mc_customer_count = $mc_order_count = 0;

		$api           = mailchimp_get_api();
		$store_id      = mailchimp_get_store_id();
		$authenticated = mailchimp_is_configured();
		$list_id       = mailchimp_get_list_id();
		$url           = get_option( 'siteurl' );
		$options       = (array) get_option( 'mailchimp-woocommerce' );
		$last_sync_at  = mailchimp_get_data('sync.last_loop_at');

		try {
			$product_count  = mailchimp_get_product_count();
			$customer_count = 0;
			$order_count    = mailchimp_get_order_count();
			$plan           = $plan_name = 'Woo';
			$store_active   = true;
		} catch ( Throwable $e ) {
			$store_active = false;
			$plan         = null;
		}

		$has_mailchimp_script    = false;
		$has_old_integration     = false;
		$duplicate_store_problem = false;
		$store_attached          = false;
		$syncing_mc              = false;
		$list_is_valid           = false;
		$account_info            = array();
		$shop                    = null;
		$akamai_block            = false;
		$mailchimp_api_connected = false;
		$mailchimp_plan_name     = null;

		if ( $authenticated ) {
			try {
				$account_info = $api->getProfile();
				$mailchimp_api_connected = true;
			} catch ( Exception $e ) {
				$account_info = array();
				$akamai_block = $e->getCode() === 503;
			}
			if ( is_array( $account_info ) ) {
				// don't need these
				unset( $account_info['_links'] );
			}
			$stores      = $api->stores();
			$compare_url = $this->baseDomain( $url );
			$list_name   = $list_id ? $api->getList( $list_id )['name'] : null;

			if ( is_array( $stores ) && ! empty( $stores ) ) {
				foreach ( $stores as $mc_store ) {
					/** @var MailChimp_WooCommerce_Store $mc_store */
					$store_url          = $this->baseDomain( $mc_store->getDomain() );
					$public_key_matched = $mc_store->getId() === $store_id;
					// make sure the current store in context is inside the Mailchimp array of stores.
					if ( $public_key_matched ) {
						$shop                 = $mc_store;
						$syncing_mc           = (bool) mailchimp_get_data('sync.syncing' );
						$store_attached       = true;
						$list_is_valid        = $mc_store->getListId() === $list_id;
						$has_mailchimp_script = (bool) $mc_store->getConnectedSiteScriptFragment();

						// if the store is not syncing locally, but is still marked as syncing on Mailchimp,
						// clean it up by toggling to false.
						if ( !$syncing_mc && $mc_store->isSyncing() ) {
							if ( $api->flagStoreSync($store_id, false) ) {
								mailchimp_log('tower', 'Toggled Mailchimp store to not syncing historical data');
							}
						}
					}
					if ( $store_url === $compare_url ) {
						if ( ! $public_key_matched && $mc_store->getPlatform() === 'Woocommerce' ) {
							$duplicate_store_problem = true;
						}
					}
				}
			}

			try {
				if ( $store_attached ) {
					$mc_product_count  = $api->getProductCount( $store_id );
					$mc_customer_count = $api->getCustomerCount( $store_id );
					$mc_order_count    = $api->getOrderCount( $store_id );
				}
			} catch ( Throwable $e ) {
				if ( $e->getCode() === 503 ) {
					$akamai_block = true;
				}
			}

			$automations  = array();
			$merge_fields = array();
			$journeys     = array();
			try {
				foreach ( $api->getAutomations( $list_id ) as $automation ) {
					$created       = new DateTime( $automation['create_time'] );
					$started       = new DateTime( $automation['start_time'] );
					$automations[] = array(
						'created_at' => $created->format( 'Y-m-d H:i:s' ),
						'start_at'   => $started->format( 'Y-m-d H:i:s' ),
						'status'     => $automation['status'],
						'name'       => $automation['settings']['title'],
						'type'       => $automation['trigger_settings']['workflow_title'],
						'stats'      => $automation['report_summary'],
					);
				}
				$merge_fields   = $api->mergeFields( $list_id );
				$merge_fields   = $merge_fields['merge_fields'];
				$journeys       = $api->getJourneys();
			} catch ( Throwable $e ) {
				if ( $e->getCode() === 503 ) {
					$akamai_block = true;
				}
			}
		}

		// mc authed, has a list, but no longer connected to MC API
		$broken_mailchimp = $authenticated && !empty($list_id) && !$mailchimp_api_connected;

		$mc_plan_name = !empty($account_info) &&
		                isset($account_info['pricing_plan_type']) &&
		                !empty($account_info['pricing_plan_type']) &&
		                $account_info['pricing_plan_type'] ? $account_info['pricing_plan_type'] : 'none';

		$paid_account = in_array($mc_plan_name, ['pay_as_you_go', 'monthly']);

		$time = new DateTime( 'now' );

		return array(
			'store'         => (object) array(
				'public_key'            => $store_id,
				'domain'                => $url,
				'secure_url'            => $url,
				'user'                  => (object) array(
					'email' => isset( $options['admin_email'] ) ? $options['admin_email'] : null,
				),
				'average_monthly_sales' => $this->getShopSales(),
				'address'               => (object) array(
					'street'  => isset( $options['store_street'] ) && $options['store_street'] ? $options['store_street'] : '',
					'city'    => isset( $options['store_city'] ) && $options['store_city'] ? $options['store_city'] : '',
					'state'   => isset( $options['store_state'] ) && $options['store_state'] ? $options['store_state'] : '',
					'country' => isset( $options['store_country'] ) && $options['store_country'] ? $options['store_country'] : '',
					'zip'     => isset( $options['store_postal_code'] ) && $options['store_postal_code'] ? $options['store_postal_code'] : '',
					'phone'   => isset( $options['store_phone'] ) && $options['store_phone'] ? $options['store_phone'] : '',
				),
				'metrics'               => array_values(
					array(
						'shopify_hooks'             => (object) array(
							'key'   => 'shopify_hooks',
							'value' => $this->hasWebhookInstalled(),
						),
						'shop.products'             => (object) array(
							'key'   => 'shop.products',
							'value' => $product_count,
						),
						'shop.customers'            => (object) array(
							'key'   => 'shop.customers',
							'value' => $customer_count,
						),
						'shop.orders'               => (object) array(
							'key'   => 'shop.orders',
							'value' => $order_count,
						),
						'mc.products'               => (object) array(
							'key'   => 'mc.products',
							'value' => $mc_product_count,
						),
						'mc.orders'                 => (object) array(
							'key'   => 'mc.orders',
							'value' => $mc_order_count,
						),
						'mc.has_chimpstatic'        => (object) array(
							'key'   => 'mc.has_chimpstatic',
							'value' => true,
						),
						'mc.has_duplicate_store'    => (object) array(
							'key'   => 'mc.has_duplicate_store',
							'value' => $duplicate_store_problem,
						),
						'mc.store_attached'         => (object) array(
							'key'   => 'mc.store_attached',
							'value' => $store_attached,
						),
						'mc.is_syncing'             => (object) array(
							'key'   => 'mc.is_syncing',
							'value' => $syncing_mc,
						),
						'mailchimp_api_connected'   => (object) array(
							'key'   => 'mailchimp_api_connected',
							'value' => (bool) $account_info,
						),
						'mc_list_id'                => (object) array(
							'key'   => 'mc_list_id',
							'value' => (bool) $list_id && $list_is_valid,
						),
						'mc_list_valid'             => (object) array(
							'key'   => 'mc_list_valid',
							'value' => $list_is_valid,
						),
						'mc_paid_account'                => (object) array(
							'key'   => 'mc_paid_account',
							'value' => (bool) $paid_account,
						),
						'mc.has_legacy_integration' => (object) array(
							'key'   => 'mc.has_legacy_integration',
							'value' => $has_old_integration,
						),
						// this is to identify the people using selective sync.
						'mc.has_selective_sync'     => (object) array(
							'key'   => 'mc.has_selective_sync',
							'value' => mailchimp_submit_subscribed_only(),
						),
						'admin.updated_at'          => (object) array(
							'key'   => 'admin.updated_at',
							'value' => $time->format( 'Y-m-d H:i:s' ),
						),
						'product_sync_started'      => (object) array(
							'key'   => 'product_sync_started',
							'value' => get_option( 'mailchimp-woocommerce-sync.products.started_at' ),
						),
						'product_sync_completed'    => (object) array(
							'key'   => 'product_sync_completed',
							'value' => get_option( 'mailchimp-woocommerce-sync.products.completed_at' ),
						),
						'customer_sync_started'     => (object) array(
							'key'   => 'customer_sync_started',
							'value' => get_option( 'mailchimp-woocommerce-sync.customers.started_at' ),
						),
						'customer_sync_completed'   => (object) array(
							'key'   => 'customer_sync_completed',
							'value' => get_option( 'mailchimp-woocommerce-sync.customers.completed_at' ),
						),
						'order_sync_started'        => (object) array(
							'key'   => 'order_sync_started',
							'value' => get_option( 'mailchimp-woocommerce-sync.orders.started_at' ),
						),
						'order_sync_completed'      => (object) array(
							'key'   => 'order_sync_completed',
							'value' => get_option( 'mailchimp-woocommerce-sync.orders.completed_at' ),
						),
						'curl_enabled' => (object) array(
							'key' => 'curl_enabled',
							'value' => function_exists( 'curl_init' ),
						),
						'wp_cron_enabled' => (object) array(
							'key' => 'wp_cron_enabled',
							'value' => !defined('DISABLE_WP_CRON') || DISABLE_WP_CRON === false,
						),
						'akamai_blocked' => (object) array(
							'key' => 'segment.akamai_blocked',
							'value' => $akamai_block,
						),
						'segment.broken_mailchimp_users' => (object) array(
							'key' => 'segment.broken_mailchimp_users',
							'value' => $broken_mailchimp,
						),
						'last_loop_at'              => (object) array(
							'key'   => 'last_loop_at',
							'value' => $last_sync_at,
						),
					)
				),
				'meta'                  => $this->getMeta(),
			),
			'meta'          => array(
				'timestamp'  => $time->format( 'Y-m-d H:i:s' ),
				'platform'   => array(
					'active'              => $store_active,
					'plan'                => $plan,
					'store_name'          => get_option( 'blogname' ),
					'domain'              => $url,
					'secure_url'          => $url,
					'user_email'          => isset( $options['admin_email'] ) ? $options['admin_email'] : null,
					'is_syncing'          => $syncing_mc,
					'sync_started_at'     => get_option( 'mailchimp-woocommerce-sync.started_at' ),
					'sync_completed_at'   => get_option( 'mailchimp-woocommerce-sync.completed_at' ),
					'subscribed_to_hooks' => true,
					'uses_custom_rules'   => false,
					'wp_cron_enabled'     => $this->hasWPCronEnabled(),
					'ecomm_stats'         => array(
						'products'  => $product_count,
						'customers' => $customer_count,
						'orders'    => $order_count,
					),
					'shop'                => array(
						'phone' => isset( $options['store_phone'] ) && $options['store_phone'] ? $options['store_phone'] : '',
					),
				),
				'mailchimp'  => array(
					'shop'                    => $shop ? $shop->toArray() : false,
					'chimpstatic_installed'   => $has_mailchimp_script,
					'force_disconnect'        => false,
					'duplicate_store_problem' => $duplicate_store_problem,
					'has_old_integration'     => $has_old_integration,
					'store_attached'          => $store_attached,
					'akamai_block'            => $akamai_block,
					'ecomm_stats'             => array(
						'products'  => $mc_product_count,
						'customers' => $mc_customer_count,
						'orders'    => $mc_order_count,
					),
					'list'                    => array(
						'id'            => $list_id,
						'name'          => isset( $list_name ) ? $list_name : null,
						'double_opt_in' => $this->hasDoubleOptInEnabled(),
						'valid'         => $list_is_valid,
					),
					'account_info'            => $account_info,
					'plan_name'               => $mc_plan_name,
					'automations'             => isset( $automations ) ? $automations : null,
					'journeys'                => isset( $journeys ) ? $journeys : null,
					'merge_fields'            => isset( $merge_fields ) ? (object) $merge_fields : null,
				),
				'merge_tags' => array(),
			),
			'logs'          => static::logs( $this->with_log_file, $this->with_log_search ),
			'system_report' => $this->getSystemReport(),
		);
	}

	/**
	 * @return bool
	 */
	public function hasDoubleOptInEnabled() {
		try {
			return mailchimp_list_has_double_optin();
		} catch ( Exception $e ) {
			return false;
		}
	}

	/**
	 * @return bool
	 */
	protected function hasWebhookInstalled() {
		if ( ! mailchimp_is_configured() || ! mailchimp_get_data( 'webhook.token' ) ) {
			return false;
		}
		try {
			return (bool) mailchimp_get_api()->hasWebhook( mailchimp_get_list_id(), mailchimp_get_webhook_url() );
		} catch ( Throwable $e ) {
			mailchimp_log( 'tower', 'could not get webhook URL', array( 'message' => $e->getMessage() ) );
			return false;
		}
	}
	/**
	 * @param $domain
	 * @return string|string[]
	 */
	protected function baseDomain( $domain ) {
		return str_replace(
			array( 'http://', 'https://', 'www.' ),
			'',
			rtrim( strtolower( trim( $domain ) ), '/' )
		);
	}

	/**
	 * @param null $file
	 * @param null $search
	 *
	 * @return array
	 */
	public function logs( $file = null, $search = null ) {
		try {
			$logs = new MailChimp_WooCommerce_Logs();
			$logs->limit( 200 );
			$logs->withView( ! is_null( $file ) ? $file : $this->with_log_file );
			$logs->searching( ! is_null( $search ) ? $search : $this->with_log_search );
			return $logs->handle();
		} catch ( Exception $e ) {
			mailchimp_error( 'tower', $e->getMessage() );
			return array();
		}
	}

	public function getShopSales() {
		try {
			global $woocommerce, $wpdb;
			include_once $woocommerce->plugin_path() . '/includes/admin/reports/class-wc-admin-report.php';

			// WooCommerce Admin Report
			$wc_report = new WC_Admin_Report();

			// Set date parameters for the current month
			$start_date            = strtotime( date( 'Y-m', current_time( 'timestamp' ) ) . '-01 midnight' );
			$end_date              = strtotime( '+1month', $start_date ) - 86400;
			$wc_report->start_date = $start_date;
			$wc_report->end_date   = $end_date;

			// Avoid max join size error
			$wpdb->query( 'SET SQL_BIG_SELECTS=1' );

			// Get data for current month sold products
			$sold_products = $wc_report->get_order_report_data(
				array(
					'data'         => array(
						'_product_id'    => array(
							'type'            => 'order_item_meta',
							'order_item_type' => 'line_item',
							'function'        => '',
							'name'            => 'product_id',
						),
						'_qty'           => array(
							'type'            => 'order_item_meta',
							'order_item_type' => 'line_item',
							'function'        => 'SUM',
							'name'            => 'quantity',
						),
						'_line_subtotal' => array(
							'type'            => 'order_item_meta',
							'order_item_type' => 'line_item',
							'function'        => 'SUM',
							'name'            => 'gross',
						),
						'_line_total'    => array(
							'type'            => 'order_item_meta',
							'order_item_type' => 'line_item',
							'function'        => 'SUM',
							'name'            => 'gross_after_discount',
						),
					),
					'query_type'   => 'get_results',
					'group_by'     => 'product_id',
					'where_meta'   => '',
					'order_by'     => 'quantity DESC',
					'order_types'  => wc_get_order_types( 'order_count' ),
					'filter_range' => true,
					'order_status' => array( 'completed', 'complete' ),
				)
			);
			$total         = 0;
			foreach ( $sold_products as $product ) {
				$total += $product->gross;
			}
			return $total;
		} catch ( Throwable $e ) {
			mailchimp_log( 'tower', $e->getMessage() );
			return 0;
		}
	}

	public function getSystemReport() {
		global $wp_version;

		$actions = $this->getLastActions();
		$theme   = wp_get_theme();

		return array(
			array(
				'key'   => 'PhpVersion',
				'value' => phpversion(),
			),
			array(
				'key'   => 'Memory Limit',
				'value' => ini_get( 'memory_limit' ),
			),
			array(
				'key'   => 'WP CRON Enabled',
				'value' => $this->hasWPCronEnabled(),
			),
			array(
				'key'   => 'WP CLI Enabled',
				'value' => $this->is_shell_enabled() ? shell_exec('wp cli version') !== null : 'N/A',
			),
			array(
				'key'   => 'Curl Enabled',
				'value' => function_exists( 'curl_init' ),
			),
			array(
				'key'   => 'Curl Version',
				'value' => $this->getCurlVersion(),
			),
			array(
				'key'   => 'Wordpress Version',
				'value' => $wp_version,
			),
			array(
				'key'   => 'WooCommerce Version',
				'value' => defined( 'WC_VERSION' ) ? WC_VERSION : null,
			),
			array(
				'key'   => 'Action Scheduler Version',
				'value' => $this->getActionSchedulerVersion(),
			),
			array(
				'key'   => 'Theme Name',
				'value' => esc_html( $theme->get( 'Name' ) ),
			),
			array(
				'key'   => 'Theme URL',
				'value' => esc_html( $theme->get( 'ThemeURI' ) ),
			),
			array(
				'key'   => 'Outbound IP Address',
				'value' => mailchimp_get_outbound_ip(),
			),
			array(
				'key'   => 'Active Plugins',
				'value' => $this->getActivePlugins(),
			),
			array(
				'key'   => 'Actions',
				'value' => $actions,
			),
			array(
				'key'   => 'Store Currency',
				'value' => get_woocommerce_currency(),
			),
			array(
				'key'   => 'HPOS (COT) Enabled',
				'value' => MailChimp_WooCommerce_HPOS::enabled() ? 'Yes' : 'No',
			),
		);
	}

	/**
	 * @return bool
	 */
	public function hasWPCronEnabled() {
		return ! defined( 'DISABLE_WP_CRON' ) ||
			( defined( 'DISABLE_WP_CRON' ) && ! DISABLE_WP_CRON );
	}

	/**
	 * @return mixed|null
	 */
	public function getCurlVersion() {
		$version = function_exists( 'curl_version' ) ? curl_version() : null;
		return is_array( $version ) ? $version['version'] : null;
	}

	/**
	 * @return string
	 */
	public function getActionSchedulerVersion() {

		// do a query to make sure this exists.
		if ( !class_exists('ActionScheduler_Versions') ) {
			return 'none';
		}
		if ( ! ActionScheduler::is_initialized( __FUNCTION__ ) ) {
			return 'Not Initialized In REST API';
		}
		return (string) ActionScheduler_Versions::instance()->latest_version();
	}

	public function getActivePlugins() {
		$active_plugins = '<ul>';
		$plugins        = wp_get_active_and_valid_plugins();
		foreach ( $plugins as $plugin ) {
			$plugin_data     = get_plugin_data( $plugin );
			$active_plugins .= '<li><span class="font-bold">' . $plugin_data['Name'] . '</span>: ' . $plugin_data['Version'] . '</li>';
		}
		$active_plugins .= '</ul>';
		return print_r( $active_plugins, true );
	}

	public function getLastActions() {
		global $wpdb;
		if ( ! class_exists( 'ActionScheduler' ) || ! ActionScheduler::is_initialized( 'store' ) ) {
			return array();
		}
		if ( ! ActionScheduler::store() ) {
			return array();
		}
		$oldest_and_newest = '<ul>';

		foreach ( array_keys( ActionScheduler::store()->get_status_labels() ) as $status ) {
			if ( 'in-progress' === $status ) {
				continue;
			}
			$newest             = $this->get_action_status_date( $status, 'newest' );
			$status             = ucfirst( $status );
			$oldest_and_newest .= "<li><span class='font-bold'>{$status}</span>: {$newest}</li>";
		}

		$oldest_and_newest .= '</ul>';

		return $oldest_and_newest;
	}

	/**
	 * @return array|object|null
	 */
	public function getMeta() {
		global $wpdb;
		$results  = $wpdb->get_results( "SELECT * FROM $wpdb->options WHERE option_name LIKE 'mailchimp-woocommerce-%'" );
		$response = array();
		$date     = new DateTime( 'now' );
		foreach ( $results as $result ) {
			$response[] = array(
				'key'        => str_replace( 'mailchimp-woocommerce-', '', $result->option_name ),
				'value'      => $result->option_value,
				'updated_at' => $date->format( 'Y-m-d H:i:s' ),
			);
		}
		return $response;
	}

	/**
	 * This is where we need to hook into tower from the store owner's support request.
	 * We can enable and disable this feature which will generate an API token specific to
	 * tower which will be used for authentication coming from our server to this specific store.
	 *
	 * @param bool $enable
	 *
	 * @return array|mixed|object|null
	 */
	public function toggle( $enable = true ) {
		$command        = (bool) $enable ? 'enable' : 'disable';
		$store_id       = mailchimp_get_store_id();
		$key            = mailchimp_get_api_key();
		$list_id        = mailchimp_get_list_id();
		$is_connected   = mailchimp_is_configured();
		$post_url       = "https://tower.vextras.com/admin-api/woocommerce/{$command}/{$store_id}";
		$plugin_options = (array) get_option( 'mailchimp-woocommerce' );
		$akamai_block   = false;

		if ( (bool) $enable ) {
			mailchimp_set_data( 'tower.token', $support_token = wp_generate_password(12, false, false) );
		} else {
			$support_token = mailchimp_get_data( 'tower.token' );
			delete_option( 'mailchimp-woocommerce-tower.support_token' );
		}

		if ( $enable ) {
			$data = array(
				'list_id'       => $list_id,
				'php_version'   => phpversion(),
				'curl_enabled'  => function_exists( 'curl_init' ),
				'is_connected'  => $is_connected,
				'sync_complete' => mailchimp_is_done_syncing(),
				'rest_url'      => MailChimp_WooCommerce_Rest_Api::url( '' ),
			);
			if ( $is_connected ) {
				try {
					$api          = mailchimp_get_api();
					$account_info = $api->getProfile();
					$list_info    = ! empty( $list_id ) ? $api->getList( $list_id ) : null;
					$mc_store     = $api->getStore( $store_id );
					$syncing_mc   = $mc_store ? $mc_store->isSyncing() : false;
					if ( is_array( $list_info ) ) {
						unset( $list_info['_links'] );
					}
					if ( is_array( $account_info ) ) {
						unset( $account_info['_links'] );
					}
					$job = new MailChimp_WooCommerce_Fix_Duplicate_Store( $store_id, false, false );
					$job->handle();
					$dup_store = (bool) $job->hasDuplicateStoreProblem();
				} catch ( Throwable $e ) {
					$list_info    = false;
					$syncing_mc   = false;
					$account_info = false;
					if ( $e->getCode() === 503 ) {
						$akamai_block = true;
					}
					if ( ! isset( $dup_store ) ) {
						$dup_store = false;
					}
				}
				$data['list_info']                 = $list_info;
				$data['is_syncing']                = $syncing_mc;
				$data['account_info']              = $account_info;
				$data['duplicate_mailchimp_store'] = $dup_store;
				$data['akamai_block']              = $akamai_block;
			}
		} else {
			$data = array();
		}

		try {
			$payload  = array(
				'headers' => array(
					'Content-type'     => 'application/json',
					'Accept'           => 'application/json',
					'X-Store-Platform' => 'woocommerce',
					'X-List-Id'        => $list_id,
					'X-Store-Key'      => base64_encode( "{$store_id}:{$key}" ),
				),
				'body'    => json_encode(
					array(
						'name'          => ! empty( $plugin_options ) && isset( $plugin_options['store_name'] ) ? $plugin_options['store_name'] : get_option( 'blogname' ),
						'support_token' => $support_token,
						'domain'        => get_option( 'siteurl' ),
						'data'          => $data,
					)
				),
				'timeout' => 30,
			);
			$response = wp_remote_post( $post_url, $payload );
			return json_decode( $response['body'] );
		} catch ( Throwable $e ) {
			return null;
		}
	}

	/**
	 * @param $status
	 * @param string $date_type
	 *
	 * @return string
	 */
	protected function get_action_status_date( $status, $date_type = 'oldest' ) {
		$order  = 'oldest' === $date_type ? 'ASC' : 'DESC';
		$store  = ActionScheduler::store();
		$action = $store->query_actions(
			array(
				'claimed'  => false,
				'status'   => $status,
				'per_page' => 1,
				'order'    => $order,
			)
		);
		if ( ! empty( $action ) ) {
			$date_object = $store->get_date( $action[0] );
			$action_date = $date_object->format( 'Y-m-d H:i:s O' );
		} else {
			$action_date = '&ndash;';
		}
		return $action_date;
	}

	public function is_shell_enabled() {
		/*Check if shell_exec() is enabled on this server*/
		if ( function_exists( 'shell_exec' ) && ! in_array( 'shell_exec', array_map( 'trim', explode( ', ', ini_get( 'disable_functions' ) ) ) ) ) {
			/*If enabled, check if shell_exec() actually have execution power*/
			$returnVal = shell_exec( 'pwd' );
			if ( ! empty( $returnVal ) ) {
				return true;
			}

			return false;
		}

		return false;
	}
}
class-mailchimp-woocommerce-transform-coupons.php                                                                                                                                                                                                              3135          1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 10/06/17
 * Time: 8:29 AM
 */
class MailChimp_WooCommerce_Transform_Coupons {

	/**
	 * @param int $page
	 * @param int $limit
	 *
	 * @return object
	 */
	public function compile( $page = 1, $limit = 5 ) {
		$response = (object) array(
			'endpoint' => 'coupons',
			'page'     => $page ? $page : 1,
			'limit'    => (int) $limit,
			'count'    => 0,
			'stuffed'  => false,
			'items'    => array(),
		);

		if ( ( ( $coupons = $this->getCouponPosts( $page, $limit ) ) && ! empty( $coupons ) ) ) {
			foreach ( $coupons as $post_id ) {
				$response->items[] = $post_id;
				$response->count++;
			}
		}

		$response->stuffed = $response->count > 0 && (int) $response->count === (int) $limit;

		return $response;
	}

	/**
	 * @param $post_id
	 *
	 * @return MailChimp_WooCommerce_PromoCode
	 */
	public function transform( $post_id ) {
		$resource = new WC_Coupon( $post_id );
		$valid    = true;

		if ( ( $exp = $resource->get_date_expires() ) && time() > $exp->getTimestamp() ) {
			$valid = false;
		}

		$rule = new MailChimp_WooCommerce_PromoRule();

		$rule->setId( $resource->get_id() );
		$rule->setTitle( $resource->get_code() );
		$rule->setDescription( $resource->get_description() );
		$rule->setEnabled( $valid );
		$rule->setAmount( $resource->get_amount( 'edit' ) );

		if ( ! $rule->getDescription() ) {
			$rule->setDescription( $resource->get_code() );
		}

		switch ( $resource->get_discount_type() ) {
			case 'fixed_product':
				// Support to Woocommerce Free Gift Coupon Plugin
			case 'free_gift':
				$rule->setTypeFixed();
				$rule->setTargetTypePerItem();
				break;

			case 'fixed_cart':
				$rule->setTypeFixed();
				$rule->setTargetTypeTotal();
				break;

			case 'percent':
				$rule->setTypePercentage();
				$rule->setTargetTypeTotal();
				$rule->setAmount( ( $resource->get_amount( 'edit' ) / 100 ) );
				break;
		}

		if ( ( $exp = $resource->get_date_expires() ) ) {
			$rule->setEndsAt( $exp );
		}

		$code = new MailChimp_WooCommerce_PromoCode();

		$code->setId( $resource->get_id() );
		$code->setCode( $resource->get_code() );
		$code->setEnabled( $valid );
		$code->setRedemptionURL( get_home_url() );
		$code->setUsageCount( $resource->get_usage_count() );

		// attach the rule for use.
		$code->attachPromoRule( $rule );

		return apply_filters('mailchimp_sync_promocode', $code, $resource);
	}

	/**
	 * @param int $page
	 * @param int $posts
	 * @return array|bool
	 */
	public function getCouponPosts( $page = 1, $posts = 5 ) {
		$offset = 0;
		if ( $page > 1 ) {
			$offset = ( ( $page - 1 ) * $posts );
		}

		$args = array(
			'post_type'      => array_merge( array_keys( wc_get_product_types() ), array( 'shop_coupon' ) ),
			'posts_per_page' => $posts,
			'offset'         => $offset,
			'orderby'        => 'ID',
			'order'          => 'ASC',
			'fields'         => 'ids',
		);

		$coupons = get_posts( $args );

		if ( empty( $coupons ) ) {

			sleep( 2 );

			$coupons = get_posts( $args );
			if ( empty( $coupons ) ) {
				return false;
			}
		}

		return $coupons;
	}
}
class-mailchimp-woocommerce-transform-orders-wc3.php                                                                                                                                                                                                           16924         1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Class MailChimp_WooCommerce_Transform_Orders
 */
class MailChimp_WooCommerce_Transform_Orders {

	protected $is_syncing = false;

	/**
	 * @param int $page
	 * @param int $limit
	 *
	 * @return object
	 */
	public function compile( $page = 1, $limit = 5 ) {
		$this->is_syncing = true;

		$response = (object) array(
			'endpoint' => 'orders',
			'page'     => $page ? $page : 1,
			'limit'    => (int) $limit,
			'count'    => 0,
			'valid'    => 0,
			'drafts'   => 0,
			'stuffed'  => false,
			'items'    => array(),
		);

		if ( ( ( $orders = $this->getOrderPosts( $page, $limit ) ) && ! empty( $orders ) ) ) {
			foreach ( $orders as $post_id ) {
				$response->items[] = $post_id;
				$response->count++;
			}
		}

		$response->stuffed = $response->count > 0 && (int) $response->count === (int) $limit;
		$this->is_syncing  = false;

		return $response;
	}

	/**
	 * @param $woo
	 *
	 * @return MailChimp_WooCommerce_Order|mixed|void
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public function transform( $woo ) {
		$order = new MailChimp_WooCommerce_Order();

		// if the woo get order returns an empty value, we need to skip the whole thing.
		if ( empty( $woo ) ) {
			return $order;
		}

		// this is a fallback safety check to make sure we're not submitting these orders.
		if ( $woo->get_status() === 'checkout-draft' ) {
			$order->setOriginalWooStatus( 'checkout-draft' );
			$order->flagAsIgnoreIfNotInMailchimp( true );
			return $order;
		}

		// if the woo object does not have a "get_billing_email" method, then we need to skip this until
		// we know how to resolve these types of things.
		// mailchimp_log('get_billing_mail', method_exists($woo, 'get_billing_email'), array($order->toArray(), $woo));
		if ( ! method_exists( $woo, 'get_billing_email' ) ) {
			$message = "Post ID {$woo->get_id()} was an order refund. Skipping this.";
			if ( $this->is_syncing ) {
				throw new MailChimp_WooCommerce_Error( $message );
			}
			mailchimp_error(
				'initial_sync',
				$message,
				array(
					'post'        => $woo,
					'order_class' => get_class( $woo ),
				)
			);
			return $order;
		}

		$customer = $this->buildCustomerFromOrder( $woo );

		$email = $woo->get_billing_email();

		// just skip these altogether because we can't submit any amazon orders anyway.
		if ( mailchimp_email_is_amazon( $email ) ) {
			return $order->flagAsAmazonOrder( true );
		} elseif ( mailchimp_email_is_privacy_protected( $email ) ) {
			return $order->flagAsPrivacyProtected( true );
		}

		$order->setId( $woo->get_order_number() );

		$order->setProcessedAt( $woo->get_date_created()->setTimezone( new DateTimeZone( 'UTC' ) ) );

		$order->setCurrencyCode( $woo->get_currency() );

		// grab the current statuses - this will end up being custom at some point.
		$statuses = $this->getOrderStatuses();

		// grab the order status and set it into the object for future comparison.
		$order->setOriginalWooStatus( ( $status = $woo->get_status() ) );

		// if the order is "on-hold" status, and is not currently in Mailchimp, we need to ignore it
		// because the payment gateways are putting this on hold while they navigate to the payment processor
		// and they technically haven't paid yet.
		if ( in_array( $status, array( 'on-hold', 'failed' ) ) ) {
			$order->flagAsIgnoreIfNotInMailchimp( true );
		}

		// map the fulfillment and financial statuses based on the map above.
		$fulfillment_status = array_key_exists( $status, $statuses ) ? $statuses[ $status ]->fulfillment : null;
		$financial_status   = array_key_exists( $status, $statuses ) ? $statuses[ $status ]->financial : $status;

		// set the fulfillment_status
		$order->setFulfillmentStatus( $fulfillment_status );

		// set the financial status
		$order->setFinancialStatus( $financial_status );

		// if the status is processing, we need to send this one first, then send a 'paid' status right after.
		if ( $status === 'processing' ) {
			$order->confirmAndPay( true );
		}

		// only set this if the order is cancelled.
		if ( $status === 'cancelled' ) {
			if ( method_exists( $woo, 'get_date_modified' ) ) {
				$order->setCancelledAt( $woo->get_date_modified()->setTimezone( new DateTimeZone( 'UTC' ) ) );
			}
		}

		// set the total
		$order->setOrderTotal( $order_total = $woo->get_total() );

		// set the order URL if it's valid.
		if ( ( $view_order_url = $woo->get_view_order_url() ) && wc_is_valid_url( $view_order_url ) ) {
			$order->setOrderURL( $woo->get_view_order_url() );
		}

		// set the total if refund
		if ( ( $refund = $woo->get_total_refunded() ) && $refund > 0 ) {
			// If there's a refund, apply to order total.
			$order_spent = $order_total - $refund;
			$order->setOrderTotal( $order_spent );
		}

		// if we have any tax
		$order->setTaxTotal( $woo->get_total_tax() );

		// if we have shipping
		if ( method_exists( $woo, 'get_shipping_total' ) ) {
			$order->setShippingTotal( $woo->get_shipping_total() );
		}

		// set the order discount
		$order->setDiscountTotal( $woo->get_total_discount() );

		// set the customer
		$order->setCustomer( $customer );

		// apply the addresses to the order
		$order->setShippingAddress( $this->transformShippingAddress( $woo ) );
		$order->setBillingAddress( $this->transformBillingAddress( $woo ) );

		// loop through all the order items
		foreach ( $woo->get_items() as $key => $order_detail ) {
			/** @var WC_Order_Item_Product $order_detail */

            $key = apply_filters( 'mailchimp_line_item_key', $key, $woo );
			// add it into the order item container.
			$item = $this->transformLineItem( $key, $order_detail );

			$product = $order_detail->get_product();

			// if we can't find the product, we need to populate this
			if ( empty( $product ) ) {
				if ( ( $empty_order_item = MailChimp_WooCommerce_Transform_Products::missing_order_item( $order_detail ) ) ) {
					$item->setFallbackTitle( $empty_order_item->getTitle() );
					$item->setProductId( $empty_order_item->getId() );
					$item->setProductVariantId( $empty_order_item->getId() );
					$order->addItem( $item );
					continue;
				}
			}

			// if we don't have a product post with this id, we need to add a deleted product to the MC side
			if ( ! $product || ( $trashed = 'trash' === $product->get_status() ) ) {

				$pid   = $order_detail->get_product_id();
				$title = $order_detail->get_name();

				try {
					$deleted_product = MailChimp_WooCommerce_Transform_Products::deleted( $pid, $title );
				} catch ( Exception $e ) {
					mailchimp_log( 'order.items.error', "Order #{$woo->get_id()} :: Product {$pid} does not exist!" );
					continue;
				}

				// check if it exists, otherwise create a new one.
				if ( $deleted_product ) {
					// swap out the old item id and product variant id with the deleted version.
					$item->setProductId( "deleted_{$pid}" );
					$item->setProductVariantId( "deleted_{$pid}" );

					// add the item and continue on the loop.
					$order->addItem( $item );
					continue;
				}

				mailchimp_log( 'order.items.error', "Order #{$woo->get_id()} :: Product {$pid} does not exist!" );
				continue;
			}

			$order->addItem( $item );
		}

		// let the store owner alter this if they need to use on-hold orders
		return apply_filters( 'mailchimp_filter_ecommerce_order', $order, $woo );
	}

	/**
	 * @param WC_Order|WC_Order_Refund $order
	 *
	 * @return MailChimp_WooCommerce_Customer
	 */
	public function buildCustomerFromOrder( $order ) {
		$customer = new MailChimp_WooCommerce_Customer();

		// attach the WordPress user to the Mailchimp customer object.
		$customer->setWordpressUser( $order->get_user() );

		$customer->setId( mailchimp_hash_trim_lower( $order->get_billing_email() ) );
		$customer->setCompany( $order->get_billing_company() );
		$customer->setEmailAddress( trim( $order->get_billing_email() ) );
		$customer->setFirstName( $order->get_billing_first_name() );
		$customer->setLastName( $order->get_billing_last_name() );
		$customer->setAddress( $this->transformBillingAddress( $order ) );

		// removing this because it's causing issues with the order counts
		// if (!($stats = $this->getCustomerOrderTotals($order))) {
		// $stats = (object) array('count' => 0, 'total' => 0);
		// }
		//
		// $customer->setOrdersCount($stats->count);
		// $customer->setTotalSpent($stats->total);

		// we now hold this data inside the customer object for usage in the order handler class
		// we only update the subscriber status on a member IF they were subscribed.
		$subscribed_on_order = $customer->wasSubscribedOnOrder( $order->get_id() );
		$customer->setOptInStatus( $subscribed_on_order );

		if ($subscribed_on_order) {
			mailchimp_debug('trace', "{$customer->getEmailAddress()} subscribed on order");
		} else {
			mailchimp_debug('trace', "{$customer->getEmailAddress()} was not subscribed on order");
		}

		try {
			$doi = mailchimp_list_has_double_optin();
		} catch ( Exception $e ) {
			$doi = false;
		}

		$status_if_new = $doi ? false : $subscribed_on_order;

		$customer->setOptInStatus( $status_if_new );

		// if they didn't subscribe on the order, we need to check to make sure they're not already a subscriber
		// if they are, we just need to make sure that we don't unsubscribe them just because they unchecked this box.
		if ( $doi || ! $subscribed_on_order ) {
			try {
				$subscriber = mailchimp_get_api()->member( mailchimp_get_list_id(), $customer->getEmailAddress() );

				if ( $subscriber['status'] === 'transactional' ) {
					$customer->setOptInStatus( false );
					// when the list requires a double opt in - flag it here.
					if ( $doi ) {
						mailchimp_debug('trace', "found list member {$customer->getEmailAddress()} and applied false to customer requiring double opt in");
						$customer->requireDoubleOptIn( true );
					} else {
						mailchimp_debug('trace', "found list member {$customer->getEmailAddress()} and applied false to customer");
					}
					return $customer;
				} elseif ( $subscriber['status'] === 'pending' ) {
					mailchimp_debug('trace', "found list member {$customer->getEmailAddress()} and applied false to customer because they were in a pending state");
					$customer->setOptInStatus( false );
					return $customer;
				}

				$customer->setOptInStatus( $subscriber['status'] === 'subscribed' );
			} catch ( Exception $e ) {
				// if double opt in is enabled - we need to make a request now that subscribes the customer as pending
				// so that the double opt in will actually fire.
				if ( $doi && ( ! isset( $subscriber ) || empty( $subscriber ) ) ) {
					$customer->requireDoubleOptIn( true );
				}
			}
		}

		return $customer;
	}

	/**
	 * @param $key
	 * @param $order_detail
	 *
	 * @return MailChimp_WooCommerce_LineItem
	 */
	protected function transformLineItem( $key, $order_detail ) {
		// fire up a new MC line item
		$item = new MailChimp_WooCommerce_LineItem();
		$item->setId( $key );

		// set the fallback title for the order detail name just in case we need to create a product
		// from this order item.
		$item->setFallbackTitle( $order_detail->get_name() );

		$item->setPrice( $order_detail->get_total() );
		$item->setProductId( $order_detail->get_product_id() );
		$variation_id = $order_detail->get_variation_id();
		if ( empty( $variation_id ) ) {
			$variation_id = $order_detail->get_product_id();
		}
		$item->setProductVariantId( $variation_id );
		$item->setQuantity( $order_detail->get_quantity() );

		if ( $item->getQuantity() > 1 ) {
			$current_price = $item->getPrice();
			$price         = ( $current_price / $item->getQuantity() );
			$item->setPrice( $price );
		}

		return $item;
	}

	/**
	 * @param WC_Abstract_Order $order
	 * @return MailChimp_WooCommerce_Address
	 */
	public function transformBillingAddress( WC_Abstract_Order $order ) {
		// use the info from the order to compile an address.
		$address = new MailChimp_WooCommerce_Address();
		$address->setAddress1( $order->get_billing_address_1() );
		$address->setAddress2( $order->get_billing_address_2() );
		$address->setCity( $order->get_billing_city() );
		$address->setProvince( $order->get_billing_state() );
		$address->setPostalCode( $order->get_billing_postcode() );
		$address->setCountry( $order->get_billing_country() );
		$address->setPhone( $order->get_billing_phone() );

		$bfn = $order->get_billing_first_name();
		$bln = $order->get_billing_last_name();

		// if we have billing names set it here
		if ( ! empty( $bfn ) && ! empty( $bln ) ) {
			$address->setName( "{$bfn} {$bln}" );
		}

		return $address;
	}

	/**
	 * @param WC_Abstract_Order $order
	 * @return MailChimp_WooCommerce_Address
	 */
	public function transformShippingAddress( WC_Abstract_Order $order ) {
		$address = new MailChimp_WooCommerce_Address();

		$address->setAddress1( $order->get_shipping_address_1() );
		$address->setAddress2( $order->get_shipping_address_2() );
		$address->setCity( $order->get_shipping_city() );
		$address->setProvince( $order->get_shipping_state() );
		$address->setPostalCode( $order->get_shipping_postcode() );
		$address->setCountry( $order->get_shipping_country() );

		// shipping does not have a phone number, so maybe use this?
		$address->setPhone( $order->get_billing_phone() );

		$sfn = $order->get_shipping_first_name();
		$sln = $order->get_shipping_last_name();

		// if we have billing names set it here
		if ( ! empty( $sfn ) && ! empty( $sln ) ) {
			$address->setName( "{$sfn} {$sln}" );
		}

		return $address;
	}

	/**
	 * @param int $page
	 * @param int $posts
	 * @return array|bool
	 */
	public function getOrderPosts( $page = 1, $posts = 5 ) {
		$offset = 0;
		if ( $page > 1 ) {
			$offset = ( $page - 1 ) * $posts;
		}

		$params = array(
			'post_type'      => 'shop_order',
			// 'post_status' => array_keys(wc_get_order_statuses()),
			'post_status'    => 'wc-completed',
			'posts_per_page' => $posts,
			'offset'         => $offset,
			'orderby'        => 'id',
			'order'          => 'ASC',
			'fields'         => 'ids',
		);

		$orders = get_posts( $params );
		if ( empty( $orders ) ) {
			sleep( 2 );
			$orders = get_posts( $params );
		}

		return empty( $orders ) ? false : $orders;
	}

	/**
	 * @param $order
	 *
	 * @return object
	 * @throws Exception
	 */
	public function getCustomerOrderTotals( $order ) {
		if ( ! function_exists( 'wc_get_orders' ) ) {
			return $this->getSingleCustomerOrderTotals( $order->get_user_id() );
		}

		$orders = wc_get_orders(
			array(
				'customer' => trim( $order->get_billing_email() ),
			)
		);

		$stats = (object) array(
			'count' => 0,
			'total' => 0,
		);

		foreach ( $orders as $order ) {
			$order = wc_get_order( $order );

			if ( $order->get_status() !== 'cancelled' && ( method_exists( $order, 'is_paid' ) && $order->is_paid() ) ) {
				$stats->total += $order->get_total();
				$stats->count ++;
			}
		}

		return $stats;
	}

	/**
	 * @param $user_id
	 * @return object
	 * @throws Exception
	 */
	protected function getSingleCustomerOrderTotals( $user_id ) {
		$customer = new WC_Customer( $user_id );

		$customer->get_order_count();
		$customer->get_total_spent();

		return (object) array(
			'count' => $customer->get_order_count(),
			'total' => $customer->get_total_spent(),
		);
	}

	/**
	 * "Pending payment" in the UI fires the order confirmation email MailChimp
	 * "Completed” in the UI fires the MailChimp Order Invoice
	 * "Cancelled" does what we think it does
	 *
	 * @return array
	 */
	public function getOrderStatuses() {
		return array(
			// Order received (unpaid)
			'pending'    => (object) array(
				'financial'   => 'pending',
				'fulfillment' => null,
			),
			// Payment received and stock has been reduced – the order is awaiting fulfillment.
			// All product orders require processing, except those for digital downloads
			'processing' => (object) array(
				'financial'   => 'pending',
				'fulfillment' => null,
			),
			// Awaiting payment – stock is reduced, but you need to confirm payment
			'on-hold'    => (object) array(
				'financial'   => 'on-hold',
				'fulfillment' => null,
			),
			// Order fulfilled and complete – requires no further action
			'completed'  => (object) array(
				'financial'   => 'paid',
				'fulfillment' => 'fulfilled',
			),
			// Cancelled by an admin or the customer – no further action required
			'cancelled'  => (object) array(
				'financial'   => 'cancelled',
				'fulfillment' => null,
			),
			// Refunded by an admin – no further action required
			'refunded'   => (object) array(
				'financial'   => 'refunded',
				'fulfillment' => null,
			),
			// Payment failed or was declined (unpaid). Note that this status may not show immediately and
			// instead show as Pending until verified (i.e., PayPal)
			'failed'     => (object) array(
				'financial'   => 'failed',
				'fulfillment' => null,
			),
		);
	}
}
class-mailchimp-woocommerce-transform-products.php                                                                                                                                                                                                             11670         1711191352  plugins/mailchimp-for-woocommerce/includes/api                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/13/16
 * Time: 8:29 AM
 */
class MailChimp_WooCommerce_Transform_Products {

	/**
	 * @param int $page
	 * @param int $limit
	 *
	 * @return object
	 */
	public function compile( $page = 1, $limit = 5 ) {
		$response = (object) array(
			'endpoint' => 'products',
			'page'     => $page ? $page : 1,
			'limit'    => (int) $limit,
			'count'    => 0,
			'stuffed'  => false,
			'items'    => array(),
		);

		if ( ( ( $products = $this->getProductPostsIds( $page, $limit ) ) && ! empty( $products ) ) ) {
			foreach ( $products as $post_id ) {
				$response->items[] = $post_id;
				$response->count++;
			}
		}

		$response->stuffed = $response->count > 0 && (int) $response->count === (int) $limit;

		return $response;
	}

	/**
	 * @param MailChimp_WooCommerce_LineItem $item
	 * @return MailChimp_WooCommerce_Product
	 */
	public function fromOrderItem( MailChimp_WooCommerce_LineItem $item ) {
		$product = new MailChimp_WooCommerce_Product();

		$fallback_title = $item->getFallbackTitle();
		if ( empty( $fallback_title ) ) {
			$fallback_title = "deleted_{$item->getProductId()}";
		}

		$product->setId( $item->getProductId() );
		$product->setTitle( $fallback_title );

		$variant = new MailChimp_WooCommerce_ProductVariation();
		$variant->setId( $item->getProductId() );
		$variant->setTitle( $fallback_title );
		$variant->setInventoryQuantity( 0 );
		$variant->setVisibility( 'hidden' );
		$variant->setSku( $item->getFallbackSku() );

		$product->addVariant( $variant );

		return apply_filters('mailchimp_sync_lineitem', $product);
	}

	/**
	 * @param $woo
	 * @param null    $fallback_title
	 *
	 * @return MailChimp_WooCommerce_Product
	 * @throws Exception
	 */
	public function transform( $woo, $fallback_title = null ) {
		$variant_posts = $this->getProductVariantPosts( $woo->get_id() );

		$variants = $variant_posts ? array_merge( array( $woo ), $variant_posts ) : array( $woo );

		$is_variant = count( $variants ) > 1;

		$product = new MailChimp_WooCommerce_Product();

		if ( class_exists( 'SitePress' ) && function_exists( 'wpml_switch_language_action' ) ) {
			$get_language_args  = array( 'element_id' => $woo->get_id(), 'element_type' => 'product' );
			$post_language_info = apply_filters( 'wpml_element_language_details', null, $get_language_args );
			wpml_switch_language_action( $post_language_info->language_code );
		}

		$product->setId( $woo->get_id() );
		$product->setHandle( urldecode($woo->get_slug() ) );
		$product->setImageUrl( $this->getProductImage( $woo ) );
		$product->setDescription( $woo->get_description() );
		$product->setPublishedAtForeign( mailchimp_date_utc( $woo->get_date_created() ) );
		$product->setTitle( $woo->get_title() );
		$product->setUrl( urldecode( $woo->get_permalink() ) );

		$original_vendor = '';
		if ( in_array( 'woocommerce-product-vendors/woocommerce-product-vendors.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) || defined( 'WC_PRODUCT_VENDORS_VERSION' ) ) {
			$vendor_id       = WC_Product_Vendors_Utils::get_vendor_id_from_product( $woo->get_id() );
			$vendor_data     = WC_Product_Vendors_Utils::get_vendor_data_by_id( $vendor_id );
			$original_vendor = $vendor_data['name'];
		}
		$vendor_filter = apply_filters( 'mailchimp_sync_product_vendor', $original_vendor, $product );
		if ( $original_vendor != '' && is_string( $vendor_filter ) ) {
			$product->setVendor( $vendor_filter );
		} elseif ( $original_vendor != '' && is_string( $original_vendor ) ) {
			$product->setVendor( $original_vendor );
		}

		foreach ( $variants as $variant ) {

			$product_variant = $this->variant( $variant, $woo->get_title() );

			if ( ! $product_variant ) {
				continue;
			}

			$product_variant_title = $product_variant->getTitle();

			if ( empty( $product_variant_title ) ) {
				$product_variant->setTitle( $woo->get_title() );
			}

			$product_variant_image = $product_variant->getImageUrl();

			if ( empty( $product_variant_image ) ) {
				$product_variant->setImageUrl( $product->getImageUrl() );
			}

			$product->addVariant( $product_variant );
		}

		return apply_filters('mailchimp_sync_product', $product, $woo);
	}

	/**
	 * @param $post
	 * @param null $fallback_title
	 *
	 * @return MailChimp_WooCommerce_ProductVariation
	 */
	public function variant( $post, $fallback_title = null ) {
		if ( $post instanceof WC_Product || $post instanceof WC_Product_Variation ) {
			$woo = $post;
		} else {
			if ( isset( $post->post_type ) && $post->post_type === 'product_variation' ) {
				$woo = new WC_Product_Variation( $post->ID );
			} else {
				$woo = wc_get_product( $post );
			}
		}

		$variant = new MailChimp_WooCommerce_ProductVariation();

		if ( ! $woo ) {
			// mailchimp_error("products.transform", "could not load product variant", array('post' => print_r($post, true)));
			return $variant;
		}

		$variant->setId( $woo->get_id() );
		$variant->setUrl( urldecode( $woo->get_permalink() ) );
		$variant->setImageUrl( $this->getProductImage( $post ) );
		$variant->setPrice( $woo->get_price() );
		$variant->setSku( $woo->get_sku() );
		$variant->setBackorders( $woo->backorders_allowed() );

		if ( empty( $variant->getTitle() ) ) {
			if ( ! empty( $fallback_title ) ) {
				$variant->setTitle( $fallback_title );
			} elseif ( ! empty( $variant->getSku() ) ) {
				$variant->setTitle( $variant->getSku() );
			}
		}

		// only set these properties if the product is currently visible or purchasable.
		if ( $woo->is_purchasable() && $woo->is_visible() ) {
			if ( $woo->is_in_stock() ) {
				$variant->setInventoryQuantity( ( $woo->managing_stock() ? $woo->get_stock_quantity() : 1000000 ) );
			} else {
				$variant->setInventoryQuantity( 0 );
			}
		} else {
			$variant->setInventoryQuantity( 0 );
		}

		if ( $woo instanceof WC_Product_Variation ) {

			$variation_title = $woo->get_title();
			if ( empty( $variation_title ) ) {
				$variation_title = $fallback_title;
			}

			$title = array( $variation_title );

			foreach ( $woo->get_variation_attributes() as $attribute => $value ) {
				if ( is_string( $value ) && ! empty( $value ) ) {
					$name    = ucfirst( str_replace( array( 'attribute_pa_', 'attribute_' ), '', $attribute ) );
					$title[] = "$name = $value";
				}
			}

			$variant->setTitle( implode( ' :: ', $title ) );
			$variant->setVisibility( ( $woo->variation_is_visible() ? 'visible' : '' ) );
		} else {
			$variant->setVisibility( ( $woo->is_visible() ? 'visible' : '' ) );
			$variant->setTitle( $woo->get_title() );
		}

		return $variant;
	}

	/**
	 * @param int $page
	 * @param int $posts
	 * @return array|bool
	 */
	public function getProductPostsIds( $page = 1, $posts = 5 ) {
		$offset = 0;

		if ( $page > 1 ) {
			$offset = ( ( $page - 1 ) * $posts );
		}

		$params = array(
			'post_type'      => array_merge( array_keys( wc_get_product_types() ), array( 'product' ) ),
			'posts_per_page' => $posts,
			'post_status'    => array( 'private', 'publish', 'draft' ),
			'offset'         => $offset,
			'orderby'        => 'ID',
			'order'          => 'ASC',
			'fields'         => 'ids',
		);

		$products = get_posts( $params );

		if ( empty( $products ) ) {
			sleep( 2 );
			$products = get_posts( $params );
			if ( empty( $products ) ) {
				return false;
			}
		}

		return $products;
	}

	/**
	 * @param $id
	 * @return array|bool
	 */
	public function getProductVariantPosts( $id ) {
		$variants = get_posts(
			array(
				'post_type'   => 'product_variation',
				'post_status' => array( 'private', 'publish', 'draft' ),
				'numberposts' => -1,
				'post_parent' => $id,
			)
		);

		if ( empty( $variants ) ) {
			return false;
		}

		return $variants;
	}

	public function getProductImage( $post ) {
		$id        = is_a( $post, 'WC_Product' ) ? $post->get_id() : $post->ID;
		$meta      = get_post_meta( $id );
		$key       = '_thumbnail_id';
		$image_key = $this->getProductImageKey();
		if ( $meta && is_array( $meta ) && array_key_exists( $key, $meta ) && isset( $meta[ $key ][0] ) ) {
			$img = wp_get_attachment_image_src( $meta[ $key ][0], $image_key );
			if ( ! empty( $img[0] ) ) {
				if ( substr( $img[0], 0, 4 ) !== 'http' ) {
					return rtrim( home_url(), '/' ) . '/' . ltrim( $img[0], '/' );
				}
				return $img[0];
			}
		}
		return get_the_post_thumbnail_url( $id, $image_key );
	}

	/**
	 * @return null|string
	 */
	public function getProductImageKey() {
		return mailchimp_get_option( 'mailchimp_product_image_key', 'medium' );
	}

	/**
	 * @param $id
	 * @param $title
	 *
	 * @return bool|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public static function deleted( $id, $title ) {
		$store_id = mailchimp_get_store_id();
		$api      = mailchimp_get_api();

		if ( ! ( $product = $api->getStoreProduct( $store_id, "deleted_{$id}" ) ) ) {
			$product = new MailChimp_WooCommerce_Product();

			$product->setId( "deleted_{$id}" );
			$product->setTitle( $title );

			$variant = new MailChimp_WooCommerce_ProductVariation();
			$variant->setId( $product->getId() );
			$variant->setTitle( $title );
			$variant->setInventoryQuantity( 0 );
			$variant->setVisibility( 'hidden' );

			$product->addVariant( $variant );

			return $api->addStoreProduct( $store_id, $product );
		}

		return $product;
	}

	/**
	 * @param $item
	 *
	 * @return bool|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
	public static function missing_order_item( $item ) {
		// we can only do this with an order item
		if ( ! $item instanceof WC_Order_Item_Product ) {
			return false;
		}

		$store_id = mailchimp_get_store_id();
		$api      = mailchimp_get_api();

		// If the $item->get_product_id() is null or 0, we can try to retrieve the id directly from "wc_order_product_lookup" table
		if ( ! $id = $item->get_product_id() ) {
			global $wpdb;
			$query        = "SELECT product_id FROM {$wpdb->prefix}wc_order_product_lookup WHERE order_item_id = %s";
			$query_result = $wpdb->get_results( $wpdb->prepare( $query, $item->get_id() ) );
			$id           = $query_result[0]->product_id ?: 0;
		}

		$title = $item->get_name();

		// only do this if we haven't pushed this product ID up yet to Mailchimp
		if ( ! ( $product = $api->getStoreProduct( $store_id, "deleted_{$id}" ) ) ) {
			$product = new MailChimp_WooCommerce_Product();

			$product->setId( "deleted_{$id}" );
			$product->setTitle( $title );

			$variant = new MailChimp_WooCommerce_ProductVariation();
			$variant->setId( $product->getId() );
			$variant->setTitle( $title );
			$variant->setInventoryQuantity( 0 );
			$variant->setVisibility( 'hidden' );

			$product->addVariant( $variant );

			return $api->addStoreProduct( $store_id, $product );
		}

		return $product;
	}

	/**
	 * @param $post
	 * @param null $fallback_title
	 *
	 * @return MailChimp_WooCommerce_Product
	 */
	protected function wooProductNotLoadedCorrectly( $post, $fallback_title = null ) {
		$product = new MailChimp_WooCommerce_Product();
		$product->setId( $post->ID );
		$product->setHandle( $post->post_name );
		$product->setDescription( $post->post_content );
		$product->setImageUrl( $this->getProductImage( $post ) );

		$variant = $this->variant( $post, ( $post->post_name ? $post->post_name : $fallback_title ) );

		if ( ! $variant->getImageUrl() ) {
			$variant->setImageUrl( $product->getImageUrl() );
		}

		$product->addVariant( $variant );

		return $product;
	}
}
class-mailchimp-error.php                                                                                                                                                                                                                                      110           1711191352  plugins/mailchimp-for-woocommerce/includes/api/errors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Class MailChimp_WooCommerce_Error
 */
class MailChimp_WooCommerce_Error extends Exception {


}
class-mailchimp-rate-limit-error.php                                                                                                                                                                                                                           146           1711191352  plugins/mailchimp-for-woocommerce/includes/api/errors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Class MailChimp_WooCommerce_RateLimitError
 */
class MailChimp_WooCommerce_RateLimitError extends MailChimp_WooCommerce_Error {


}
class-mailchimp-server-error.php                                                                                                                                                                                                                               140           1711191352  plugins/mailchimp-for-woocommerce/includes/api/errors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

/**
 * Class MailChimp_WooCommerce_ServerError
 */
class MailChimp_WooCommerce_ServerError extends MailChimp_WooCommerce_Error {


}
class-mailchimp-woocommerce-api-currency-codes.php                                                                                                                                                                                                             21415         1711191352  plugins/mailchimp-for-woocommerce/includes/api/helpers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/12/16
 * Time: 1:38 PM
 * Updated with last ISO 4217 version 2015 @ Mar 21st, 2019
 */
class MailChimp_WooCommerce_CurrencyCodes {

	static function currencies() {
		return array(
			array(
				'name'    => 'UAE Dirham',
				'alpha3'  => 'AED',
				'numeric' => '784',
				'country' => 'AE',
			),
			array(
				'name'    => 'Afghan Afghani',
				'alpha3'  => 'AFN',
				'numeric' => '971',
				'country' => 'AF',
			),
			array(
				'name'    => 'Albanian Lek',
				'alpha3'  => 'ALL',
				'numeric' => '008',
				'country' => 'AL',
			),
			array(
				'name'    => 'Armenian Dram',
				'alpha3'  => 'AMD',
				'numeric' => '051',
				'country' => 'AM',
			),
			array(
				'name'    => 'Netherlands Antillean Guilder',
				'alpha3'  => 'ANG',
				'numeric' => '532',
				'country' => array(
					'CW',
					'SX',
				),
			),
			array(
				'name'    => 'Angolan Kwanza',
				'alpha3'  => 'AOA',
				'numeric' => '973',
				'country' => 'AO',
			),
			array(
				'name'    => 'Argentine Peso',
				'alpha3'  => 'ARS',
				'numeric' => '032',
				'country' => 'AR',
			),
			array(
				'name'    => 'Australian Dollar',
				'alpha3'  => 'AUD',
				'numeric' => '036',
				'country' => array(
					'AU',
					'CC',
					'CX',
					'HM',
					'KI',
					'NF',
					'NR',
					'TV',
				),
			),
			array(
				'name'    => 'Aruban Florin',
				'alpha3'  => 'AWG',
				'numeric' => '533',
				'country' => 'AW',
			),
			array(
				'name'    => 'Azerbaijani Manat',
				'alpha3'  => 'AZN',
				'numeric' => '944',
				'country' => 'AZ',
			),
			array(
				'name'    => 'Bosnia and Herzegovina Convertible Mark',
				'alpha3'  => 'BAM',
				'numeric' => '977',
				'country' => 'BA',
			),
			array(
				'name'    => 'Barbados Dollar',
				'alpha3'  => 'BBD',
				'numeric' => '052',
				'country' => 'BB',
			),
			array(
				'name'    => 'Bangladeshi Taka',
				'alpha3'  => 'BDT',
				'numeric' => '050',
				'country' => 'BD',
			),
			array(
				'name'    => 'Bulgarian Lev',
				'alpha3'  => 'BGN',
				'numeric' => '975',
				'country' => 'BG',
			),
			array(
				'name'    => 'Bahraini Dinar',
				'alpha3'  => 'BHD',
				'numeric' => '048',
				'country' => 'BH',
			),
			array(
				'name'    => 'Burundian Franc',
				'alpha3'  => 'BIF',
				'numeric' => '108',
				'country' => 'BI',
			),
			array(
				'name'    => 'Bermudian Dollar',
				'alpha3'  => 'BMD',
				'numeric' => '060',
				'country' => 'BM',
			),
			array(
				'name'    => 'Brunei Dollar',
				'alpha3'  => 'BND',
				'numeric' => '096',
				'country' => 'BN',
			),
			array(
				'name'    => 'Boliviano',
				'alpha3'  => 'BOB',
				'numeric' => '068',
				'country' => 'BO',
			),
			array(
				'name'    => 'Brazilian Real',
				'alpha3'  => 'BRL',
				'numeric' => '986',
				'country' => 'BR',
			),
			array(
				'name'    => 'Bahamian Dollar',
				'alpha3'  => 'BSD',
				'numeric' => '044',
				'country' => 'BS',
			),
			array(
				'name'    => 'Bhutanese Ngultrum',
				'alpha3'  => 'BTN',
				'numeric' => '064',
				'country' => 'BT',
			),
			array(
				'name'    => 'Botswana Pula',
				'alpha3'  => 'BWP',
				'numeric' => '072',
				'country' => array(
					'BW',
					'ZW',
				),
			),
			array(
				'name'    => 'Belarussian Ruble',
				'alpha3'  => 'BYN',
				'numeric' => '933',
				'country' => 'BY',
			),
			array(
				'name'    => 'Belize Dollar',
				'alpha3'  => 'BZD',
				'numeric' => '084',
				'country' => 'BZ',
			),
			array(
				'name'    => 'Canadian Dollar',
				'alpha3'  => 'CAD',
				'numeric' => '124',
				'country' => 'CA',
			),
			array(
				'name'    => 'Congolese Franc',
				'alpha3'  => 'CDF',
				'numeric' => '976',
				'country' => 'CD',
			),
			array(
				'name'    => 'Swiss Franc',
				'alpha3'  => 'CHF',
				'numeric' => '756',
				'country' => array(
					'CH',
					'LI',
				),
			),
			array(
				'name'    => 'Chilean Peso',
				'alpha3'  => 'CLP',
				'numeric' => '152',
				'country' => 'CL',
			),
			array(
				'name'    => 'Chinese Yuan',
				'alpha3'  => 'CNY',
				'numeric' => '156',
				'country' => 'CN',
			),
			array(
				'name'    => 'Colombian Peso',
				'alpha3'  => 'COP',
				'numeric' => '170',
				'country' => 'CO',
			),
			array(
				'name'    => 'Costa Rican Colon',
				'alpha3'  => 'CRC',
				'numeric' => '188',
				'country' => 'CR',
			),
			array(
				'name'    => 'Cuban Convertible Peso',
				'alpha3'  => 'CUC',
				'numeric' => '931',
				'country' => 'CU',
			),
			array(
				'name'    => 'Cuban Peso',
				'alpha3'  => 'CUP',
				'numeric' => '192',
				'country' => 'CU',
			),
			array(
				'name'    => 'Cape Verde Escudo',
				'alpha3'  => 'CVE',
				'numeric' => '132',
				'country' => 'CV',
			),
			array(
				'name'    => 'Czech Koruna',
				'alpha3'  => 'CZK',
				'numeric' => '203',
				'country' => 'CZ',
			),
			array(
				'name'    => 'Djiboutian Franc',
				'alpha3'  => 'DJF',
				'numeric' => '262',
				'country' => 'DJ',
			),
			array(
				'name'    => 'Danish Krone',
				'alpha3'  => 'DKK',
				'numeric' => '208',
				'country' => array(
					'DK',
					'FO',
					'GL',
				),
			),
			array(
				'name'    => 'Dominican Peso',
				'alpha3'  => 'DOP',
				'numeric' => '214',
				'country' => 'DO',
			),
			array(
				'name'    => 'Algerian Dinar',
				'alpha3'  => 'DZD',
				'numeric' => '012',
				'country' => 'DZ',
			),
			array(
				'name'    => 'Egyptian Pound',
				'alpha3'  => 'EGP',
				'numeric' => '818',
				'country' => 'EG',
			),
			array(
				'name'    => 'Eritrean Nakfa',
				'alpha3'  => 'ERN',
				'numeric' => '232',
				'country' => 'ER',
			),
			array(
				'name'    => 'Ethiopian Birr',
				'alpha3'  => 'ETB',
				'numeric' => '230',
				'country' => 'ET',
			),
			array(
				'name'    => 'Euro',
				'alpha3'  => 'EUR',
				'numeric' => '978',
				'country' => array(
					'AD',
					'AT',
					'AX',
					'BE',
					'BL',
					'CY',
					'DE',
					'ES',
					'FI',
					'FR',
					'GF',
					'GP',
					'GR',
					'IE',
					'IT',
					'LT',
					'LU',
					'MC',
					'ME',
					'MF',
					'MQ',
					'MT',
					'NL',
					'PM',
					'PT',
					'RE',
					'SI',
					'SK',
					'SM',
					'TF',
					'VA',
					'YT',
					'ZW',
				),
			),
			array(
				'name'    => 'Fiji Dollar',
				'alpha3'  => 'FJD',
				'numeric' => '242',
				'country' => 'FJ',
			),
			array(
				'name'    => 'Falkland Islands Pound',
				'alpha3'  => 'FKP',
				'numeric' => '238',
				'country' => 'FK',
			),
			array(
				'name'    => 'Pound Sterling',
				'alpha3'  => 'GBP',
				'numeric' => '826',
				'country' => array(
					'GB',
					'GG',
					'GS',
					'IM',
					'IO',
					'JE',
					'ZW',
				),
			),
			array(
				'name'    => 'Georgian Lari',
				'alpha3'  => 'GEL',
				'numeric' => '981',
				'country' => 'GE',
			),
			array(
				'name'    => 'Ghanaian Cedi',
				'alpha3'  => 'GHS',
				'numeric' => '936',
				'country' => 'GH',
			),
			array(
				'name'    => 'Gibraltar Pound',
				'alpha3'  => 'GIP',
				'numeric' => '292',
				'country' => 'GI',
			),
			array(
				'name'    => 'Gambian Dalasi',
				'alpha3'  => 'GMD',
				'numeric' => '270',
				'country' => 'GM',
			),
			array(
				'name'    => 'Guinean Franc',
				'alpha3'  => 'GNF',
				'numeric' => '324',
				'country' => 'GN',
			),
			array(
				'name'    => 'Guatemalan Quetzal',
				'alpha3'  => 'GTQ',
				'numeric' => '320',
				'country' => 'GT',
			),
			array(
				'name'    => 'Guyanese Dollar',
				'alpha3'  => 'GYD',
				'numeric' => '328',
				'country' => 'GY',
			),
			array(
				'name'    => 'Hong Kong Dollar',
				'alpha3'  => 'HKD',
				'numeric' => '344',
				'country' => 'HK',
			),
			array(
				'name'    => 'Honduran Lempira',
				'alpha3'  => 'HNL',
				'numeric' => '340',
				'country' => 'HN',
			),
			array(
				'name'    => 'Kuna',
				'alpha3'  => 'HRK',
				'numeric' => '191',
				'country' => 'HR',
			),
			array(
				'name'    => 'Haitian Gourde',
				'alpha3'  => 'HTG',
				'numeric' => '332',
				'country' => 'HT',
			),
			array(
				'name'    => 'Hungarian Forint',
				'alpha3'  => 'HUF',
				'numeric' => '348',
				'country' => 'HU',
			),
			array(
				'name'    => 'Indonesian Rupiah',
				'alpha3'  => 'IDR',
				'numeric' => '360',
				'country' => 'ID',
			),
			array(
				'name'    => 'Israeli New Sheqel',
				'alpha3'  => 'ILS',
				'numeric' => '376',
				'country' => array(
					'IL',
					'PS',
				),
			),
			array(
				'name'    => 'Indian Rupee',
				'alpha3'  => 'INR',
				'numeric' => '356',
				'country' => 'IN',
			),
			array(
				'name'    => 'Iraqi Dinar',
				'alpha3'  => 'IQD',
				'numeric' => '368',
				'country' => 'IQ',
			),
			array(
				'name'    => 'Iranian Rial',
				'alpha3'  => 'IRR',
				'numeric' => '364',
				'country' => 'IR',
			),
			array(
				'name'    => 'Icelandic Króna',
				'alpha3'  => 'ISK',
				'numeric' => '352',
				'country' => 'IS',
			),
			array(
				'name'    => 'Jamaican Dollar',
				'alpha3'  => 'JMD',
				'numeric' => '388',
				'country' => 'JM',
			),
			array(
				'name'    => 'Jordanian Dinar',
				'alpha3'  => 'JOD',
				'numeric' => '400',
				'country' => 'JO',
			),
			array(
				'name'    => 'Japanese Yen',
				'alpha3'  => 'JPY',
				'numeric' => '392',
				'country' => 'JP',
			),
			array(
				'name'    => 'Kenyan Shilling',
				'alpha3'  => 'KES',
				'numeric' => '404',
				'country' => 'KE',
			),
			array(
				'name'    => 'Kyrgyzstani Som',
				'alpha3'  => 'KGS',
				'numeric' => '417',
				'country' => 'KG',
			),
			array(
				'name'    => 'Cambodian Riel',
				'alpha3'  => 'KHR',
				'numeric' => '116',
				'country' => 'KH',
			),
			array(
				'name'    => 'Comoro Franc',
				'alpha3'  => 'KMF',
				'numeric' => '174',
				'country' => 'KM',
			),
			array(
				'name'    => 'North Korean Won',
				'alpha3'  => 'KPW',
				'numeric' => '408',
				'country' => 'KP',
			),
			array(
				'name'    => 'South Korean Won',
				'alpha3'  => 'KRW',
				'numeric' => '410',
				'country' => 'KR',
			),
			array(
				'name'    => 'Kuwaiti Dinar',
				'alpha3'  => 'KWD',
				'numeric' => '414',
				'country' => 'KW',
			),
			array(
				'name'    => 'Cayman Islands Dollar',
				'alpha3'  => 'KYD',
				'numeric' => '136',
				'country' => 'KY',
			),
			array(
				'name'    => 'Kazakhstani Tenge',
				'alpha3'  => 'KZT',
				'numeric' => '398',
				'country' => 'KZ',
			),
			array(
				'name'    => 'Lao Kip',
				'alpha3'  => 'LAK',
				'numeric' => '418',
				'country' => 'LA',
			),
			array(
				'name'    => 'Lebanese Pound',
				'alpha3'  => 'LBP',
				'numeric' => '422',
				'country' => 'LB',
			),
			array(
				'name'    => 'Sri Lankan Rupee',
				'alpha3'  => 'LKR',
				'numeric' => '144',
				'country' => 'LK',
			),
			array(
				'name'    => 'Liberian Dollar',
				'alpha3'  => 'LRD',
				'numeric' => '430',
				'country' => 'LR',
			),
			array(
				'name'    => 'Lesotho Loti',
				'alpha3'  => 'LSL',
				'numeric' => '426',
				'country' => 'LS',
			),
			array(
				'name'    => 'Latvian Lats',
				'alpha3'  => 'LVL',
				'numeric' => '428',
				'country' => 'LV',
			),
			array(
				'name'    => 'Libyan Dinar',
				'alpha3'  => 'LYD',
				'numeric' => '434',
				'country' => 'LY',
			),
			array(
				'name'    => 'Moroccan Dirham',
				'alpha3'  => 'MAD',
				'numeric' => '504',
				'country' => array(
					'EH',
					'MA',
				),
			),
			array(
				'name'    => 'Moldovan Leu',
				'alpha3'  => 'MDL',
				'numeric' => '498',
				'country' => 'MD',
			),
			array(
				'name'    => 'Malagasy Ariary',
				'alpha3'  => 'MGA',
				'numeric' => '969',
				'country' => 'MG',
			),
			array(
				'name'    => 'Macedonian Denar',
				'alpha3'  => 'MKD',
				'numeric' => '807',
				'country' => 'MK',
			),
			array(
				'name'    => 'Myanmar Kyat',
				'alpha3'  => 'MMK',
				'numeric' => '104',
				'country' => 'MM',
			),
			array(
				'name'    => 'Mongolian Tugrik',
				'alpha3'  => 'MNT',
				'numeric' => '496',
				'country' => 'MN',
			),
			array(
				'name'    => 'Macanese Pataca',
				'alpha3'  => 'MOP',
				'numeric' => '446',
				'country' => 'MO',
			),
			array(
				'name'    => 'Mauritanian Ouguiya',
				'alpha3'  => 'MRO',
				'numeric' => '478',
				'country' => 'MR',
			),
			array(
				'name'    => 'Mauritian Rupee',
				'alpha3'  => 'MUR',
				'numeric' => '480',
				'country' => 'MU',
			),
			array(
				'name'    => 'Maldivian Rufiyaa',
				'alpha3'  => 'MVR',
				'numeric' => '462',
				'country' => 'MV',
			),
			array(
				'name'    => 'Malawian Kwacha',
				'alpha3'  => 'MWK',
				'numeric' => '454',
				'country' => 'MW',
			),
			array(
				'name'    => 'Mexican Peso',
				'alpha3'  => 'MXN',
				'numeric' => '484',
				'country' => 'MX',
			),
			array(
				'name'    => 'Malaysian Ringgit',
				'alpha3'  => 'MYR',
				'numeric' => '458',
				'country' => 'MY',
			),
			array(
				'name'    => 'Mozambican Metical',
				'alpha3'  => 'MZN',
				'numeric' => '943',
				'country' => 'MZ',
			),
			array(
				'name'    => 'Namibian Dollar',
				'alpha3'  => 'NAD',
				'numeric' => '516',
				'country' => 'NA',
			),
			array(
				'name'    => 'Nigerian Naira',
				'alpha3'  => 'NGN',
				'numeric' => '566',
				'country' => 'NG',
			),
			array(
				'name'    => 'Nicaraguan Córdoba',
				'alpha3'  => 'NIO',
				'numeric' => '558',
				'country' => 'NI',
			),
			array(
				'name'    => 'Norwegian Krone',
				'alpha3'  => 'NOK',
				'numeric' => '578',
				'country' => array(
					'AQ',
					'BV',
					'NO',
					'SJ',
				),
			),
			array(
				'name'    => 'Nepalese Rupee',
				'alpha3'  => 'NPR',
				'numeric' => '524',
				'country' => 'NP',
			),
			array(
				'name'    => 'New Zealand Dollar',
				'alpha3'  => 'NZD',
				'numeric' => '554',
				'country' => array(
					'CK',
					'NU',
					'NZ',
					'PN',
					'TK',
				),
			),
			array(
				'name'    => 'Omani Rial',
				'alpha3'  => 'OMR',
				'numeric' => '512',
				'country' => 'OM',
			),
			array(
				'name'    => 'Panamanian Balboa',
				'alpha3'  => 'PAB',
				'numeric' => '590',
				'country' => 'PA',
			),
			array(
				'name'    => 'Peruvian Nuevo Sol',
				'alpha3'  => 'PEN',
				'numeric' => '604',
				'country' => 'PE',
			),
			array(
				'name'    => 'Papua New Guinean Kina',
				'alpha3'  => 'PGK',
				'numeric' => '598',
				'country' => 'PG',
			),
			array(
				'name'    => 'Philippine Peso',
				'alpha3'  => 'PHP',
				'numeric' => '608',
				'country' => 'PH',
			),
			array(
				'name'    => 'Pakistani Rupee',
				'alpha3'  => 'PKR',
				'numeric' => '586',
				'country' => 'PK',
			),
			array(
				'name'    => 'Polish Zloty',
				'alpha3'  => 'PLN',
				'numeric' => '985',
				'country' => 'PL',
			),
			array(
				'name'    => 'Paraguayan Guarani',
				'alpha3'  => 'PYG',
				'numeric' => '600',
				'country' => 'PY',
			),
			array(
				'name'    => 'Qatari Rial',
				'alpha3'  => 'QAR',
				'numeric' => '634',
				'country' => 'QA',
			),
			array(
				'name'    => 'Romanian Leu',
				'alpha3'  => 'RON',
				'numeric' => '946',
				'country' => 'RO',
			),
			array(
				'name'    => 'Serbian Dinar',
				'alpha3'  => 'RSD',
				'numeric' => '941',
				'country' => 'RS',
			),
			array(
				'name'    => 'Russian Ruble',
				'alpha3'  => 'RUB',
				'numeric' => '643',
				'country' => 'RU',
			),
			array(
				'name'    => 'Rwandan Franc',
				'alpha3'  => 'RWF',
				'numeric' => '646',
				'country' => 'RW',
			),
			array(
				'name'    => 'Saudi Riyal',
				'alpha3'  => 'SAR',
				'numeric' => '682',
				'country' => 'SA',
			),
			array(
				'name'    => 'Solomon Islands Dollar',
				'alpha3'  => 'SBD',
				'numeric' => '090',
				'country' => 'SB',
			),
			array(
				'name'    => 'Seychelles Rupee',
				'alpha3'  => 'SCR',
				'numeric' => '690',
				'country' => 'SC',
			),
			array(
				'name'    => 'Sudanese Pound',
				'alpha3'  => 'SDG',
				'numeric' => '938',
				'country' => 'SD',
			),
			array(
				'name'    => 'Swedish Krona',
				'alpha3'  => 'SEK',
				'numeric' => '752',
				'country' => 'SE',
			),
			array(
				'name'    => 'Singapore Dollar',
				'alpha3'  => 'SGD',
				'numeric' => '702',
				'country' => array(
					'BN',
					'SG',
				),
			),
			array(
				'name'    => 'Saint Helena Pound',
				'alpha3'  => 'SHP',
				'numeric' => '654',
				'country' => 'SH',
			),
			array(
				'name'    => 'Sierra Leonean Leone',
				'alpha3'  => 'SLL',
				'numeric' => '694',
				'country' => 'SL',
			),
			array(
				'name'    => 'Somali Shilling',
				'alpha3'  => 'SOS',
				'numeric' => '706',
				'country' => 'SO',
			),
			array(
				'name'    => 'Surinamese Dollar',
				'alpha3'  => 'SRD',
				'numeric' => '968',
				'country' => 'SR',
			),
			array(
				'name'    => 'South Sudanese Pound',
				'alpha3'  => 'SSP',
				'numeric' => '728',
				'country' => 'SS',
			),
			array(
				'name'    => 'São Tomé and Principe Dobra',
				'alpha3'  => 'STD',
				'numeric' => '678',
				'country' => 'ST',
			),
			array(
				'name'    => 'Syrian Pound',
				'alpha3'  => 'SYP',
				'numeric' => '760',
				'country' => 'SY',
			),
			array(
				'name'    => 'Swazi Lilangeni',
				'alpha3'  => 'SZL',
				'numeric' => '748',
				'country' => 'SZ',
			),
			array(
				'name'    => 'Thai Baht',
				'alpha3'  => 'THB',
				'numeric' => '764',
				'country' => 'TH',
			),
			array(
				'name'    => 'Tajikistani Somoni',
				'alpha3'  => 'TJS',
				'numeric' => '972',
				'country' => 'TJ',
			),
			array(
				'name'    => 'Turkmenistani Manat',
				'alpha3'  => 'TMT',
				'numeric' => '934',
				'country' => 'TM',
			),
			array(
				'name'    => 'Tunisian Dinar',
				'alpha3'  => 'TND',
				'numeric' => '788',
				'country' => 'TN',
			),
			array(
				'name'    => 'Tongan Paʻanga',
				'alpha3'  => 'TOP',
				'numeric' => '776',
				'country' => 'TO',
			),
			array(
				'name'    => 'Turkish Lira',
				'alpha3'  => 'TRY',
				'numeric' => '949',
				'country' => 'TR',
			),
			array(
				'name'    => 'Trinidad and Tobago Dollar',
				'alpha3'  => 'TTD',
				'numeric' => '780',
				'country' => 'TT',
			),
			array(
				'name'    => 'New Taiwan Dollar',
				'alpha3'  => 'TWD',
				'numeric' => '901',
				'country' => 'TW',
			),
			array(
				'name'    => 'Tanzanian Shilling',
				'alpha3'  => 'TZS',
				'numeric' => '834',
				'country' => 'TZ',
			),
			array(
				'name'    => 'Ukrainian Hryvnia',
				'alpha3'  => 'UAH',
				'numeric' => '980',
				'country' => 'UA',
			),
			array(
				'name'    => 'Ugandan Shilling',
				'alpha3'  => 'UGX',
				'numeric' => '800',
				'country' => 'UG',
			),
			array(
				'name'    => 'US Dollar',
				'alpha3'  => 'USD',
				'numeric' => '840',
				'country' => array(
					'AS',
					'BQ',
					'EC',
					'FM',
					'GU',
					'MF',
					'MH',
					'MP',
					'PR',
					'PW',
					'SV',
					'TC',
					'TL',
					'UM',
					'US',
					'VG',
					'VI',
					'ZW',
				),
			),
			array(
				'name'    => 'Uruguayan Peso',
				'alpha3'  => 'UYU',
				'numeric' => '858',
				'country' => 'UY',
			),
			array(
				'name'    => 'Uzbekistan Som',
				'alpha3'  => 'UZS',
				'numeric' => '860',
				'country' => 'UZ',
			),
			array(
				'name'    => 'Venezuelan Bolivar',
				'alpha3'  => 'VEF',
				'numeric' => '937',
				'country' => 'VE',
			),
			array(
				'name'    => 'Vietnamese Dong',
				'alpha3'  => 'VND',
				'numeric' => '704',
				'country' => 'VN',
			),
			array(
				'name'    => 'Vanuatu Vatu',
				'alpha3'  => 'VUV',
				'numeric' => '548',
				'country' => 'VU',
			),
			array(
				'name'    => 'Samoan Tala',
				'alpha3'  => 'WST',
				'numeric' => '882',
				'country' => 'WS',
			),
			array(
				'name'    => 'CFA Franc BEAC',
				'alpha3'  => 'XAF',
				'numeric' => '950',
				'country' => array(
					'CF',
					'CG',
					'CM',
					'GA',
					'GQ',
					'TD',
				),
			),
			array(
				'name'    => 'East Caribbean Dollar',
				'alpha3'  => 'XCD',
				'numeric' => '951',
				'country' => array(
					'AG',
					'AI',
					'DM',
					'GD',
					'KN',
					'LC',
					'MS',
					'VC',
				),
			),
			array(
				'name'    => 'CFA Franc BCEAO',
				'alpha3'  => 'XOF',
				'numeric' => '952',
				'country' => array(
					'BJ',
					'BF',
					'CI',
					'GW',
					'ML',
					'NE',
					'SN',
					'TG',
				),
			),
			array(
				'name'    => 'CFP Franc',
				'alpha3'  => 'XPF',
				'numeric' => '953',
				'country' => array(
					'NC',
					'PF',
					'WF',
				),
			),
			array(
				'name'    => 'Yemeni Rial',
				'alpha3'  => 'YER',
				'numeric' => '886',
				'country' => 'YE',
			),
			array(
				'name'    => 'South African Rand',
				'alpha3'  => 'ZAR',
				'numeric' => '710',
				'country' => array(
					'NA',
					'LS',
					'SZ',
					'ZA',
					'ZW',
				),
			),
			array(
				'name'    => 'Zambian Kwacha',
				'alpha3'  => 'ZMW',
				'numeric' => '967',
				'country' => 'ZM',
			),
		);
	}

	/**
	 * @return array
	 */
	public static function lists() {
		$response = array();
		foreach ( static::currencies() as $key => $data ) {
			$response[ $data['alpha3'] ] = $data['name'];
		}
		return $response;
	}

	/**
	 * @param $alpha3
	 *
	 * @return mixed|null
	 */
	public static function getCurrency( $alpha3 ) {
		$response = array();
		foreach ( static::currencies() as $key => $data ) {
			if ( $data['alpha3'] == $alpha3 ) {
				return $data;
			}
		}
		return null;
	}
}
class-mailchimp-woocommerce-api-locales.php                                                                                                                                                                                                                    17556         1711191352  plugins/mailchimp-for-woocommerce/includes/api/helpers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/12/16
 * Time: 2:07 PM
 */
class MailChimp_Api_Locales {

	/**
	 * @return array
	 */
	public static function all() {
		return array(
			'af_NA'       => 'Afrikaans (Namibia)',
			'af_ZA'       => 'Afrikaans (South Africa)',
			'af'          => 'Afrikaans',
			'ak_GH'       => 'Akan (Ghana)',
			'ak'          => 'Akan',
			'sq_AL'       => 'Albanian (Albania)',
			'sq'          => 'Albanian',
			'am_ET'       => 'Amharic (Ethiopia)',
			'am'          => 'Amharic',
			'ar_DZ'       => 'Arabic (Algeria)',
			'ar_BH'       => 'Arabic (Bahrain)',
			'ar_EG'       => 'Arabic (Egypt)',
			'ar_IQ'       => 'Arabic (Iraq)',
			'ar_JO'       => 'Arabic (Jordan)',
			'ar_KW'       => 'Arabic (Kuwait)',
			'ar_LB'       => 'Arabic (Lebanon)',
			'ar_LY'       => 'Arabic (Libya)',
			'ar_MA'       => 'Arabic (Morocco)',
			'ar_OM'       => 'Arabic (Oman)',
			'ar_QA'       => 'Arabic (Qatar)',
			'ar_SA'       => 'Arabic (Saudi Arabia)',
			'ar_SD'       => 'Arabic (Sudan)',
			'ar_SY'       => 'Arabic (Syria)',
			'ar_TN'       => 'Arabic (Tunisia)',
			'ar_AE'       => 'Arabic (United Arab Emirates)',
			'ar_YE'       => 'Arabic (Yemen)',
			'ar'          => 'Arabic',
			'hy_AM'       => 'Armenian (Armenia)',
			'hy'          => 'Armenian',
			'as_IN'       => 'Assamese (India)',
			'as'          => 'Assamese',
			'asa_TZ'      => 'Asu (Tanzania)',
			'asa'         => 'Asu',
			'az_Cyrl'     => 'Azerbaijani (Cyrillic)',
			'az_Cyrl_AZ'  => 'Azerbaijani (Cyrillic, Azerbaijan)',
			'az_Latn'     => 'Azerbaijani (Latin)',
			'az_Latn_AZ'  => 'Azerbaijani (Latin, Azerbaijan)',
			'az'          => 'Azerbaijani',
			'bm_ML'       => 'Bambara (Mali)',
			'bm'          => 'Bambara',
			'eu_ES'       => 'Basque (Spain)',
			'eu'          => 'Basque',
			'be_BY'       => 'Belarusian (Belarus)',
			'be'          => 'Belarusian',
			'bem_ZM'      => 'Bemba (Zambia)',
			'bem'         => 'Bemba',
			'bez_TZ'      => 'Bena (Tanzania)',
			'bez'         => 'Bena',
			'bn_BD'       => 'Bengali (Bangladesh)',
			'bn_IN'       => 'Bengali (India)',
			'bn'          => 'Bengali',
			'bs_BA'       => 'Bosnian (Bosnia and Herzegovina)',
			'bs'          => 'Bosnian',
			'bg_BG'       => 'Bulgarian (Bulgaria)',
			'bg'          => 'Bulgarian',
			'my_MM'       => 'Burmese (Myanmar [Burma])',
			'my'          => 'Burmese',
			'ca_ES'       => 'Catalan (Spain)',
			'ca'          => 'Catalan',
			'tzm_Latn'    => 'Central Morocco Tamazight (Latin)',
			'tzm_Latn_MA' => 'Central Morocco Tamazight (Latin, Morocco)',
			'tzm'         => 'Central Morocco Tamazight',
			'chr_US'      => 'Cherokee (United States)',
			'chr'         => 'Cherokee',
			'cgg_UG'      => 'Chiga (Uganda)',
			'cgg'         => 'Chiga',
			'zh_Hans'     => 'Chinese (Simplified Han)',
			'zh_Hans_CN'  => 'Chinese (Simplified Han, China)',
			'zh_Hans_HK'  => 'Chinese (Simplified Han, Hong Kong SAR China)',
			'zh_Hans_MO'  => 'Chinese (Simplified Han, Macau SAR China)',
			'zh_Hans_SG'  => 'Chinese (Simplified Han, Singapore)',
			'zh_Hant'     => 'Chinese (Traditional Han)',
			'zh_Hant_HK'  => 'Chinese (Traditional Han, Hong Kong SAR China)',
			'zh_Hant_MO'  => 'Chinese (Traditional Han, Macau SAR China)',
			'zh_Hant_TW'  => 'Chinese (Traditional Han, Taiwan)',
			'zh'          => 'Chinese',
			'kw_GB'       => 'Cornish (United Kingdom)',
			'kw'          => 'Cornish',
			'hr_HR'       => 'Croatian (Croatia)',
			'hr'          => 'Croatian',
			'cs_CZ'       => 'Czech (Czech Republic)',
			'cs'          => 'Czech',
			'da_DK'       => 'Danish (Denmark)',
			'da'          => 'Danish',
			'nl_BE'       => 'Dutch (Belgium)',
			'nl_NL'       => 'Dutch (Netherlands)',
			'nl'          => 'Dutch',
			'ebu_KE'      => 'Embu (Kenya)',
			'ebu'         => 'Embu',
			'en_AS'       => 'English (American Samoa)',
			'en_AU'       => 'English (Australia)',
			'en_BE'       => 'English (Belgium)',
			'en_BZ'       => 'English (Belize)',
			'en_BW'       => 'English (Botswana)',
			'en_CA'       => 'English (Canada)',
			'en_GU'       => 'English (Guam)',
			'en_HK'       => 'English (Hong Kong SAR China)',
			'en_IN'       => 'English (India)',
			'en_IE'       => 'English (Ireland)',
			'en_JM'       => 'English (Jamaica)',
			'en_MT'       => 'English (Malta)',
			'en_MH'       => 'English (Marshall Islands)',
			'en_MU'       => 'English (Mauritius)',
			'en_NA'       => 'English (Namibia)',
			'en_NZ'       => 'English (New Zealand)',
			'en_MP'       => 'English (Northern Mariana Islands)',
			'en_PK'       => 'English (Pakistan)',
			'en_PH'       => 'English (Philippines)',
			'en_SG'       => 'English (Singapore)',
			'en_ZA'       => 'English (South Africa)',
			'en_TT'       => 'English (Trinidad and Tobago)',
			'en_UM'       => 'English (U.S. Minor Outlying Islands)',
			'en_VI'       => 'English (U.S. Virgin Islands)',
			'en_GB'       => 'English (United Kingdom)',
			'en_US'       => 'English (United States)',
			'en_ZW'       => 'English (Zimbabwe)',
			'en'          => 'English',
			'eo'          => 'Esperanto',
			'et_EE'       => 'Estonian (Estonia)',
			'et'          => 'Estonian',
			'ee_GH'       => 'Ewe (Ghana)',
			'ee_TG'       => 'Ewe (Togo)',
			'ee'          => 'Ewe',
			'fo_FO'       => 'Faroese (Faroe Islands)',
			'fo'          => 'Faroese',
			'fil_PH'      => 'Filipino (Philippines)',
			'fil'         => 'Filipino',
			'fi_FI'       => 'Finnish (Finland)',
			'fi'          => 'Finnish',
			'fr_BE'       => 'French (Belgium)',
			'fr_BJ'       => 'French (Benin)',
			'fr_BF'       => 'French (Burkina Faso)',
			'fr_BI'       => 'French (Burundi)',
			'fr_CM'       => 'French (Cameroon)',
			'fr_CA'       => 'French (Canada)',
			'fr_CF'       => 'French (Central African Republic)',
			'fr_TD'       => 'French (Chad)',
			'fr_KM'       => 'French (Comoros)',
			'fr_CG'       => 'French (Congo - Brazzaville)',
			'fr_CD'       => 'French (Congo - Kinshasa)',
			'fr_CI'       => 'French (Côte d’Ivoire)',
			'fr_DJ'       => 'French (Djibouti)',
			'fr_GQ'       => 'French (Equatorial Guinea)',
			'fr_FR'       => 'French (France)',
			'fr_GA'       => 'French (Gabon)',
			'fr_GP'       => 'French (Guadeloupe)',
			'fr_GN'       => 'French (Guinea)',
			'fr_LU'       => 'French (Luxembourg)',
			'fr_MG'       => 'French (Madagascar)',
			'fr_ML'       => 'French (Mali)',
			'fr_MQ'       => 'French (Martinique)',
			'fr_MC'       => 'French (Monaco)',
			'fr_NE'       => 'French (Niger)',
			'fr_RW'       => 'French (Rwanda)',
			'fr_RE'       => 'French (Réunion)',
			'fr_BL'       => 'French (Saint Barthélemy)',
			'fr_MF'       => 'French (Saint Martin)',
			'fr_SN'       => 'French (Senegal)',
			'fr_CH'       => 'French (Switzerland)',
			'fr_TG'       => 'French (Togo)',
			'fr'          => 'French',
			'ff_SN'       => 'Fulah (Senegal)',
			'ff'          => 'Fulah',
			'gl_ES'       => 'Galician (Spain)',
			'gl'          => 'Galician',
			'lg_UG'       => 'Ganda (Uganda)',
			'lg'          => 'Ganda',
			'ka_GE'       => 'Georgian (Georgia)',
			'ka'          => 'Georgian',
			'de_AT'       => 'German (Austria)',
			'de_BE'       => 'German (Belgium)',
			'de_DE'       => 'German (Germany)',
			'de_LI'       => 'German (Liechtenstein)',
			'de_LU'       => 'German (Luxembourg)',
			'de_CH'       => 'German (Switzerland)',
			'de'          => 'German',
			'el_CY'       => 'Greek (Cyprus)',
			'el_GR'       => 'Greek (Greece)',
			'el'          => 'Greek',
			'gu_IN'       => 'Gujarati (India)',
			'gu'          => 'Gujarati',
			'guz_KE'      => 'Gusii (Kenya)',
			'guz'         => 'Gusii',
			'ha_Latn'     => 'Hausa (Latin)',
			'ha_Latn_GH'  => 'Hausa (Latin, Ghana)',
			'ha_Latn_NE'  => 'Hausa (Latin, Niger)',
			'ha_Latn_NG'  => 'Hausa (Latin, Nigeria)',
			'ha'          => 'Hausa',
			'haw_US'      => 'Hawaiian (United States)',
			'haw'         => 'Hawaiian',
			'he_IL'       => 'Hebrew (Israel)',
			'he'          => 'Hebrew',
			'hi_IN'       => 'Hindi (India)',
			'hi'          => 'Hindi',
			'hu_HU'       => 'Hungarian (Hungary)',
			'hu'          => 'Hungarian',
			'is_IS'       => 'Icelandic (Iceland)',
			'is'          => 'Icelandic',
			'ig_NG'       => 'Igbo (Nigeria)',
			'ig'          => 'Igbo',
			'id_ID'       => 'Indonesian (Indonesia)',
			'id'          => 'Indonesian',
			'ga_IE'       => 'Irish (Ireland)',
			'ga'          => 'Irish',
			'it_IT'       => 'Italian (Italy)',
			'it_CH'       => 'Italian (Switzerland)',
			'it'          => 'Italian',
			'ja_JP'       => 'Japanese (Japan)',
			'ja'          => 'Japanese',
			'kea_CV'      => 'Kabuverdianu (Cape Verde)',
			'kea'         => 'Kabuverdianu',
			'kab_DZ'      => 'Kabyle (Algeria)',
			'kab'         => 'Kabyle',
			'kl_GL'       => 'Kalaallisut (Greenland)',
			'kl'          => 'Kalaallisut',
			'kln_KE'      => 'Kalenjin (Kenya)',
			'kln'         => 'Kalenjin',
			'kam_KE'      => 'Kamba (Kenya)',
			'kam'         => 'Kamba',
			'kn_IN'       => 'Kannada (India)',
			'kn'          => 'Kannada',
			'kk_Cyrl'     => 'Kazakh (Cyrillic)',
			'kk_Cyrl_KZ'  => 'Kazakh (Cyrillic, Kazakhstan)',
			'kk'          => 'Kazakh',
			'km_KH'       => 'Khmer (Cambodia)',
			'km'          => 'Khmer',
			'ki_KE'       => 'Kikuyu (Kenya)',
			'ki'          => 'Kikuyu',
			'rw_RW'       => 'Kinyarwanda (Rwanda)',
			'rw'          => 'Kinyarwanda',
			'kok_IN'      => 'Konkani (India)',
			'kok'         => 'Konkani',
			'ko_KR'       => 'Korean (South Korea)',
			'ko'          => 'Korean',
			'khq_ML'      => 'Koyra Chiini (Mali)',
			'khq'         => 'Koyra Chiini',
			'ses_ML'      => 'Koyraboro Senni (Mali)',
			'ses'         => 'Koyraboro Senni',
			'lag_TZ'      => 'Langi (Tanzania)',
			'lag'         => 'Langi',
			'lv_LV'       => 'Latvian (Latvia)',
			'lv'          => 'Latvian',
			'lt_LT'       => 'Lithuanian (Lithuania)',
			'lt'          => 'Lithuanian',
			'luo_KE'      => 'Luo (Kenya)',
			'luo'         => 'Luo',
			'luy_KE'      => 'Luyia (Kenya)',
			'luy'         => 'Luyia',
			'mk_MK'       => 'Macedonian (Macedonia)',
			'mk'          => 'Macedonian',
			'jmc_TZ'      => 'Machame (Tanzania)',
			'jmc'         => 'Machame',
			'kde_TZ'      => 'Makonde (Tanzania)',
			'kde'         => 'Makonde',
			'mg_MG'       => 'Malagasy (Madagascar)',
			'mg'          => 'Malagasy',
			'ms_BN'       => 'Malay (Brunei)',
			'ms_MY'       => 'Malay (Malaysia)',
			'ms'          => 'Malay',
			'ml_IN'       => 'Malayalam (India)',
			'ml'          => 'Malayalam',
			'mt_MT'       => 'Maltese (Malta)',
			'mt'          => 'Maltese',
			'gv_GB'       => 'Manx (United Kingdom)',
			'gv'          => 'Manx',
			'mr_IN'       => 'Marathi (India)',
			'mr'          => 'Marathi',
			'mas_KE'      => 'Masai (Kenya)',
			'mas_TZ'      => 'Masai (Tanzania)',
			'mas'         => 'Masai',
			'mer_KE'      => 'Meru (Kenya)',
			'mer'         => 'Meru',
			'mfe_MU'      => 'Morisyen (Mauritius)',
			'mfe'         => 'Morisyen',
			'naq_NA'      => 'Nama (Namibia)',
			'naq'         => 'Nama',
			'ne_IN'       => 'Nepali (India)',
			'ne_NP'       => 'Nepali (Nepal)',
			'ne'          => 'Nepali',
			'nd_ZW'       => 'North Ndebele (Zimbabwe)',
			'nd'          => 'North Ndebele',
			'nb_NO'       => 'Norwegian Bokmål (Norway)',
			'nb'          => 'Norwegian Bokmål',
			'nn_NO'       => 'Norwegian Nynorsk (Norway)',
			'nn'          => 'Norwegian Nynorsk',
			'nyn_UG'      => 'Nyankole (Uganda)',
			'nyn'         => 'Nyankole',
			'or_IN'       => 'Oriya (India)',
			'or'          => 'Oriya',
			'om_ET'       => 'Oromo (Ethiopia)',
			'om_KE'       => 'Oromo (Kenya)',
			'om'          => 'Oromo',
			'ps_AF'       => 'Pashto (Afghanistan)',
			'ps'          => 'Pashto',
			'fa_AF'       => 'Persian (Afghanistan)',
			'fa_IR'       => 'Persian (Iran)',
			'fa'          => 'Persian',
			'pl_PL'       => 'Polish (Poland)',
			'pl'          => 'Polish',
			'pt_BR'       => 'Portuguese (Brazil)',
			'pt_GW'       => 'Portuguese (Guinea-Bissau)',
			'pt_MZ'       => 'Portuguese (Mozambique)',
			'pt_PT'       => 'Portuguese (Portugal)',
			'pt'          => 'Portuguese',
			'pa_Arab'     => 'Punjabi (Arabic)',
			'pa_Arab_PK'  => 'Punjabi (Arabic, Pakistan)',
			'pa_Guru'     => 'Punjabi (Gurmukhi)',
			'pa_Guru_IN'  => 'Punjabi (Gurmukhi, India)',
			'pa'          => 'Punjabi',
			'ro_MD'       => 'Romanian (Moldova)',
			'ro_RO'       => 'Romanian (Romania)',
			'ro'          => 'Romanian',
			'rm_CH'       => 'Romansh (Switzerland)',
			'rm'          => 'Romansh',
			'rof_TZ'      => 'Rombo (Tanzania)',
			'rof'         => 'Rombo',
			'ru_MD'       => 'Russian (Moldova)',
			'ru_RU'       => 'Russian (Russia)',
			'ru_UA'       => 'Russian (Ukraine)',
			'ru'          => 'Russian',
			'rwk_TZ'      => 'Rwa (Tanzania)',
			'rwk'         => 'Rwa',
			'saq_KE'      => 'Samburu (Kenya)',
			'saq'         => 'Samburu',
			'sg_CF'       => 'Sango (Central African Republic)',
			'sg'          => 'Sango',
			'seh_MZ'      => 'Sena (Mozambique)',
			'seh'         => 'Sena',
			'sr_Cyrl'     => 'Serbian (Cyrillic)',
			'sr_Cyrl_BA'  => 'Serbian (Cyrillic, Bosnia and Herzegovina)',
			'sr_Cyrl_ME'  => 'Serbian (Cyrillic, Montenegro)',
			'sr_Cyrl_RS'  => 'Serbian (Cyrillic, Serbia)',
			'sr_Latn'     => 'Serbian (Latin)',
			'sr_Latn_BA'  => 'Serbian (Latin, Bosnia and Herzegovina)',
			'sr_Latn_ME'  => 'Serbian (Latin, Montenegro)',
			'sr_Latn_RS'  => 'Serbian (Latin, Serbia)',
			'sr'          => 'Serbian',
			'sn_ZW'       => 'Shona (Zimbabwe)',
			'sn'          => 'Shona',
			'ii_CN'       => 'Sichuan Yi (China)',
			'ii'          => 'Sichuan Yi',
			'si_LK'       => 'Sinhala (Sri Lanka)',
			'si'          => 'Sinhala',
			'sk_SK'       => 'Slovak (Slovakia)',
			'sk'          => 'Slovak',
			'sl_SI'       => 'Slovenian (Slovenia)',
			'sl'          => 'Slovenian',
			'xog_UG'      => 'Soga (Uganda)',
			'xog'         => 'Soga',
			'so_DJ'       => 'Somali (Djibouti)',
			'so_ET'       => 'Somali (Ethiopia)',
			'so_KE'       => 'Somali (Kenya)',
			'so_SO'       => 'Somali (Somalia)',
			'so'          => 'Somali',
			'es_AR'       => 'Spanish (Argentina)',
			'es_BO'       => 'Spanish (Bolivia)',
			'es_CL'       => 'Spanish (Chile)',
			'es_CO'       => 'Spanish (Colombia)',
			'es_CR'       => 'Spanish (Costa Rica)',
			'es_DO'       => 'Spanish (Dominican Republic)',
			'es_EC'       => 'Spanish (Ecuador)',
			'es_SV'       => 'Spanish (El Salvador)',
			'es_GQ'       => 'Spanish (Equatorial Guinea)',
			'es_GT'       => 'Spanish (Guatemala)',
			'es_HN'       => 'Spanish (Honduras)',
			'es_419'      => 'Spanish (Latin America)',
			'es_MX'       => 'Spanish (Mexico)',
			'es_NI'       => 'Spanish (Nicaragua)',
			'es_PA'       => 'Spanish (Panama)',
			'es_PY'       => 'Spanish (Paraguay)',
			'es_PE'       => 'Spanish (Peru)',
			'es_PR'       => 'Spanish (Puerto Rico)',
			'es_ES'       => 'Spanish (Spain)',
			'es_US'       => 'Spanish (United States)',
			'es_UY'       => 'Spanish (Uruguay)',
			'es_VE'       => 'Spanish (Venezuela)',
			'es'          => 'Spanish',
			'sw_KE'       => 'Swahili (Kenya)',
			'sw_TZ'       => 'Swahili (Tanzania)',
			'sw'          => 'Swahili',
			'sv_FI'       => 'Swedish (Finland)',
			'sv_SE'       => 'Swedish (Sweden)',
			'sv'          => 'Swedish',
			'gsw_CH'      => 'Swiss German (Switzerland)',
			'gsw'         => 'Swiss German',
			'shi_Latn'    => 'Tachelhit (Latin)',
			'shi_Latn_MA' => 'Tachelhit (Latin, Morocco)',
			'shi_Tfng'    => 'Tachelhit (Tifinagh)',
			'shi_Tfng_MA' => 'Tachelhit (Tifinagh, Morocco)',
			'shi'         => 'Tachelhit',
			'dav_KE'      => 'Taita (Kenya)',
			'dav'         => 'Taita',
			'ta_IN'       => 'Tamil (India)',
			'ta_LK'       => 'Tamil (Sri Lanka)',
			'ta'          => 'Tamil',
			'te_IN'       => 'Telugu (India)',
			'te'          => 'Telugu',
			'teo_KE'      => 'Teso (Kenya)',
			'teo_UG'      => 'Teso (Uganda)',
			'teo'         => 'Teso',
			'th_TH'       => 'Thai (Thailand)',
			'th'          => 'Thai',
			'bo_CN'       => 'Tibetan (China)',
			'bo_IN'       => 'Tibetan (India)',
			'bo'          => 'Tibetan',
			'ti_ER'       => 'Tigrinya (Eritrea)',
			'ti_ET'       => 'Tigrinya (Ethiopia)',
			'ti'          => 'Tigrinya',
			'to_TO'       => 'Tonga (Tonga)',
			'to'          => 'Tonga',
			'tr_TR'       => 'Turkish (Turkey)',
			'tr'          => 'Turkish',
			'uk_UA'       => 'Ukrainian (Ukraine)',
			'uk'          => 'Ukrainian',
			'ur_IN'       => 'Urdu (India)',
			'ur_PK'       => 'Urdu (Pakistan)',
			'ur'          => 'Urdu',
			'uz_Arab'     => 'Uzbek (Arabic)',
			'uz_Arab_AF'  => 'Uzbek (Arabic, Afghanistan)',
			'uz_Cyrl'     => 'Uzbek (Cyrillic)',
			'uz_Cyrl_UZ'  => 'Uzbek (Cyrillic, Uzbekistan)',
			'uz_Latn'     => 'Uzbek (Latin)',
			'uz_Latn_UZ'  => 'Uzbek (Latin, Uzbekistan)',
			'uz'          => 'Uzbek',
			'vi_VN'       => 'Vietnamese (Vietnam)',
			'vi'          => 'Vietnamese',
			'vun_TZ'      => 'Vunjo (Tanzania)',
			'vun'         => 'Vunjo',
			'cy_GB'       => 'Welsh (United Kingdom)',
			'cy'          => 'Welsh',
			'yo_NG'       => 'Yoruba (Nigeria)',
			'yo'          => 'Yoruba',
			'zu_ZA'       => 'Zulu (South Africa)',
			'zu'          => 'Zulu',
		);
	}

	/**
	 * @return array
	 */
	public static function simple() {
		$response = array();
		foreach ( static::all() as $key => $value ) {
			if ( ! strpos( $key, '_' ) > 0 ) {
				$response[ $key ] = $value;
			}
		}
		return $response;
	}
}
class-mailchimp-woocommerce-activator.php                                                                                                                                                                                                                      3890          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php
/**
 * Fired during plugin activation.
 *
 * This class defines all code necessary to run during the plugin's activation.
 *
 * @since      1.0.1
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 * @author     Ryan Hungate <ryan@vextras.com>
 */
class MailChimp_WooCommerce_Activator {

	/**
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 * @since    1.0.0
	 */
	public static function activate() {

		// Create the queue tables
		static::create_queue_tables();

		// we shouldn't have to do this anymore.
		//static::migrate_jobs();

		// update the settings so we have them for use.
        $saved_options = get_option('mailchimp-woocommerce', false);

        // if we haven't saved options previously, we will need to create the site id and update base options
        if (empty($saved_options)) {
            mailchimp_clean_database();
            update_option('mailchimp-woocommerce', array());
            // only do this if the option has never been set before.
            if (!is_multisite()) {
                add_option('mailchimp_woocommerce_plugin_do_activation_redirect', true);
            }
        }

        // if we haven't saved the store id yet.
        $saved_store_id = get_option('mailchimp-woocommerce-store_id', false);
        if (empty($saved_store_id)) {
            // add a store id flag which will be a random hash
            update_option('mailchimp-woocommerce-store_id', uniqid(), 'yes');
        }

        if (class_exists('MailChimp_WooCommerce_MailChimpApi')) {
            // try this now for existing stores on an update.
            mailchimp_update_connected_site_script();
		}
		
		// set initial comm status
		mailchimp_update_communication_status();
	}

	/**
	 * Create the queue tables in the DB so we can use it for syncing.
	 */
	public static function create_queue_tables()
	{
		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );

		global $wpdb;

		$wpdb->hide_errors();

		$charset_collate = $wpdb->get_charset_collate();

		$sql = "CREATE TABLE IF NOT EXISTS {$wpdb->prefix}mailchimp_carts (
				id VARCHAR (255) NOT NULL,
				email VARCHAR (100) NOT NULL,
				user_id INT (11) DEFAULT NULL,
                cart text NOT NULL,
                created_at datetime NOT NULL,
				PRIMARY KEY  (email)
				) $charset_collate;";

		dbDelta( $sql );
		
		$sql = "CREATE TABLE IF NOT EXISTS {$wpdb->prefix}mailchimp_jobs (
			id bigint(20) NOT NULL AUTO_INCREMENT,
			obj_id text,
			job text NOT NULL,
			created_at datetime NOT NULL,
			PRIMARY KEY  (id)
			) $charset_collate;";

		dbDelta( $sql );

		// set the Mailchimp woocommerce version at the time of install
		update_site_option('mailchimp_woocommerce_version', mailchimp_environment_variables()->version);
	}

	/**
	 *
	 */
	public static function migrate_jobs() {
		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
		global $wpdb;
        if($wpdb->get_var("SHOW TABLES LIKE '{$wpdb->prefix}queue';") == $wpdb->prefix.'queue') {
			mailchimp_log('update.db','Migrating job to Action Scheduler');
			$sql = "SELECT * FROM {$wpdb->prefix}queue;";
			$queue_jobs = $wpdb->get_results($sql);
			foreach ($queue_jobs as $queue_job) {
				$job = unserialize($queue_job->job);
				$job->job = $job;
				$job->id = static::get_possible_job_ids($job);	
				mailchimp_as_push($job, 90);
			}
		}
	}

	/**
	 * @param $job
	 *
	 * @return null
	 */
	private static function get_possible_job_ids($job) {
		$id = null;
		
		if (isset($job->id)) $id = $job->id;
		if (isset($job->product_id)) $id = $job->product_id;
		if (isset($job->order_id)) $id = $job->order_id;
		if (isset($job->unique_id)) $id = $job->unique_id;
		if (isset($job->user_id)) $id = $job->user_id;
		if (isset($job->post_id)) $id = $job->post_id;
			
		return $id;
	}

}
class-mailchimp-woocommerce-block-editor.php                                                                                                                                                                                                                   314           1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

use Automattic\WooCommerce\Utilities\FeaturesUtil;

class Mailchimp_Woocommerce_Block_Editor {
	/**
	 * @return bool
	 */
	public static function enabled() {
		return class_exists( 'Automattic\WooCommerce\Utilities\FeaturesUtil' ) &&
		       FeaturesUtil::feature_is_enabled( 'product_block_editor' );
	}
}class-mailchimp-woocommerce-cli.php                                                                                                                                                                                                                            3791          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Manage Mailchimp for Woocommerce syncronization jobs.
 *
 * @package wp-cli
 */
class Mailchimp_Wocoomerce_CLI extends WP_CLI_Command {

    /**
     * Timestamp of when this worker started processing the queue.
     *
     * @var int
     */
    protected $start_time;
    protected $pid;
    protected $command_called;

    /**
     * Mailchimp_Wocoomerce_CLI constructor.
     */
    public function __construct()
    {
        $this->pid = getmypid();
    }

	/**
	 * @param $args
	 * @param array $assoc_args
	 */
    public function flush($args, $assoc_args = array())
    {
        global $wpdb;
        WP_CLI::confirm( "This will delete all current queued sync jobs, and entries from {$wpdb->prefix}mailchimp_jobs table. Are you sure?", $assoc_args );
        mailchimp_delete_as_jobs();
        $wpdb->query("DELETE FROM {$wpdb->prefix}mailchimp_jobs");
    }

    /**
     * Show all the records in the queue.
     */
    public function show()
    {
        global $wpdb;
        WP_CLI::log("Showing contents of {$wpdb->prefix}mailchimp_jobs"); 
        print_r($wpdb->get_results("SELECT * FROM {$wpdb->prefix}mailchimp_jobs"));
        exit;
    }

	/**
	 * @param $args
	 * @param array $assoc_args
	 */
	public function create_tables( $args, $assoc_args = array() ) {
		global $wpdb;
        install_mailchimp_queue();
		WP_CLI::success( "Table {$wpdb->prefix}queue created." );
	}

    /**
     * Run the queue listener to process jobs
     *
     * ## OPTIONS
     *
     * [--force=<0>]
     * : Whether to force execution despite the maximum number of concurrent processes being exceeded.
     *
     * ---
     *
     * ## EXAMPLES
     *
     *     wp queue listen --force=1
     *
     * ---
     *
     * @subcommand listen
     * @param $args
     * @param array $assoc_args
     */
	public function listen( $args, $assoc_args = array() ) {
        mailchimp_debug('cli.queue.listen.process','Starting command `action-scheduler run`'); 
        WP_CLI::warning(WP_CLI::colorize('%Wqueue listen%n').' command is deprecated since Mailchimp for Woocommerce version 2.3. Please use '.WP_CLI::colorize('%ywp action-scheduler run --group="mc-woocommerce%n"').' instead'); 
        WP_CLI::log('Starting sync'); 
        
        $force_arg = '';
        
        $force = (isset($assoc_args['force']) ? (bool) $assoc_args['force'] : null) === true;
        if ($force) {
            $force_arg = " --force=1 ";
        }

        $options = array(
            'return'     => true,   // Return 'STDOUT'; use 'all' for full object.
            //'parse'      => 'json', // Parse captured STDOUT to JSON array.
            'launch'     => true,  // Reuse the current process.
            'exit_error' => true,   // Halt script execution on error.
          );

        $command = 'action-scheduler run --group=mc-woocommerce'.$force_arg;
        $output = WP_CLI::runcommand( $command, $options );
        WP_CLI::log($output);  
        exit;
    }

	/**
	 * @param $args
	 * @param array $assoc_args
	 */
	public function work( $args, $assoc_args = array() ) {
        WP_CLI::warning(WP_CLI::colorize('%Wqueue work%n').' command is deprecated since Mailchimp for Woocommerce version 2.3. Please use '.WP_CLI::colorize('%ywp action-scheduler run --group="mc-woocommerce%n"').' instead'); 
        exit;
    }
    
	public function status( $args, $assoc_args = array() ) {
        WP_CLI::warning(WP_CLI::colorize('%Wqueue status%n').' command is deprecated since Mailchimp for Woocommerce version 2.3.'); 
        exit;
    }
    
	public function restart_failed( $args, $assoc_args = array() ) {
		WP_CLI::warning(WP_CLI::colorize('%Wqueue restart_failed%n').' command is deprecated since Mailchimp for Woocommerce version 2.3.'); 
        exit;
    }
}

class-mailchimp-woocommerce-deactivation-survey.php                                                                                                                                                                                                            13512         1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php
if ( ! class_exists( 'Mailchimp_Woocommerce_Deactivation_Survey', false ) ) {
	/**
	 * Awesome Motive Deactivation Survey.
	 *
	 * This prompts the user for more details when they deactivate the plugin.
	 *
	 * @version    1.2.1
	 * @package    AwesomeMotive
	 * @author     Jared Atchison and Chris Christoff (modified by Pedro Germani)
	 * @license    GPL-2.0+
	 * @copyright  Copyright (c) 2018
	 */
	class Mailchimp_Woocommerce_Deactivation_Survey {

		/**
		 * The API URL we are calling.
		 *
		 * @since 1.0.0
		 * @var string
		 */
		public $endpoint;

		/**
		 * Name for this plugin.
		 *
		 * @since 1.0.0
		 * @var string
		 */
		public $name;

		/**
		 * Unique slug for this plugin.
		 *
		 * @since 1.0.0
		 * @var string
		 */
		public $plugin;

		/**
		 * Primary class constructor.
		 *
		 * @since 1.0.0
		 * @param string $name Plugin name.
		 * @param string $plugin Plugin slug.
		 */
		public function __construct( $name = '', $plugin = '' ) {

			$this->name   = $name;
			$this->plugin = $plugin;
			$this->endpoint = get_rest_url(null, 'mailchimp-for-woocommerce/v1/survey/disconnect');

			// Don't run deactivation survey on dev sites.
			if ( $this->is_dev_url() ) {
				return;
			}

			add_action( 'admin_print_scripts', array( $this, 'js'    ), 20 );
			add_action( 'admin_print_scripts', array( $this, 'css'   )     );
			add_action( 'admin_footer',        array( $this, 'modal' )     );
		}

		/**
		 * Checks if current site is a development one.
		 *
		 * @since 1.2.0
		 * @return bool
		 */
		public function is_dev_url() {
			// If it is an AM dev site, return false, so we can see them on our dev sites.
			if ( defined ('AWESOMEMOTIVE_DEV_MODE' ) && AWESOMEMOTIVE_DEV_MODE ) {
				return false;
			}

			$url          = network_site_url( '/' );
    			$is_local_url = false;

			// Trim it up
			$url = strtolower( trim( $url ) );

			// Need to get the host...so let's add the scheme so we can use parse_url
			if ( false === strpos( $url, 'http://' ) && false === strpos( $url, 'https://' ) ) {
				$url = 'http://' . $url;
			}
			$url_parts = parse_url( $url );
			$host      = ! empty( $url_parts['host'] ) ? $url_parts['host'] : false;
			if ( ! empty( $url ) && ! empty( $host ) ) {
				if ( false !== ip2long( $host ) ) {
					if ( ! filter_var( $host, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ) ) {
						$is_local_url = true;
					}
				} else if ( 'localhost' === $host ) {
					$is_local_url = true;
				}

				$tlds_to_check = array( '.dev', '.local', ':8888' );
				foreach ( $tlds_to_check as $tld ) {
						if ( false !== strpos( $host, $tld ) ) {
							$is_local_url = true;
							continue;
						}

				}
				if ( substr_count( $host, '.' ) > 1 ) {
					$subdomains_to_check =  array( 'dev.', '*.staging.', 'beta.', 'test.' );
					foreach ( $subdomains_to_check as $subdomain ) {
						$subdomain = str_replace( '.', '(.)', $subdomain );
						$subdomain = str_replace( array( '*', '(.)' ), '(.*)', $subdomain );
						if ( preg_match( '/^(' . $subdomain . ')/', $host ) ) {
							$is_local_url = true;
							continue;
						}
					}
				}
			}
			return $is_local_url;
		}

		/**
		 * Checks if current admin screen is the plugins page.
		 *
		 * @since 1.0.0
		 * @return bool
		 */
		public function is_plugin_page() {
			$screen = function_exists( 'get_current_screen' ) ? get_current_screen() : false;
			if ( empty( $screen ) ) {
				return false;
			}
			return ( ! empty( $screen->id ) && in_array( $screen->id, array( 'plugins', 'plugins-network' ), true ) );
		}

		/**
		 *
		 */
		public function js() {

			if ( ! $this->is_plugin_page() ) {
				return;
			}
			?>
			<script type="text/javascript">
			jQuery(function($){
				var $deactivateLink = $('#the-list').find('[data-slug="<?php echo $this->plugin; ?>"] span.deactivate a'),
					$overlay        = $('#mailchimp-woocommerce-deactivate-survey-<?php echo $this->plugin; ?>'),
					$form           = $overlay.find('form'),
					formOpen        = false;
				// Plugin listing table deactivate link.
				$deactivateLink.on('click', function(event) {
					event.preventDefault();
					$overlay.css('display', 'table');
					formOpen = true;
					$form.find('.mailchimp-woocommerce-deactivate-survey-option:first-of-type input[type=radio]').focus();
				});
				// Survey radio option selected.
				$form.on('change', 'input[type=radio]', function(event) {
					event.preventDefault();
					$form.find('input[type=text], .error').hide();
					$form.find('.mailchimp-woocommerce-deactivate-survey-option').removeClass('selected');
					$(this).closest('.mailchimp-woocommerce-deactivate-survey-option').addClass('selected').find('input[type=text]').show();
				});
				// Survey Skip & Deactivate.
				$form.on('click', '.mailchimp-woocommerce-deactivate-survey-deactivate', function(event) {
					event.preventDefault();
					location.href = $deactivateLink.attr('href');
				});
				// close button
				$form.on('click', '.mailchimp-woocommerce-deactivate-survey-close', function(event) {
					event.preventDefault();
					$overlay.css('display', 'none');
					formOpen = false;
				});
				// Survey submit.
				$form.submit(function(event) {
					event.preventDefault();
					if (! $form.find('input[type=radio]:checked').val()) {
						$form.find('.mailchimp-woocommerce-deactivate-survey-footer').prepend('<span class="error"><?php echo esc_js( __( 'Please select an option', 'mailchimp-for-woocommerce' ) ); ?></span>');
						return;
					}
					$form.find('.mailchimp-woocommerce-deactivate-survey-submit').html('<?php echo esc_js( __( 'Sending Feedback', 'mailchimp-for-woocommerce' ) ); ?>').attr("disabled", true).removeClass('button-primary');
					var submitSurvey = $.ajax(
						{
							url: "<?php echo $this->endpoint; ?>",
							type: "POST",
							data: {
								id: '<?php echo mailchimp_get_store_id()?>',
								url: '<?php echo esc_url( home_url() ); ?>',
								data: {
									code: $form.find('.selected input[type=radio]').val(),
									reason: $form.find('.selected .mailchimp-woocommerce-deactivate-survey-option-reason').val(),
									details: $form.find('.selected input[type=text]').val(),
									plugin: '<?php echo sanitize_key( $this->name ); ?>'
								}
							},
							dataType: 'json',
							async: false,
							success: function(msg) {
								location.href = $deactivateLink.attr('href');
							}
						}
					)
				});

				// Exit key closes survey when open.
				$(document).keyup(function(event) {
					if (27 === event.keyCode && formOpen) {
						$overlay.hide();
						formOpen = false;
						$deactivateLink.focus();
					}
				});
			});
			</script>
			<?php
		}

		/**
		 * Survey CSS.
		 *
		 * @since 1.0.0
		 */
		public function css() {

			if ( ! $this->is_plugin_page() ) {
				return;
			}
			?>
			<style type="text/css">
			.mailchimp-woocommerce-deactivate-survey-modal {
				display: none;
				table-layout: fixed;
				position: fixed;
				z-index: 9999;
				width: 100%;
				height: 100%;
				text-align: center;
				font-size: 14px;
				top: 0;
				left: 0;
				background: rgba(0,0,0,0.8);
			}
			.mailchimp-woocommerce-deactivate-survey-wrap {
				display: table-cell;
				vertical-align: middle;
			}
			.mailchimp-woocommerce-deactivate-survey {
				background-color: #fff;
				max-width: 550px;
				margin: 0 auto;
				padding: 30px;
				text-align: left;
			}
			.mailchimp-woocommerce-deactivate-survey .error {
				display: block;
				color: red;
				margin: 0 0 10px 0;
			}
			.mailchimp-woocommerce-deactivate-survey-header {
				display: block;
				font-size: 18px;
				font-weight: 700;
				text-transform: uppercase;
				border-bottom: 1px solid #ddd;
				padding: 0 0 18px 0;
				margin: 0 0 18px 0;	
				position: relative;
			}
			.mailchimp-woocommerce-deactivate-survey-title {
				text-align: left;
			}
			.mailchimp-woocommerce-deactivate-survey-close {
				text-align: right;
				position: absolute;
				right: 0px;
				font-size: 24px;
				cursor: pointer;
			}
			.mailchimp-woocommerce-deactivate-survey-title span {
				color: #999;
				margin-right: 10px;
			}
			.mailchimp-woocommerce-deactivate-survey-desc {
				display: block;
				font-weight: 600;
				margin: 0 0 18px 0;
			}
			.mailchimp-woocommerce-deactivate-survey-option {
				margin: 0 0 10px 0;
			}
			.mailchimp-woocommerce-deactivate-survey-option-input {
				margin-right: 10px !important;
			}
			.mailchimp-woocommerce-deactivate-survey-option-details {
				display: none;
				width: 90%;
				margin: 10px 0 0 30px;
			}
			.mailchimp-woocommerce-deactivate-survey-footer {
				margin-top: 18px;
			}
			.mailchimp-woocommerce-deactivate-survey-deactivate {
				float: right;
				font-size: 13px;
				color: #ccc;
				text-decoration: none;
				padding-top: 7px;
			}
			</style>
			<?php
		}

		/**
		 * Survey modal.
		 *
		 * @since 1.0.0
		 */
		public function modal() {

			if ( ! $this->is_plugin_page() ) {
				return;
			}

			$options = array(
				1 => array(
					'title'   => esc_html__( 'I want to change the audience associated with this integration.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'I want to change the audience associated with this integration.'
				),
				2 => array(
					'title'   => esc_html__( 'I want to change the site or store connected through this integration.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'I want to change the site or store connected through this integration.'
				),
				3 => array(
					'title'   => esc_html__( 'The order data isn\'t syncing.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'The order data isn\'t syncing.'
				),
				4 => array(
					'title'   => esc_html__( 'The promo codes aren\'t showing up.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'The promo codes aren\'t showing up.'
				),
				5 => array(
					'title'   => esc_html__( 'I\'m trying to troubleshoot the integration.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'I\'m trying to troubleshoot the integration.'
				),
				6 => array(
					'title'   => esc_html__( 'I was instructed to disconnect by Mailchimp Support.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'I was instructed to disconnect by Mailchimp Support.'
				),
				7 => array(
					'title'   => esc_html__( 'I no longer use this integration.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'I no longer use this integration.'
				),
				8 => array(
					'title'   => esc_html__( 'It\'s a temporary deactivation.', 'mailchimp-for-woocommerce' ),
					'reason'   => 'It\'s a temporary deactivation.'
				),
				9 => array(
					'title'   => esc_html__( 'Other', 'mailchimp-for-woocommerce' ),
					'reason'   => 'Other',
					'details' => esc_html__( 'Please share the reason', 'mailchimp-for-woocommerce' ),
				),
			);
			?>
			<div class="mailchimp-woocommerce-deactivate-survey-modal" id="mailchimp-woocommerce-deactivate-survey-<?php echo $this->plugin; ?>">
				<div class="mailchimp-woocommerce-deactivate-survey-wrap">
					<form class="mailchimp-woocommerce-deactivate-survey" method="post">
						<span class="mailchimp-woocommerce-deactivate-survey-header">
							<span class="dashicons dashicons-testimonial"></span>
							<?php echo ' ' . esc_html__( 'Quick Feedback', 'mailchimp-for-woocommerce' ); ?>
							<span title="<?php esc_attr_e( 'Close', 'mailchimp-for-woocommerce' );?> " class="mailchimp-woocommerce-deactivate-survey-close">✕</span>
						</span>

						<span class="mailchimp-woocommerce-deactivate-survey-desc">
							<?php
							printf(
								/* translators: %s - plugin name. */
								esc_html__( 'If you have a moment, please share why you are deactivating %s:', 'mailchimp-for-woocommerce' ),
								esc_html__( 'Mailchimp for Woocommerce', 'mailchimp-for-woocommerce')
							);
							?>
						</span>
						<div class="mailchimp-woocommerce-deactivate-survey-options">
							<?php foreach ( $options as $id => $option ) : ?>
							<div class="mailchimp-woocommerce-deactivate-survey-option">
								<label for="mailchimp-woocommerce-deactivate-survey-option-<?php echo $this->plugin; ?>-<?php echo $id; ?>" class="mailchimp-woocommerce-deactivate-survey-option-label">
									<input id="mailchimp-woocommerce-deactivate-survey-option-<?php echo $this->plugin; ?>-<?php echo $id; ?>" class="mailchimp-woocommerce-deactivate-survey-option-input" type="radio" name="code" value="<?php echo $id; ?>" />
									<span class="mailchimp-woocommerce-deactivate-survey-option-title"><?php echo $option['title']; ?></span>
									<input class="mailchimp-woocommerce-deactivate-survey-option-reason" type="hidden" value="<?php echo $option['reason']; ?>"  />
								</label>
								<?php if ( ! empty( $option['details'] ) ) : ?>
								<input class="mailchimp-woocommerce-deactivate-survey-option-details" type="text" placeholder="<?php echo $option['details']; ?>" />								
								<?php endif; ?>
							</div>
							<?php endforeach; ?>
						</div>
						<div class="mailchimp-woocommerce-deactivate-survey-footer">
							<button type="submit" class="mailchimp-woocommerce-deactivate-survey-submit button button-primary button-large"><?php echo esc_html__( 'Submit & Deactivate', 'mailchimp-for-woocommerce' ); ?></button>
							<a href="#" class="mailchimp-woocommerce-deactivate-survey-deactivate"><?php echo esc_html__( 'Skip & Deactivate', 'mailchimp-for-woocommerce' ); ?></a>
						</div>
					</form>
				</div>
			</div>
			<?php
		}
	}
} // End if().
class-mailchimp-woocommerce-deactivator.php                                                                                                                                                                                                                    668           1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Fired during plugin deactivation
 *
 * @link       https://mailchimp.com
 * @since      1.0.1
 *
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 */

/**
 * Fired during plugin deactivation.
 *
 * This class defines all code necessary to run during the plugin's deactivation.
 *
 * @since      1.0.1
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 * @author     Ryan Hungate <ryan@vextras.com>
 */
class MailChimp_WooCommerce_Deactivator {

	/**
	 * Short Description. (use period)
	 *
	 * Long Description.
	 *
	 * @since    1.0.0
	 */
	public static function deactivate() {

	}

}
class-mailchimp-woocommerce-hpos.php                                                                                                                                                                                                                           2361          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php
use Automattic\WooCommerce\Utilities\OrderUtil;
class MailChimp_WooCommerce_HPOS {
	/**
	 * @return bool
	 */
	public static function enabled()
	{
		/* HPOS_enabled - flag for data from db, where hpos is enabled or not */
		return class_exists( 'Automattic\WooCommerce\Utilities\OrderUtil' ) &&
		       OrderUtil::custom_orders_table_usage_is_enabled();
	}

	/**
	 * @param $post_id
	 *
	 * @return bool|WC_Order|WC_Order_Refund
	 */
	public static function get_order( $post_id )
	{
		return wc_get_order($post_id);
	}

	/**
	 * @param $post_id
	 *
	 * @return mixed
	 */
	public static function get_product( $post_id )
	{
		return wc_get_product($post_id);
	}

	/**
	 * @param $order_id
	 * @param $meta_key
	 * @param $optin
	 *
	 * @return void
	 */
	public static function update_order_meta( $order_id, $meta_key, $meta_value, $force_use_post = 0 )
    {
		if (!static::enabled() || $force_use_post) {
			update_post_meta($order_id, $meta_key, $meta_value);
			return;
		} else {
            $order_c = wc_get_order( $order_id );
            $order_c->update_meta_data( $meta_key, $meta_value );
            $order_c->save_meta_data();
        }
    }

	/**
	 * @param $post_id
	 *
	 * @return mixed
	 */
	public static function get_type( $post_id )
	{
		return !static::enabled() ? get_post_type($post_id) : OrderUtil::get_order_type( $post_id );
	}

	/**
	 * @param $order_id
	 *
	 * @return mixed|null
	 */
	public static function get_order_for_tower($order_id)
	{
		if (($order = static::get_order($order_id))) {
			return $order;
		}
		if ((($real_id = static::get_post_id_from_order_number($order_id)))) {
			return static::get_order($real_id);
		}
		return null;
	}

	/**
	 * @param $order_number
	 *
	 * @return null|int
	 */
	public static function get_post_id_from_order_number($order_number)
	{
		if (static::enabled()) {
			$orders = wc_get_orders([
				'return'     => 'ids',
				'limit'      => 1,
				'meta_query' => [
					[
						'key'        => '_order_number',
						'value'      => $order_number,
						'comparison' => '='
					],
				],
			]);
		} else {
			$orders = get_posts([
				'numberposts' => 1,
				'meta_key'    => '_order_number',
				'meta_value'  => $order_number,
				'post_type'   => 'shop_order',
				'post_status' => 'any',
				'fields'      => 'ids',
			]);
		}

		return $orders ? current($orders) : null;
	}
}class-mailchimp-woocommerce-i18n.php                                                                                                                                                                                                                           962           1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Define the internationalization functionality
 *
 * Loads and defines the internationalization files for this plugin
 * so that it is ready for translation.
 *
 * @link       https://mailchimp.com
 * @since      1.0.1
 *
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 */

/**
 * Define the internationalization functionality.
 *
 * Loads and defines the internationalization files for this plugin
 * so that it is ready for translation.
 *
 * @since      1.0.1
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 * @author     Ryan Hungate <ryan@vextras.com>
 */
class MailChimp_WooCommerce_i18n {


	/**
	 * Load the plugin text domain for translation.
	 *
	 * @since    1.0.0
	 */
	public function load_plugin_textdomain() {

		load_plugin_textdomain(
			'mailchimp-for-woocommerce',
			false,
			dirname( dirname( plugin_basename( __FILE__ ) ) ) . '/languages/'
		);

	}



}
class-mailchimp-woocommerce-loader.php                                                                                                                                                                                                                         4909          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Register all actions and filters for the plugin
 *
 * @link       https://mailchimp.com
 * @since      1.0.1
 *
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 */

/**
 * Register all actions and filters for the plugin.
 *
 * Maintain a list of all hooks that are registered throughout
 * the plugin, and register them with the WordPress API. Call the
 * run function to execute the list of actions and filters.
 *
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 * @author     Ryan Hungate <ryan@vextras.com>
 */
class MailChimp_WooCommerce_Loader {

	/**
	 * The array of actions registered with WordPress.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      array    $actions    The actions registered with WordPress to fire when the plugin loads.
	 */
	protected $actions;

	/**
	 * The array of filters registered with WordPress.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      array    $filters    The filters registered with WordPress to fire when the plugin loads.
	 */
	protected $filters;

	/**
	 * Initialize the collections used to maintain the actions and filters.
	 *
	 * @since    1.0.0
	 */
	public function __construct() {

		$this->actions = array();
		$this->filters = array();

	}

	/**
	 * Add a new action to the collection to be registered with WordPress.
	 *
	 * @since    1.0.0
	 * @param    string               $hook             The name of the WordPress action that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the action is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         Optional. he priority at which the function should be fired. Default is 10.
	 * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1.
	 */
	public function add_action( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {
		$this->actions = $this->add( $this->actions, $hook, $component, $callback, $priority, $accepted_args );
	}

	/**
	 * Add a new filter to the collection to be registered with WordPress.
	 *
	 * @since    1.0.0
	 * @param    string               $hook             The name of the WordPress filter that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the filter is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         Optional. he priority at which the function should be fired. Default is 10.
	 * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1
	 */
	public function add_filter( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {
		$this->filters = $this->add( $this->filters, $hook, $component, $callback, $priority, $accepted_args );
	}

	/**
	 * A utility function that is used to register the actions and hooks into a single
	 * collection.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @param    array                $hooks            The collection of hooks that is being registered (that is, actions or filters).
	 * @param    string               $hook             The name of the WordPress filter that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the filter is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         The priority at which the function should be fired.
	 * @param    int                  $accepted_args    The number of arguments that should be passed to the $callback.
	 * @return   array                                  The collection of actions and filters registered with WordPress.
	 */
	private function add( $hooks, $hook, $component, $callback, $priority, $accepted_args ) {

		$hooks[] = array(
			'hook'          => $hook,
			'component'     => $component,
			'callback'      => $callback,
			'priority'      => $priority,
			'accepted_args' => $accepted_args
		);

		return $hooks;

	}

	/**
	 * Register the filters and actions with WordPress.
	 *
	 * @since    1.0.0
	 */
	public function run() {

		foreach ( $this->filters as $hook ) {
			add_filter( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );
		}

		foreach ( $this->actions as $hook ) {
			add_action( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );
		}

	}

}
class-mailchimp-woocommerce-newsletter.php                                                                                                                                                                                                                     6831          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Created by MailChimp.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 2/22/16
 * Time: 9:09 AM
 */

class MailChimp_Newsletter extends MailChimp_WooCommerce_Options
{
    /** @var null|static */
    protected static $_instance = null;

    /**
     * @return MailChimp_Newsletter
     */
    public static function instance()
    {
        if (!empty(static::$_instance)) {
            return static::$_instance;
        }
        $env = mailchimp_environment_variables();
        static::$_instance = new MailChimp_Newsletter();
        static::$_instance->setVersion($env->version);
        return static::$_instance;
    }

	/**
	 * @param $checkout
	 */
    public function applyNewsletterField($checkout)
    {
        // some folks have asked to be able to check out on behalf of customers. I guess this makes sense
        // if they want to do this, but it needs to be a constant and custom.
        $allow_admin = defined('MAILCHIMP_ALLOW_ADMIN_NEWSLETTER') && MAILCHIMP_ALLOW_ADMIN_NEWSLETTER;

        if ($allow_admin || !is_admin()) {
            $api = mailchimp_get_api();

            // get the gdpr fields from the cache - or call it again and save for 5 minutes.
            $GDPRfields = $api->getCachedGDPRFields(mailchimp_get_list_id());

            // if the user has chosen to hide the checkbox, don't do anything.
            if (($default_setting = $this->getOption('mailchimp_checkbox_defaults', 'check')) === 'hide') {
                return;
            }

            // allow the user to specify the text in the newsletter label.
            $label = $this->getOption('newsletter_label');
            if ($label == '') $label = __('Subscribe to our newsletter', 'mailchimp-for-woocommerce');
            // if the user chose 'check' or nothing at all, we default to true.
            $default_checked = $default_setting === 'check';
            $gdpr_statuses = false;
            $status = $default_checked;

            // if the user is logged in, we will pull the 'is_subscribed' property out of the meta for the value.
            // otherwise we use the default settings.
            if (is_user_logged_in()) {
                $status = get_user_meta(get_current_user_id(), 'mailchimp_woocommerce_is_subscribed', true);
                $gdpr_statuses = get_user_meta(get_current_user_id(), 'mailchimp_woocommerce_gdpr_fields', true);

                /// if the user is logged in - and is already subscribed - just ignore this checkbox.
                if ($status === '' || $status === null) {
                    $status = $default_checked;
                }
            }

            // echo out the subscription checkbox.
            $checkbox = '<p class="form-row form-row-wide mailchimp-newsletter">';
            $checkbox .= '<label for="mailchimp_woocommerce_newsletter" class="woocommerce-form__label woocommerce-form__label-for-checkbox inline">';
            $checkbox .= '<input class="woocommerce-form__input woocommerce-form__input-checkbox input-checkbox" id="mailchimp_woocommerce_newsletter" type="checkbox" name="mailchimp_woocommerce_newsletter" value="1"'.($status ? ' checked="checked"' : '').'> ';
            $checkbox .= '<span>' . $label . '</span></label>';
            $checkbox .= '</p>';
            $checkbox .= '<div class="clear"></div>';

            // only render these fields if it's an array that has valid data.
            if (!empty($GDPRfields) && is_array($GDPRfields)) {
                $checkbox .= "<div style='display: " . ($gdpr_statuses ? 'none' : 'block') . "'>";
                $checkbox .= "<div id='mailchimp-gdpr-fields'><p>";
                $checkbox .= __('Please select all the ways you would like to hear from us', 'mailchimp-for-woocommerce');
                $checkbox .= "<div class='clear' ></div>";

                foreach ($GDPRfields as $key => $field) {
                    $marketing_permission_id = $field['marketing_permission_id'];

                    $gdpr_checked = $field['enabled'];
                    $text = $field['text'];

                    // Add to the checkbox output
                    $checkbox .= "<input type='hidden' value='0' name='mailchimp_woocommerce_gdpr[{$marketing_permission_id}]'>";
                    $checkbox .= "<label for='mailchimp_woocommerce_gdpr[{$marketing_permission_id}]' class='woocommerce-form__label woocommerce-form__label-for-checkbox inline'>";
                    $checkbox .= "<input class='woocommerce-form__input woocommerce-form__input-checkbox input-checkbox' id='mailchimp_woocommerce_gdpr[{$marketing_permission_id}]' type='checkbox' name='mailchimp_woocommerce_gdpr[{$marketing_permission_id}]' value='1'".($gdpr_checked ? ' checked="checked"' : '').">";
                    $checkbox .= "<span>{$text}</span></label>";
                    $checkbox .= "<div class='clear'></div>";
                }
                $checkbox .= "</p></div>";
                $checkbox .= "</div>";
            }

            echo apply_filters( 'mailchimp_woocommerce_newsletter_field', $checkbox, $status, $label);
        }
    }

    /**
     * @param $order_id
     * @param $posted
     */
    public function processNewsletterField($order_id, $posted)
    {
        $this->handleStatus($order_id);
    }

	/**
	 * @param $order
	 */
    public function processPayPalNewsletterField($order)
    {
        $this->handleStatus($order->get_id());
    }

    /**
     * @param $sanitized_user_login
     * @param $user_email
     * @param $reg_errors
     */
    public function processRegistrationForm($sanitized_user_login, $user_email, $reg_errors)
    {
        if (defined('WOOCOMMERCE_CHECKOUT')) {
            return; // Ship checkout
        }

        $this->handleStatus();
    }

    /**
     * @param null $order_id
     * @return bool|int
     */
    protected function handleStatus($order_id = null)
    {
        $post_key = 'mailchimp_woocommerce_newsletter';
        $meta_key = 'mailchimp_woocommerce_is_subscribed';
        $logged_in = is_user_logged_in();

        // if the post key is available we use it - otherwise we null it out.
        $status = isset($_POST[$post_key]) ? (int) $_POST[$post_key] : null;

        // if the status is null, we don't do anything
        if ($status === null) {
            return false;
        }

        // if we passed in an order id, we update it here.
        if ($order_id) {
            MailChimp_WooCommerce_HPOS::update_order_meta($order_id, $meta_key, $status);
            //update_post_meta($order_id, $meta_key, $status);
        }

        // if the user is logged in, we will update the status correctly.
        if ($logged_in) {
            update_user_meta(get_current_user_id(), $meta_key, $status);
            return $status;
        }

        return false;
    }
}
class-mailchimp-woocommerce-options.php                                                                                                                                                                                                                        7727          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Created by MailChimp.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 2/22/16
 * Time: 3:45 PM
 */
abstract class MailChimp_WooCommerce_Options
{
    /**
     * @var MailChimp_WooCommerce_MailChimpApi
     */
    protected $api;
    protected $plugin_name = 'mailchimp-woocommerce';
    protected $environment = 'production';
    protected $version = '1.0.0';
    protected $plugin_options = null;
    protected $is_admin = false;

    /**
     * hook calls this so that we know the admin is here.
     */
    public function adminReady()
    {
        $this->is_admin = current_user_can(mailchimp_get_allowed_capability());
        if (get_option('mailchimp_woocommerce_plugin_do_activation_redirect', false)) {
            delete_option('mailchimp_woocommerce_plugin_do_activation_redirect');

            // don't do the redirect while activating the plugin through the rest API. ( Bartosz from Woo asked for this )
            if ((defined( 'REST_REQUEST' ) && REST_REQUEST)) {
                return;
            }

            // the woocommerce onboarding wizard will have a profile
            $onboarding_profile = get_option('woocommerce_onboarding_profile');
            // if the onboarding profile has business extensions
            if (is_array($onboarding_profile) && array_key_exists('business_extensions', $onboarding_profile)) {
                // if the business extensions contains our plugin, we just skip this.
                if (is_array($onboarding_profile['business_extensions']) && in_array('mailchimp-for-woocommerce', $onboarding_profile['business_extensions'])) {
                    return;
                }
            }

            if (!isset($_GET['activate-multi'])) {
                wp_redirect("admin.php?page=mailchimp-woocommerce");
            }
        }
    }

    /**
     * @return bool
     */
    public function isAdmin()
    {
        return $this->is_admin;
    }

    /**
     * @param $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->version = $version;

        return $this;
    }

    /**
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

	/**
	 * @return mixed|string
	 */
    public function getUniqueStoreID()
    {
        return mailchimp_get_store_id();
    }

    /**
     * @param $env
     * @return $this
     */
    public function setEnvironment($env)
    {
        $this->environment = $env;
        return $this;
    }

    /**
     * @return string
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * @param $key
     * @param null $default
     * @return null
     */
    public function getOption($key, $default = null)
    {
        $options = $this->getOptions();
        if (isset($options[$key])) {
            return $options[$key];
        }
        return $default;
    }

    /**
     * @param $key
     * @param bool $default
     * @return bool
     */
    public function hasOption($key, $default = false)
    {
        return (bool) $this->getOption($key, $default);
    }

    /**
     * @return array
     */
    public function resetOptions()
    {
        return $this->plugin_options = get_option($this->plugin_name);
    }

    /**
     * @return array
     */
    public function getOptions()
    {
        if (empty($this->plugin_options)) {
            $this->plugin_options = get_option($this->plugin_name);
        }
        return is_array($this->plugin_options) ? $this->plugin_options : array();
    }

    /**
     * @param $key
     * @param $value
     * @return $this
     */
    public function setData($key, $value)
    {
        update_option($this->plugin_name.'-'.$key, $value, 'yes');
        return $this;
    }

    /**
     * @param $key
     * @param null $default
     * @return mixed|void
     */
    public function getData($key, $default = null)
    {
        return get_option($this->plugin_name.'-'.$key, $default);
    }


    /**
     * @param $key
     * @return bool
     */
    public function removeData($key)
    {
        return delete_option($this->plugin_name.'-'.$key);
    }

    /**
     * @param $key
     * @param null $default
     * @return null|mixed
     */
    public function getCached($key, $default = null)
    {
        $cached = $this->getData("cached-$key", false);
	    if (empty($cached) || !($cached = is_string($cached) ? unserialize($cached) : [])) {
            return $default;
        }

        if (empty($cached['till']) || (time() > $cached['till'])) {
            $this->removeData("cached-$key");
            return $default;
        }

        return $cached['value'];
    }

    /**
     * @param $key
     * @param $value
     * @param $seconds
     * @return $this
     */
    public function setCached($key, $value, $seconds = 60)
    {
        $time = time();
        $data = array('at' => $time, 'till' => $time + $seconds, 'value' => $value);
        $this->setData("cached-$key", serialize($data));

        return $this;
    }

    /**
     * @param $key
     * @param $callable
     * @param int $seconds
     * @return mixed|null
     */
    public function getCachedWithSetDefault($key, $callable, $seconds = 60)
    {
        if (!($value = $this->getCached($key, false))) {
            $value = call_user_func($callable);
            $this->setCached($key, $value, $seconds);
        }
        return $value;
    }

    /**
     * @return bool
     */
    public function isConfigured()
    {
        return true;
        //return $this->getOption('public_key', false) && $this->getOption('secret_key', false);
    }

    /**
     * @return bool
     */
    protected function doingAjax()
    {
        return defined('DOING_AJAX') && DOING_AJAX;
    }

    /**
     * @return MailChimp_WooCommerce_MailChimpApi
     */
    public function api()
    {
        if (empty($this->api)) {
            $this->api = new MailChimp_WooCommerce_MailChimpApi($this->getOption('mailchimp_api_key', false));
        }

        return $this->api;
    }

    /**
     * @param array $data
     * @param $key
     * @param null $default
     * @return null|mixed
     */
    public function array_get(array $data, $key, $default = null)
    {
        if (isset($data[$key])) {
            return $data[$key];
        }

        return $default;
    }

    /**
     * @param bool $products
     * @param bool $orders
     * @return $this
     */
    public function removePointers($products = true, $orders = true)
    {
        if ($products) {
            $this->removeProductPointers();
        }

        if ($orders) {
            $this->removeOrderPointers();
        }

        $this->removeSyncPointers();

        $this->removeMiscPointers();

        return $this;
    }

    public function removeProductPointers()
    {
        delete_option('mailchimp-woocommerce-sync.products.completed_at');
        delete_option('mailchimp-woocommerce-sync.products.current_page');
    }

    public function removeOrderPointers()
    {
        delete_option('mailchimp-woocommerce-sync.orders.prevent');
        delete_option('mailchimp-woocommerce-sync.orders.completed_at');
        delete_option('mailchimp-woocommerce-sync.orders.current_page');
    }

    public function removeSyncPointers()
    {
        mailchimp_flush_sync_pointers();
    }

    public function removeMiscPointers()
    {
        delete_option('mailchimp-woocommerce-errors.store_info');
        delete_option('mailchimp-woocommerce-validation.api.ping');
        delete_option('mailchimp-woocommerce-cached-api-lists');
        delete_option('mailchimp-woocommerce-cached-api-ping-check');
    }
}
class-mailchimp-woocommerce-privacy.php                                                                                                                                                                                                                        3720          1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

class MailChimp_WooCommerce_Privacy
{
    /**
     * Privacy policy
     */
    public function privacy_policy()
    {
        if (function_exists( 'wp_add_privacy_policy_content')) {
            $content = sprintf(/* translators: %s - Mailchimp Privacy Policy URL. */
                __( 'When shopping, we keep a record of your email and the cart contents for up to 30 days on our server. This record is kept to repopulate the contents of your cart if you switch devices or needed to come back another day. Read our privacy policy <a href="%s">here</a>.', 'mailchimp-for-woocommerce' ),
                'https://mailchimp.com/legal/privacy/'
                
            );
            wp_add_privacy_policy_content('MailChimp for WooCommerce', wp_kses_post(wpautop($content, false)));
        }
    }

    /**
     * @param array $exporters
     * @return mixed
     */
    public function register_exporter($exporters)
    {
        $exporters['mailchimp-woocommerce'] = array(
            'exporter_friendly_name' => __('MailChimp for WooCommerce'),
            'callback'               => array($this, 'export'),
        );
        return $exporters;
    }

    /**
     * @param array $erasers
     * @return mixed
     */
    public function register_eraser($erasers)
    {
        $erasers['mailchimp-woocommerce'] = array(
            'eraser_friendly_name' => __('MailChimp for WooCommerce'),
            'callback'               => array($this, 'erase'),
        );
        return $erasers;
    }

    /**
     * @param $email_address
     * @param int $page
     * @return array
     */
    public function export($email_address, $page = 1)
    {
        global $wpdb;

        $uid = mailchimp_hash_trim_lower($email_address);

        $data = array();

        if (get_site_option('mailchimp_woocommerce_db_mailchimp_carts')) {
            $table = "{$wpdb->prefix}mailchimp_carts";
            $statement = "SELECT * FROM $table WHERE id = %s";
            $sql = $wpdb->prepare($statement, $uid);

            if (($saved_cart = $wpdb->get_row($sql)) && !empty($saved_cart)) {
                $data = array('name' => __('Email Address'), 'value' => $email_address);
            }
        }

        // If nothing found, return nothing
        if (is_array($data) && (count($data) < 1)) {
            return (array('data' => array(), 'done' => true));
        }

        return array(
            'data' => array(
                array(
                    'group_id'    => 'mailchimp_cart',
                    'group_label' => __( 'MailChimp Shopping Cart Data', 'mailchimp-for-woocommerce' ),
                    'item_id'     => 'mailing-shopping-cart-1',
                    'data'        => array(
                        array(
                            'name'  => __( 'User ID', 'mailchimp-for-woocommerce' ),
                            'value' => $uid,
                        ),
                        $data, // this is already an associative array with name and value keys
                    )
                )
            ),
            'done' => true,
        );
    }

    public function erase($email_address, $page = 1)
    {
        global $wpdb;

        $uid = mailchimp_hash_trim_lower($email_address);
        $count = 0;

        if (get_site_option('mailchimp_woocommerce_db_mailchimp_carts')) {
            $table = "{$wpdb->prefix}mailchimp_carts";
            $sql = $wpdb->prepare("DELETE FROM $table WHERE id = %s", $uid);
            $count = $wpdb->query($sql);
        }

        return array(
            'items_removed' => (int) $count,
            'items_retained' => false,
            'messages' => array(),
            'done' => true,
        );
    }
}
class-mailchimp-woocommerce-rest-api.php                                                                                                                                                                                                                       30999         1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

class MailChimp_WooCommerce_Rest_Api
{
    protected static $namespace = 'mailchimp-for-woocommerce/v1';

	/**
	 * @param $path
	 *
	 * @return string
	 */
    public static function url($path)
    {
	    return esc_url_raw(rest_url(static::$namespace.'/'.ltrim($path, '/')));
    }
    /**
     * Register all Mailchimp API routes.
     */
    public function register_routes()
    {
        // ping
        register_rest_route(static::$namespace, '/ping', array(
            'methods' => 'GET',
            'callback' => array($this, 'ping'),
            'permission_callback' => '__return_true',
        ));

        // Right now we only have a survey disconnect endpoint.
        register_rest_route(static::$namespace, "/survey/disconnect", array(
            'methods' => 'POST',
            'callback' => array($this, 'post_disconnect_survey'),
            'permission_callback' => array($this, 'permission_callback'),
        ));

        // Sync Stats
        register_rest_route(static::$namespace, '/sync/stats', array(
            'methods' => 'GET',
            'callback' => array($this, 'get_sync_stats'),
            'permission_callback' => array($this, 'permission_callback'),
        ));

        // remove review banner
        register_rest_route(static::$namespace, "/review-banner", array(
            'methods' => 'GET',
            'callback' => array($this, 'dismiss_review_banner'),
            'permission_callback' => array($this, 'permission_callback'),
        ));

        //Member Sync
        register_rest_route(static::$namespace, "/member-sync", array(
            'methods' => 'GET',
            'callback' => array($this, 'member_sync_alive_signal'),
            'permission_callback' => '__return_true',
        ));
        register_rest_route(static::$namespace, "/member-sync", array(
            'methods' => 'POST',
            'callback' => array($this, 'member_sync'),
            'permission_callback' => '__return_true',
        ));

        // Tower report
        register_rest_route(static::$namespace, "/tower/report", array(
            'methods' => 'POST',
            'callback' => array($this, 'get_tower_report'),
            'permission_callback' => '__return_true',
        ));

        // tower logs
        register_rest_route(static::$namespace, "/tower/logs", array(
            'methods' => 'POST',
            'callback' => array($this, 'get_tower_logs'),
            'permission_callback' => '__return_true',
        ));

        register_rest_route(static::$namespace, "/tower/resource", array(
            'methods' => 'POST',
            'callback' => array($this, 'get_tower_resource'),
            'permission_callback' => '__return_true',
        ));

        register_rest_route(static::$namespace, "/tower/action", array(
            'methods' => 'POST',
            'callback' => array($this, 'handle_tower_action'),
            'permission_callback' => '__return_true',
        ));

        register_rest_route(static::$namespace, "/tower/sync_stats", array(
            'methods' => 'POST',
            'callback' => array($this, 'get_tower_sync_stats'),
            'permission_callback' => '__return_true',
        ));

    }

    /**
     * @return bool
     */
    public function permission_callback()
    {
        $cap = mailchimp_get_allowed_capability();
        return ($cap === 'manage_woocommerce' || $cap === 'manage_options' );
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function ping(WP_REST_Request $request)
    {
        return $this->mailchimp_rest_response(array('success' => true));
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function post_disconnect_survey(WP_REST_Request $request)
    {
        // need to send a post request to
        $host = mailchimp_environment_variables()->environment === 'staging' ?
        'https://staging.conduit.vextras.com' : 'https://conduit.mailchimpapp.com';

        $route = "{$host}/survey/woocommerce";

        $result = wp_remote_post(esc_url_raw($route), array(
            'timeout'   => 12,
            'blocking'  => true,
            'method'      => 'POST',
            'data_format' => 'body',
            'headers'     => array('Content-Type' => 'application/json; charset=utf-8'),
            'body'        => json_encode($request->get_params()),
        ));

        return $this->mailchimp_rest_response($result);
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function get_sync_stats(WP_REST_Request $request)
    {
        // if the queue is running in the console - we need to say tell the response why it's not going to fire this way.
        if (!mailchimp_is_configured() || !($api = mailchimp_get_api())) {
            return $this->mailchimp_rest_response(array('success' => false, 'reason' => 'not configured'));
        }

        $store_id = mailchimp_get_store_id();
        
        $complete = array(
            'coupons' => get_option('mailchimp-woocommerce-sync.coupons.completed_at'),
            'products' => get_option('mailchimp-woocommerce-sync.products.completed_at'),
            'orders' => get_option('mailchimp-woocommerce-sync.orders.completed_at')
        );

        $promo_rules_count = mailchimp_get_coupons_count();
        $product_count = mailchimp_get_product_count();
        $order_count = mailchimp_get_order_count();

        $mailchimp_total_promo_rules = $complete['coupons'] ? $promo_rules_count - mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_SingleCoupon') : 0;
        $mailchimp_total_products = $complete['products'] ? $product_count - mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Single_Product') : 0;
        $mailchimp_total_orders = $complete['orders'] ? $order_count - mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Single_Order') : 0;
        // try {
        //     $promo_rules = $api->getPromoRules($store_id, 1, 1, 1);
        //     $mailchimp_total_promo_rules = $promo_rules['total_items'];
        //     if (isset($promo_rules_count['publish']) && $mailchimp_total_promo_rules > $promo_rules_count['publish']) $mailchimp_total_promo_rules = $promo_rules_count['publish'];
        // } catch (Exception $e) { $mailchimp_total_promo_rules = 0; }
        // try {
        //     $products = $api->products($store_id, 1, 1);
        //     $mailchimp_total_products = $products['total_items'];
        //     if ($mailchimp_total_products > $product_count) $mailchimp_total_products = $product_count;
        // } catch (Exception $e) { $mailchimp_total_products = 0; }
        // try {
        //     $orders = $api->orders($store_id, 1, 1);
        //     $mailchimp_total_orders = $orders['total_items'];
        //     if ($mailchimp_total_orders > $order_count) $mailchimp_total_orders = $order_count;
        // } catch (Exception $e) { $mailchimp_total_orders = 0; }

        $date = mailchimp_date_local('now');
        // but we need to do it just in case.
        return $this->mailchimp_rest_response(array(
            'success' => true,
            'promo_rules_in_store' => $promo_rules_count,
            'promo_rules_in_mailchimp' => $mailchimp_total_promo_rules,
            
            'products_in_store' => $product_count,
            'products_in_mailchimp' => $mailchimp_total_products,
            
            'orders_in_store' => $order_count,
            'orders_in_mailchimp' => $mailchimp_total_orders,
            
            // 'promo_rules_page' => get_option('mailchimp-woocommerce-sync.coupons.current_page'),
            // 'products_page' => get_option('mailchimp-woocommerce-sync.products.current_page'),
            // 'orders_page' => get_option('mailchimp-woocommerce-sync.orders.current_page'),
            
            'date' => $date ? $date->format( __('D, M j, Y g:i A', 'mailchimp-for-woocommerce')) : '',
            'has_started' => mailchimp_has_started_syncing() || ($order_count != $mailchimp_total_orders),
            'has_finished' => mailchimp_is_done_syncing() && ($order_count == $mailchimp_total_orders),
	        'last_loop_at' => mailchimp_get_data('sync.last_loop_at'),
        ));
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function dismiss_review_banner(WP_REST_Request $request)
    {
        return $this->mailchimp_rest_response(array('success' => delete_option('mailchimp-woocommerce-sync.initial_sync')));
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function member_sync(WP_REST_Request $request)
    {
        $this->authorize('webhook.token', $request);
        $data = $request->get_params();
        if (!empty($data['type']) && !empty($data['data']['list_id']) && mailchimp_get_list_id() == $data['data']['list_id'] ){
            $job = new MailChimp_WooCommerce_Subscriber_Sync($data);
            $job->handle();
            return $this->mailchimp_rest_response(array('success' => true));
        }
        return $this->mailchimp_rest_response(array('success' => false));
    }

	/**
	 * Returns an alive signal to confirm url exists to mailchimp system
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function member_sync_alive_signal(WP_REST_Request $request)
    {
        $this->authorize('webhook.token', $request);
        return $this->mailchimp_rest_response(array('success' => true));
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function get_tower_report(WP_REST_Request $request)
    {
        $this->authorize('tower.token', $request);
        return $this->mailchimp_rest_response(
            $this->tower($request->get_query_params())->handle()
        );
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 * @throws Throwable
	 */
    public function handle_tower_action(WP_REST_Request $request)
    {
        $this->authorize('tower.token', $request);
        $body = $request->get_json_params();

        $action = isset($body['action']) ? $body['action'] : null;
        $data = isset($body['data']) ? $body['data'] : null;
        $response = null;

        if (empty($action)) {
            return $this->mailchimp_rest_response(array(
                'success' => false,
                'message' => 'invalid action'
            ));
        }

        switch ($action) {
            case 'emergency_stop_syncing':
                mailchimp_set_data('emergency_stop', true);
                $response = [
                    'title' => "Successfully stopped the sync.",
                    'description' => "Please note you'll need to have them reconnect.",
                    'type' => 'success',
                ];
                break;
            case 'update_feature':
                $response = [
                    'title' => "Features are not available for WooCommerce",
                    'type' => 'error',
                ];
                break;
            case 'resync_orders':
                MailChimp_WooCommerce_Process_Orders::push();
                $response = [
                    'title' => "Successfully initiated the order resync",
                    'description' => "Please note that it will take a couple minutes to start this process. Check the store logs for details.",
                    'type' => 'success',
                ];
                break;
            case 'resync_products':
                MailChimp_WooCommerce_Process_Products::push();
                $response = [
                    'title' => "Successfully initiated product resync",
                    'description' => "Please note that it will take a couple minutes to start this process. Check the store logs for details.",
                    'type' => 'success',
                ];
                break;
            case 'resync_customers':
                $response = [
                    'title' => "Customer resync",
                    'description' => "WooCommerce does not have customers to sync. Only orders.",
                    'type' => 'error',
                ];
                break;
            case 'resync_promo_codes':
                MailChimp_WooCommerce_Process_Coupons::push();
                $response = [
                    'title' => "Successfully initiated promo code resync",
                    'description' => "Please note that it will take a couple minutes to start this process. Check the store logs for details.",
                    'type' => 'success',
                ];
                break;
            case 'resync_chimpstatic_script':
                $response = [
                    'title' => "Chimpstatic script",
                    'description' => 'Scripts are automatically injected at runtime.',
                    'type' => 'error',
                ];
                break;
            case 'activate_webhooks':
                $api = mailchimp_get_api();
                $list = mailchimp_get_list_id();
	            $previous_url = mailchimp_get_webhook_url();
	            if (mailchimp_get_data('webhook.token') && $previous_url && $api->hasWebhook($list, $previous_url)) {
		            $response = [
			            'title' => "Store Webhooks",
			            'description' => "Store already has webhooks enabled!",
			            'type' => 'success',
		            ];
	            } else {
		            $key = mailchimp_create_webhook_token();
		            $url = mailchimp_build_webhook_url($key);
		            mailchimp_set_data('webhook.token', $key);
		            try {
			            $webhook = $api->webHookSubscribe($list, $url);
			            mailchimp_set_webhook_url($webhook['url']);
			            mailchimp_log('webhooks', "added webhook to audience");
			            $response = [
				            'title' => "Store Webhooks",
				            'description' => "Set up a new webhook at {$webhook['url']}",
				            'type' => 'success',
			            ];
		            } catch (Exception $e) {
			            $response = [
				            'title' => "Store Webhooks",
				            'description' => $e->getMessage(),
				            'type' => 'error',
			            ];
			            mailchimp_set_data('webhook.token', false);
			            mailchimp_set_webhook_url(false);
			            mailchimp_error('webhook', $e->getMessage());
		            }
	            }
                break;
            case 'resync_all':
                $service = new MailChimp_Service();
                $service->removePointers();
                MailChimp_WooCommerce_Admin::instance()->startSync();
                $service->setData('sync.config.resync', true);
                $response = [
                    'title' => "Successfully initiated the store resync",
                    'description' => "Please note that it will take a couple minutes to start this process. Check the store logs for details.",
                    'type' => 'success',
                ];
                break;
            case 'resync_customer':
                $response = [
                    'title' => "Error syncing custome",
                    'description' => "WooCommerce only works with orders.",
                    'type' => 'error',
                ];
                break;
            case 'resync_order':
                $order = new WC_Order($data['id']);
                if (!$order->get_date_created()) {
                    $response = [
                        'title' => "Error syncing order",
                        'description' => "This order id does not exist.",
                        'type' => 'error',
                    ];
                } else {
                    $job = new MailChimp_WooCommerce_Single_Order($order->get_id());
                    $data = $job->handle();
                    $response = [
                        'title' => "Executed order resync",
                        'description' => "Check the store logs for details.",
                        'type' => 'success',
                    ];
                }
                break;
            case 'resync_product':
                $product = new WC_Product($data['id']);
                if (!$product->get_date_created()) {
                    $response = [
                        'title' => "Error syncing product",
                        'description' => "This product id does not exist.",
                        'type' => 'error',
                    ];
                } else {
                    $job = new MailChimp_WooCommerce_Single_Product($product);
                    $data = $job->handle();
                    $response = [
                        'title' => "Executed product resync",
                        'description' => "Check the store logs for details.",
                        'type' => 'success',
                    ];
                }
                break;
            case 'resync_cart':
                $response = [
                    'title' => "Let's talk",
                    'description' => "This isn't supported by our system yet. If you really need this, please say something.",
                    'type' => 'error',
                ];
                break;
            case 'fix_duplicate_store':
                $job = new MailChimp_WooCommerce_Fix_Duplicate_Store(mailchimp_get_store_id(), true, false);
                $job->handle();
                $response = [
                    'title' => "Successfully queued up store deletion.",
                    'description' => "This process may take a couple minutes to complete. Please check back by reloading the page after a minute.",
                    'type' => 'success',
                ];
                break;
            case 'remove_legacy_app':
                $response = [
                    'title' => "Error removing legacy app",
                    'description' => "WooCommerce doesn't have any legacy apps to delete.",
                    'type' => 'error',
                ];
                break;
	        case 'fix_is_syncing_problem':
		        $fixed = MailChimp_WooCommerce_Admin::instance()->fix_is_syncing_problem();
		        $response = $fixed ? [
			        'title' => "Successfully fixed sync flags.",
			        'description' => "Please reload the store stats to see updated meta",
			        'type' => 'success',
		        ] : [
			        'title' => "Sync flags not changed",
			        'description' => "There were no changes made.",
			        'type' => 'error',
		        ];
				break;
        }

        return $this->mailchimp_rest_response($response);
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function get_tower_logs(WP_REST_Request $request)
    {
        $this->authorize('tower.token', $request);
        return $this->mailchimp_rest_response(
            $this->tower($request->get_query_params())->logs()
        );
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function get_tower_resource(WP_REST_Request $request)
    {
        $this->authorize('tower.token', $request);
        $body = json_decode($request->get_body(), true);

        if (!isset($body['resource']) || !isset($body['resource_id'])) {
            return $this->mailchimp_rest_response(array(
                'resource' => null,
                'resource_error' => 'Resource not found because post request was wrong',
                'mailchimp' => null,
                'mailchimp_error' => 'Resource not found because post request was wrong',
            ));
        }

        $platform = null;
        $mc = null;
        $store_id = mailchimp_get_store_id();
        
        switch ($body['resource']) {
            case 'order':
                $order = MailChimp_WooCommerce_HPOS::get_order_for_tower($body['resource_id']);
                if ($order && $order->get_order_number()) {
                    $mc = mailchimp_get_api()->getStoreOrder($store_id, $order->get_order_number());
                    $transformer = new MailChimp_WooCommerce_Transform_Orders();
                    $platform = $transformer->transform($order)->toArray();
                }
                if ($mc) $mc = $mc->toArray();
                break;
            case 'customer':
                $field = is_email($body['resource_id']) ? 'email' : 'id';
                $platform = get_user_by($field, $body['resource_id']);
	            $mc = array('member' => null, 'customer' => null);
                if ($platform) {
	                $date = mailchimp_get_marketing_status_updated_at($platform->ID);
                    $platform->mailchimp_woocommerce_is_subscribed = (bool) get_user_meta($platform->ID, 'mailchimp_woocommerce_is_subscribed', true);
	                $platform->marketing_status_updated_at = $date ? $date->format(__('D, M j, Y g:i A', 'mailchimp-for-woocommerce')) : '';
	                $hashed = mailchimp_hash_trim_lower($platform->user_email);
                } else if ('email' === $field) {
                    $hashed = mailchimp_hash_trim_lower($body['resource_id']);
                    $wc_customer = mailchimp_get_wc_customer($body['resource_id']);
                    if ( $wc_customer !== null ) {
                        $platform = $wc_customer;
                        $orders = wc_get_orders( array(
                            'customer' => $body['resource_id'],
                            'limit' => 1,
                            'orderby' => 'date',
                            'order' => 'DESC',
                        ) );
                        $date = $orders[0]->get_meta('marketing_status_updated_at');
                        $platform->mailchimp_woocommerce_is_subscribed = (bool) $orders[0]->get_meta('mailchimp_woocommerce_is_subscribed');
                        $platform->marketing_status_updated_at = $date ? $date->format(__('D, M j, Y g:i A', 'mailchimp-for-woocommerce')) : '';
                    }
                }
				if (isset($hashed) && $hashed) {
					try {
						$mc['member'] = mailchimp_get_api()->member(mailchimp_get_list_id(), $platform->user_email);
					} catch (Exception $e) {
						$mc['member'] = null;
					}
					if ($customer = mailchimp_get_api()->getCustomer($store_id, $hashed)) {
						$mc['customer'] = $customer->toArray();
					}
				}
                break;
            case 'product':                
                $platform = MailChimp_WooCommerce_HPOS::get_product($body['resource_id']);

                if ($platform) {
                    $transformer = new MailChimp_WooCommerce_Transform_Products();
                    $platform = $transformer->transform($platform)->toArray();
                }
                if ($mc = mailchimp_get_api()->getStoreProduct($store_id, $body['resource_id'])) {
                    $mc = $mc->toArray();
                }
                break;
            case 'cart':
                global $wpdb;
                $uid = mailchimp_hash_trim_lower($body['resource_id']);
                $table = "{$wpdb->prefix}mailchimp_carts";
                $sql = $wpdb->prepare("SELECT * FROM $table WHERE id = %s", $uid);
                $platform = $wpdb->get_row($sql);
                if ($mc = mailchimp_get_api()->getCart($store_id, $uid)) {
                    $mc = $mc->toArray();
                }
                break;
            case 'promo_code':
                $platform = new WC_Coupon($body['resource_id']);
	            $mc = mailchimp_get_api()->getPromoRuleWithCodes($store_id, $body['resource_id']);
                break;
        }

        return $this->mailchimp_rest_response(array(
            'resource' => $platform,
            'resource_error' => empty($platform) ? 'Resource not found' : false,
            'mailchimp' => $mc,
            'mailchimp_error' => empty($mc) ? 'Resource not found' : false,
        ));
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return WP_REST_Response
	 */
    public function get_tower_sync_stats(WP_REST_Request $request)
    {
        $this->authorize('tower.token', $request);

        // if the queue is running in the console - we need to say tell the response why it's not going to fire this way.
        if (!mailchimp_is_configured() || !($api = mailchimp_get_api())) {
            return $this->mailchimp_rest_response(array('success' => false, 'reason' => 'not configured'));
        }

        $store_id = mailchimp_get_store_id();
        $product_count = mailchimp_get_product_count();
        $order_count = mailchimp_get_order_count();

        try {
            $products = $api->products($store_id, 1, 1);
            $mailchimp_total_products = $products['total_items'];
            if ($mailchimp_total_products > $product_count) {
                $mailchimp_total_products = $product_count;
            }
        } catch (Exception $e) { $mailchimp_total_products = 0; }
        try {
            $mailchimp_total_customers = $api->getCustomerCount($store_id);
        } catch (Exception $e) { $mailchimp_total_customers = 0; }
        try {
            $orders = $api->orders($store_id, 1, 1);
            $mailchimp_total_orders = $orders['total_items'];
            if ($mailchimp_total_orders > $order_count) {
                $mailchimp_total_orders = $order_count;
            }
        } catch (Exception $e) { $mailchimp_total_orders = 0; }

        // but we need to do it just in case.
        return $this->mailchimp_rest_response(array(
            'platform' => array(
                'products' => $product_count,
                'customers' => $this->get_customer_count(),
                'orders' => $order_count,
            ),
            'mailchimp' => array(
                'products' => $mailchimp_total_products,
                'customers' => $mailchimp_total_customers,
                'orders' => $mailchimp_total_orders,
            ),
        ));
    }

	/**
	 * @param $args
	 *
	 * @return int
	 */
	private function get_customer_count( $args = array() ) {

		// default users per page
		$users_per_page = get_option( 'posts_per_page' );

		// Set base query arguments
		$query_args = array(
			'fields'  => 'ID',
			'role'    => 'customer',
			'orderby' => 'registered',
			'number'  => $users_per_page,
		);

		// Custom Role
		if ( ! empty( $args['role'] ) ) {
			$query_args['role'] = $args['role'];

			// Show users on all roles
			if ( 'all' === $query_args['role'] ) {
				unset( $query_args['role'] );
			}
		}

		// Search
		if ( ! empty( $args['q'] ) ) {
			$query_args['search'] = $args['q'];
		}

		// Limit number of users returned
		if ( ! empty( $args['limit'] ) ) {
			if ( -1 == $args['limit'] ) {
				unset( $query_args['number'] );
			} else {
				$query_args['number'] = absint( $args['limit'] );
				$users_per_page       = absint( $args['limit'] );
			}
		} else {
			$args['limit'] = $query_args['number'];
		}

		// Page
		$page = ( isset( $args['page'] ) ) ? absint( $args['page'] ) : 1;

		// Offset
		if ( ! empty( $args['offset'] ) ) {
			$query_args['offset'] = absint( $args['offset'] );
		} else {
			$query_args['offset'] = $users_per_page * ( $page - 1 );
		}

		// Order (ASC or DESC, ASC by default)
		if ( ! empty( $args['order'] ) ) {
			$query_args['order'] = $args['order'];
		}

		// Order by
		if ( ! empty( $args['orderby'] ) ) {
			$query_args['orderby'] = $args['orderby'];

			// Allow sorting by meta value
			if ( ! empty( $args['orderby_meta_key'] ) ) {
				$query_args['meta_key'] = $args['orderby_meta_key'];
			}
		}

		$query = new WP_User_Query( $query_args );

		return $query->get_total();
	}

	/**
	 * @param null $params
	 *
	 * @return MailChimp_WooCommerce_Tower
	 */
    private function tower($params = null)
    {
        if (!is_array($params)) $params = array();
        $job = new MailChimp_WooCommerce_Tower(mailchimp_get_store_id());
        $job->withLogFile(!empty($params['log_view']) ? $params['log_view'] : null);
        $job->withLogSearch(!empty($params['search']) ? $params['search'] : null);
        return $job;
    }

	/**
	 * @param $data
	 * @param int $status
	 *
	 * @return WP_REST_Response
	 */
    private function mailchimp_rest_response($data, $status = 200)
    {
        if (!is_array($data)) $data = array();
        $response = new WP_REST_Response($data);
        $response->set_status($status);
        return $response;
    }

	/**
	 * @param $key
	 * @param WP_REST_Request $request
	 *
	 * @return bool
	 */
    private function authorize($key, WP_REST_Request $request)
    {
        $allowed_keys = array(
            'tower.token',
            'webhook.token',
        );
        // this is just a safeguard against people trying to do wonky things.
        if (!in_array($key, $allowed_keys, true)) {
            wp_send_json_error(array('message' => 'unauthorized token type'), 403);
        }
        // get the auth token from either a header, or the query string
        $token = $this->getAuthToken($request);
        // pull the saved data
        $saved = mailchimp_get_data($key);

        // if we don't have a token - or we don't have the saved comparison
        // or the token doesn't equal the saved token, throw an error.
        if (empty($token) || empty($saved) || ($token !== $saved && base64_decode($token) !== $saved)) {
            wp_send_json_error(array('message' => 'unauthorized'), 403);
        }
        return true;
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return false|mixed|string
	 */
    private function getAuthToken(WP_REST_Request $request)
    {
        if (($token = $this->getBearerTokenHeader($request))) {
            return $token;
        }
        return $this->getAuthQueryStringParam($request);
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return false|string
	 */
    private function getBearerTokenHeader(WP_REST_Request $request)
    {
        $header = $request->get_header('Authorization');
        $position = strrpos($header, 'Bearer ');
        if ($position !== false) {
            $header = substr($header, $position + 7);
            return strpos($header, ',') !== false ?
                strstr(',', $header, true) :
                $header;
        }
        return false;
    }

	/**
	 * @param WP_REST_Request $request
	 *
	 * @return false|mixed
	 */
    private function getAuthQueryStringParam(WP_REST_Request $request)
    {
        $params = $request->get_query_params();
        return empty($params['auth']) ? false : $params['auth'];
    }
}class-mailchimp-woocommerce-service.php                                                                                                                                                                                                                        41976         1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Created by MailChimp.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 2/17/16
 * Time: 12:03 PM
 */
class MailChimp_Service extends MailChimp_WooCommerce_Options
{
    protected $user_email = null;
    protected $previous_email = null;
    protected $user_language = null;
    protected $cart_subscribe = null;
    protected $force_cart_post = false;
    protected $cart_was_submitted = false;
    protected $cart = array();
    protected $validated_cart_db = false;
    /** @var null|static */
    protected static $_instance = null;

    /**
     * @return MailChimp_Service
     */
    public static function instance()
    {
        if (!empty(static::$_instance)) {
            return static::$_instance;
        }
        $env = mailchimp_environment_variables();
        static::$_instance = new MailChimp_Service();
        static::$_instance->setVersion($env->version);
        return static::$_instance;
    }

    /**
     * hook fired when we know everything is booted
     */
    public function wooIsRunning()
    {
        // make sure the site option for setting the mailchimp_carts has been saved.
        $this->validated_cart_db = get_site_option('mailchimp_woocommerce_db_mailchimp_carts');
        $this->is_admin = current_user_can('administrator');
    }

    /**
     * @param $r
     * @param $url
     * @return mixed
     */
    public function addHttpRequestArgs( $r, $url ) {
        // not sure whether or not we need to implement something like this yet.
        //$r['headers']['Authorization'] = 'Basic ' . base64_encode('username:password');
        return $r;
    }

    /**
     * @param $key
     * @param $default
     * @return mixed
     */
    protected function cookie($key, $default = null)
    {
        // if we're not allowed to use cookies, just return the default
        if ($this->is_admin || !mailchimp_allowed_to_use_cookie($key)) {
            return $default;
        }

        return isset($_COOKIE[$key]) ? $_COOKIE[$key] : $default;
    }

    /**
     * @param WC_Order $order
     */
    public function onNewPayPalOrder($order)
    {
        $this->onNewOrder($order->get_id());
    }

    /**
     * This should only fire on a web based order so we can do real campaign tracking here.
     *
     * @param $order_id
     * @return array|void
     */
    public function onNewOrder($order_id)
    {
        $order = MailChimp_WooCommerce_HPOS::get_order($order_id);
        if (!mailchimp_is_configured()) {
        	return;
        }

        // grab the landing site cookie if we have one here.
        $landing_site = $this->getLandingSiteCookie();
        if (empty($landing_site)) {
            $landing_site =  $order->get_meta('mailchimp_woocommerce_landing_site');
            if (!$landing_site) $campaign = null;
        }

        // expire the landing site cookie so we can rinse and repeat tracking
        $this->expireLandingSiteCookie();

        // remove this record from the db.
        $this->clearCartData();

        return array (
            'landing_site' => $landing_site
        );
    }

	/**
	 * @param $order_id
	 * @param $old_status
	 * @param $new_status
	 */
    public function handleOrderStatusChanged($order_id, $old_status, $new_status)
    {
        if (!mailchimp_is_configured()) return;

        $tracking = null;
        $newOrder = false;

        if ("pending" == $old_status && ("processing" == $new_status || "completed" == $new_status)) {
            $tracking = $this->onNewOrder($order_id);
            $newOrder = true;
        }

        mailchimp_log('debug', "Order ID {$order_id} was {$old_status} and is now {$new_status}", array('new_order' => $newOrder, 'tracking' => $tracking));

        $this->onOrderSave($order_id, $tracking, $newOrder);
    }

	/**
	 * @param $order_id
	 * @param null $tracking
	 * @param null $newOrder
	 */
    public function onOrderSave($order_id, $tracking = null, $newOrder = null)
    {
        if (!mailchimp_is_configured()) return;
        // queue up the single order to be processed.
        $landing_site = isset($tracking) && isset($tracking['landing_site']) ? $tracking['landing_site'] : null;
        $language = $newOrder ? substr( get_locale(), 0, 2 ) : null;

        $gdpr_fields = isset($_POST['mailchimp_woocommerce_gdpr']) ?
            $_POST['mailchimp_woocommerce_gdpr'] : false;

        $is_subscribed = isset($_POST['mailchimp_woocommerce_newsletter']) ?
            (bool) $_POST['mailchimp_woocommerce_newsletter'] : false;

        // update the post meta with landing site details
        if (!empty($landing_site)) {
            MailChimp_WooCommerce_HPOS::update_order_meta($order_id, 'mailchimp_woocommerce_landing_site', $landing_site);
            //update_post_meta($order_id, 'mailchimp_woocommerce_landing_site', $landing_site);
        }

        // if we have gdpr fields in the post - let's save them to the order
        if (!empty($gdpr_fields)) {
            MailChimp_WooCommerce_HPOS::update_order_meta($order_id, 'mailchimp_woocommerce_gdpr_fields', $gdpr_fields);
            //update_post_meta($order_id, "mailchimp_woocommerce_gdpr_fields", $gdpr_fields);
        }

		// on order save
        if ($is_subscribed) {
            MailChimp_WooCommerce_HPOS::update_order_meta($order_id, 'mailchimp_woocommerce_is_subscribed', $is_subscribed);
	        if ($order = MailChimp_WooCommerce_HPOS::get_order($order_id)) {
				if ($user_id = $order->get_user_id()) {
					update_user_meta($user_id, 'mailchimp_woocommerce_is_subscribed', $is_subscribed);
				}
	        }
        }

        $handler = new MailChimp_WooCommerce_Single_Order($order_id, null, $landing_site, $language, $gdpr_fields);
        $handler->is_update = $newOrder ? !$newOrder : null;
        $handler->is_admin_save = is_admin();

        mailchimp_handle_or_queue($handler, 90);
    }

    /**
     * @param $order_id
     */
    public function onPartiallyRefunded($order_id)
    {
        if (!mailchimp_is_configured()) return;

        $handler = new MailChimp_WooCommerce_Single_Order($order_id, null, null, null);
        $handler->partially_refunded = true;
        mailchimp_handle_or_queue($handler);
    }

    /**
     * Clear the card data for a user.
     */
    public function clearCartData()
    {
        if ($user_email = $this->getCurrentUserEmail()) {
            $this->deleteCart(mailchimp_hash_trim_lower($user_email));
        }
    }

	/**
	 * @param null $updated
	 *
	 * @return bool|mixed|null
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handleCartUpdated($updated = null)
    {
        if (mailchimp_carts_disabled()) {
            return $updated;
        }

        if ($updated === false || $this->is_admin || $this->cart_was_submitted || !mailchimp_is_configured()) {
            return !is_null($updated) ? $updated : false;
        }

        if (empty($this->cart)) {
            $this->cart = $this->getCartItems();
        }

        if (($user_email = $this->getCurrentUserEmail())) {

            // let's skip this right here - no need to go any further.
            if (mailchimp_email_is_privacy_protected($user_email)) {
                return !is_null($updated) ? $updated : false;
            }

            // if the user chose to send to subscribers only we need to do a quick check
            // to see if this email has already subscribed.
            if (mailchimp_carts_subscribers_only() || mailchimp_submit_subscribed_only()) {
                $transient_key = mailchimp_hash_trim_lower($user_email).".mc.status";
                $cached_status = mailchimp_get_transient($transient_key);
                if ($cached_status === null) {
                    $cached_status = mailchimp_get_subscriber_status($user_email);
                    mailchimp_set_transient($transient_key, $cached_status ? $cached_status : false, 300);
                }

                if (isset($cached_status['value'])) {
	                $cached_status = $cached_status['value'];
                }

                if ($cached_status !== 'subscribed') {
                    mailchimp_debug('filter', "preventing {$user_email} from submitting cart data due to subscriber settings.");
                    return $updated;
                }
            }

            $previous = $this->getPreviousEmailFromSession();

            $uid = mailchimp_hash_trim_lower($user_email);

            $unique_sid = $this->getUniqueStoreID();

            // delete the previous records.
            if (!empty($previous) && $previous !== $user_email) {

                if ($this->api()->deleteCartByID($unique_sid, $previous_email = mailchimp_hash_trim_lower($previous))) {
                    mailchimp_log('ac.cart_swap', "Deleted cart [$previous] :: ID [$previous_email]");
                }

                // going to delete the cart because we are switching.
                $this->deleteCart($previous_email);
            }

            // delete the current cart record if there is one
            $this->api()->deleteCartByID($unique_sid, $uid);

            if ($this->cart && !empty($this->cart)) {

                // track the cart locally so we can repopulate things for cross device compatibility.
                $this->trackCart($uid, $user_email);

                $this->cart_was_submitted = true;

                // get user language or default to admin main language
                $language = $this->user_language ?: substr(get_locale(), 0, 2);

                // fire up the job handler
                $handler = new MailChimp_WooCommerce_Cart_Update($uid, $user_email, $this->cart, $language);

                // if they had the checkbox checked - go ahead and subscribe them if this is the first post.
                //$handler->setStatus($this->cart_subscribe);

                mailchimp_handle_or_queue($handler);
            }

            return !is_null($updated) ? $updated : true;
        }

        return !is_null($updated) ? $updated : false;
    }

    /**
     * @param $post_id
     */
    public function handleNewCoupon($post_id)
    {
        $this->handleCouponSaved($post_id, new WC_Coupon($post_id));
    }

    /**
     * @param $post_id
     * @param null $coupon
     */
    public function handleCouponSaved($post_id, $coupon = null)
    {
        if (!mailchimp_is_configured()) return;

        if ($coupon instanceof WC_Coupon) {
            mailchimp_handle_or_queue(new MailChimp_WooCommerce_SingleCoupon($post_id));
        }
    }

    /**
     * @param $post_id
     */
    public function handleCouponRestored($post_id)
    {
        $this->handleCouponSaved($post_id, new WC_Coupon($post_id));
    }

    /**
     * @param WC_Data          $object   The deleted or trashed object.
	 * @param WP_REST_Response $response The response data.
     * @param WP_REST_Request  $request  The request sent to the API.
     */
    public function handleAPICouponTrashed($object, $response, $request)
    {
        try {
            $deleted = mailchimp_get_api()->deletePromoRule(mailchimp_get_store_id(), $request['id']);
            if ($deleted) mailchimp_log('api.promo_code.deleted', "deleted promo code {$request['id']}");
            else mailchimp_log('api.promo_code.delete_fail', "Unable to delete promo code {$request['id']}");
        } catch (Exception $e) {
            mailchimp_error('delete promo code', $e->getMessage());
        }
    }

    /**
     * When a product post has been updated, handle or queue syncing when key fields have changed.
     *
     * @param int     $post_ID     The ID of the post/product being updated
     * @param WP_Post $post_after  The post object as it existed before the update
     * @param WP_Post $post_before The post object as it exists after the update
     * @return void
     */
    public function handleProductUpdated( int $post_ID, WP_Post $post_after, WP_Post $post_before )
    {
        // Only work with products that have certain statuses
        if ('product' !== $post_after->post_type
            || in_array($post_after->post_status, array('trash', 'auto-draft', 'draft', 'pending'))
            || ! mailchimp_is_configured()
        ) {
            return;
        }

        // Check if product title or description has been altered
        if ($post_after->post_title !== $post_before->post_title
            || $post_after->post_content !== $post_before->post_content
        ) {
            mailchimp_handle_or_queue( new MailChimp_WooCommerce_Single_Product($post_ID), 5);
        }
    }

    /**
     * @param WC_Product $product
     * @param $data
     */
    public function handleProcessProductMeta($product, $data)
    {
        if (!is_array($data) || empty($data) || !$product) {
            return;
        }

        $valid_keys = apply_filters( 'mailchimp_filter_valid_keys', array(
            '_thumbnail_id',
            'description',
            'image_id',
            'price',
            'sku',
            'regular_price',
            'sale_price',
            '_stock_status',
            'stock_quantity',
            '_stock',
            'stock_status',
            'manage_stock',
            'gallery_image_ids',
            'name',
            'status',
            'slug',
        ) );

        // if there's not a valid prop in the update, just skip this.
        if (!array_intersect($valid_keys, $data)) {
            return;
        }

        mailchimp_debug('action', "handleProcessProductMeta {$product->get_id()} update being queued", array(
            'data' => $data,
        ));

        mailchimp_handle_or_queue(new MailChimp_WooCommerce_Single_Product($product->get_id()), 5);
    }

	/**
	 * When the _stock, _thumbnail_id,
     * meta is updated for a product, handle or queue syncing updates.
	 *
	 * @param int    $meta_id     The ID of the post meta entry that was updated
	 * @param int    $object_id   The ID of the object the post meta entry is attached to
	 * @param string $meta_key    The key of the meta entry that was updated
	 * @param mixed  $_meta_value The value of the meta entry that was updated
	 * @return void
	 */
	public function handleProductMetaUpdated($meta_id, $object_id, $meta_key, $_meta_value)
    {
		// If we're not working with the meta key used to store stock quantity, bail
		if (!in_array($meta_key, array('_thumbnail_id'), true)) {
			return;
		}

		// Confirm that we're working with an object that is a WooCommerce product with a certain status
		$product = wc_get_product($object_id);
		if ($product instanceof WC_Product &&
            !in_array($product->get_status(), array('trash', 'auto-draft', 'draft', 'pending'))
		) {
		    mailchimp_debug('queue', "handling meta update for meta [{$meta_key}] on product {$object_id}");
			mailchimp_handle_or_queue(new MailChimp_WooCommerce_Single_Product($object_id), 5);
		}
	}

	/**
	 * Add a listener that updates the marketing status timestamp on users when the subscription status is changed.
	 * @param $meta_id
	 * @param $object_id
	 * @param $meta_key
	 * @param $_meta_value
	 *
	 * @return void
	 */
	public function handleUserMetaUpdated($meta_id, $object_id, $meta_key, $_meta_value)
	{
		if ('mailchimp_woocommerce_is_subscribed' === $meta_key) {
			update_user_meta($object_id, 'mailchimp_woocommerce_marketing_status_updated_at', time());
		}
	}

	/**
	 * If a product has been updated and isn't an existing post, handle or queue syncing updates.
	 *
	 * @param int     $post_ID           The ID of the post that was updated/created
	 * @param WP_Post $post              The post object that was updated/created
	 * @param bool    $is_existing_post  Whether the updated post existed before the update
	 * @return void
	 */
	public function handleProductCreated($post_ID, WP_Post $post, $is_existing_post)
    {
		// Since the handleProductUpdated() function above handles product updates, bail for existing posts/products.
		if ($is_existing_post || !mailchimp_is_configured()) {
			return;
		}

		// If the product is of a certain status, process it.
		if (!in_array($post->post_status, array('trash', 'auto-draft', 'draft', 'pending'))) {
			mailchimp_handle_or_queue(new MailChimp_WooCommerce_Single_Product($post_ID), 5);
		}
	}

	/**
	 * If the product type has changed from variable to simple, then we delete this product from MailChimp.
	 *
	 * @param int $variation_id
	 */
	public function handleDeleteProductVariation($variation_id) {
		try {
			$deleted = mailchimp_get_api()->deleteStoreProduct(mailchimp_get_store_id(), $variation_id);
			if ($deleted) mailchimp_log('product.deleted', "deleted product variation {$variation_id}");
			else mailchimp_log('product.delete_fail', "Unable to deleted product variation {$variation_id}");
		} catch (Exception $e) {
			mailchimp_error('delete product variation', $e->getMessage());
		}
	}

    /**
     * Fire new order and order save handling/queueing events when a shop_order post is saved.
     *
     * @param $order_id
     * @param $order
     * @param $is_existing_post
     */
	public function handleOrderSaved($order_id, $order, $is_existing_post)
    {
		if (!mailchimp_is_configured()) {
			return;
		}

        $tracking = $this->onNewOrder($order_id);
        $this->onOrderSave($order_id, $tracking, !$is_existing_post);
	}

    /**
     * @param $order_id
     * @param $order
     */
	public function handleOrderCreate($order_id, $order = null) {
		if (empty($order)) $order = MailChimp_WooCommerce_HPOS::get_order($order_id);
        $this->handleOrderSaved($order_id, $order, false);
    }

	/**
	 * @param $order_id
	 * @param $order
	 */
	public function handleOrderUpdate($order_id, $order = null) {
		if (empty($order)) $order = MailChimp_WooCommerce_HPOS::get_order($order_id);
		mailchimp_log('handleOrderUpdate', 'order_status');
		$this->handleOrderSaved($order_id, $order, true);
	}

    /**
     * @param $post_id
     */
    public function handlePostTrashed($post_id)
    {
        if (!mailchimp_is_configured()) return;
        switch (MailChimp_WooCommerce_HPOS::get_type($post_id)) {
            case 'shop_coupon':
                try {
                    $deleted = mailchimp_get_api()->deletePromoRule(mailchimp_get_store_id(), $post_id);
                    if ($deleted) mailchimp_log('promo_code.deleted', "deleted promo code {$post_id}");
                    else mailchimp_log('promo_code.delete_fail', "Unable to delete promo code {$post_id}");
                } catch (Exception $e) {
                    mailchimp_error('delete promo code', $e->getMessage());
                }
                break;
            case 'product':
                try {
                    $deleted = mailchimp_get_api()->deleteStoreProduct(mailchimp_get_store_id(), $post_id);
                    if ($deleted) mailchimp_log('product.deleted', "deleted product {$post_id}");
                    else mailchimp_log('product.delete_fail', "Unable to deleted product {$post_id}");
                } catch (Exception $e) {
                    mailchimp_error('delete product', $e->getMessage());
                }
                break;
        }
    }

    /**
     * @param $post_id
     * @return void
     */
    public function handlePostRestored($post_id)
    {
        if (!mailchimp_is_configured() || !($post = MailChimp_WooCommerce_HPOS::get_type( $post_id ))) {
        	return;
        }

        // don't handle any of these statuses because they're not ready for the show
        if (in_array($post->post_status, array('trash', 'auto-draft', 'draft', 'pending'))) {
            return;
        }

        switch(get_post_type($post_id)) {
            case 'shop_coupon':
                $this->handleCouponRestored($post_id);
                break;
            case 'product':
                mailchimp_handle_or_queue(new MailChimp_WooCommerce_Single_Product($post_id), 5);
                break;
        }
    }

    /**
     * @param $user_id
     */
    public function handleUserRegistration($user_id)
    {
        if (!mailchimp_is_configured()) return;

        $subscribed = (bool) isset($_POST['mailchimp_woocommerce_newsletter']) && $_POST['mailchimp_woocommerce_newsletter'];

        if (isset($_POST['mailchimp_woocommerce_newsletter']) && $_POST['mailchimp_woocommerce_newsletter']) {
            $gdpr_fields = isset($_POST['mailchimp_woocommerce_gdpr']) ?
                $_POST['mailchimp_woocommerce_gdpr'] : false;
        } else {
        	$gdpr_fields = null;
        }

        // update the user meta with the 'is_subscribed' form element
        update_user_meta($user_id, 'mailchimp_woocommerce_is_subscribed', $subscribed);

        if ($subscribed) {
            $job = new MailChimp_WooCommerce_User_Submit($user_id, '1', null, null, $gdpr_fields);
            mailchimp_handle_or_queue($job);
        }
    }

    /**
     * @param $user_id
     * @param $old_user_data
     */
    function handleUserUpdated($user_id, $old_user_data)
    {
        if (!mailchimp_is_configured()) return;

        // check if user_my_account_opt_in_save is processing on frontend.
        if ( !is_admin() ) return;

        // only update this person if they were marked as subscribed before
        $is_subscribed = get_user_meta($user_id, 'mailchimp_woocommerce_is_subscribed', true);
        $gdpr_fields = get_user_meta($user_id, 'mailchimp_woocommerce_gdpr_fields', true);

        if ( ! $is_subscribed && mailchimp_submit_subscribed_only() ) {
	        mailchimp_debug('filter', "{$old_user_data->user_email} was blocked due to subscriber only settings");

	        return;
        }

        $job = new MailChimp_WooCommerce_User_Submit(
            $user_id,
            $is_subscribed,
            $old_user_data,
            null,
            !empty($gdpr_fields) ? $gdpr_fields : null
        );
        // only send this update if the user actually has a boolean value.
        mailchimp_handle_or_queue($job);
    }

    /**
     * Delete all the options pointing to the pages, and re-start the sync process.
     * @param bool $only_products
     * @return bool
     */
    protected function syncProducts($only_products = false)
    {
        if (!$this->isAdmin()) return false;
        $this->removePointers(true, ($only_products ? false : true));
        update_option('mailchimp-woocommerce-sync.orders.prevent', $only_products);
        MailChimp_WooCommerce_Process_Products::push();
        return true;
    }

    /**
     * Delete all the options pointing to the pages, and re-start the sync process.
     * @return bool
     */
    protected function syncOrders()
    {
        if (!$this->isAdmin()) return false;
        $this->removePointers(false);
        // since the products are all good, let's sync up the orders now.
        mailchimp_handle_or_queue(new MailChimp_WooCommerce_Process_Orders());
        return true;
    }

    /**
     * @return bool|string
     */
    public function getCurrentUserEmail()
    {
        if (isset($this->user_email) && !empty($this->user_email)) {
            return $this->user_email = strtolower($this->user_email);
        }

        $user = wp_get_current_user();
        $email = ($user->ID > 0 && isset($user->user_email)) ? $user->user_email : $this->getEmailFromSession();

        return $this->user_email = strtolower($email);
    }

    /**
     * @return bool|array
     */
    public function getCartItems()
    {
        if (!($this->cart = $this->getWooSession('cart', false))) {
			if (!function_exists('WC')) {
				$this->cart = false;
			} else if (WC()->cart) {
				$this->cart = WC()->cart->get_cart();
			} else {
				return false;
			}
        } else {
            $cart_session = array();
            foreach ( $this->cart as $key => $values ) {
                $cart_session[$key] = $values;
                unset($cart_session[$key]['data']); // Unset product object
            }
            return $this->cart = $cart_session;
        }

        return is_array($this->cart) ? $this->cart : false;
    }

	/**
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handleCampaignTracking()
    {
        if (!mailchimp_allowed_to_use_cookie('mailchimp_user_email')) {
            return;
        }

        // set the landing site cookie if we don't have one.
        $this->setLandingSiteCookie();

        $cookie_duration = $this->getCookieDuration();

        // if we have a query string of the mc_cart_id in the URL, that means we are sending a campaign from MC
        if (isset($_GET['mc_cart_id']) && !isset($_GET['removed_item'])) {

            // try to pull the cart from the database.
            if (($cart = $this->getCart($_GET['mc_cart_id'])) && !empty($cart)) {

                // set the current user email
                $this->user_email = trim(str_replace(' ','+', $cart->email));

                if (($current_email = $this->getEmailFromSession()) && $current_email !== $this->user_email) {
                    $this->previous_email = $current_email;
                    mailchimp_set_cookie('mailchimp_user_previous_email',$this->user_email, $cookie_duration, '/');
                }

                // cookie the current email
                mailchimp_set_cookie('mailchimp_user_email', $this->user_email, $cookie_duration, '/' );

                $cart_data = unserialize($cart->cart);

                if (!empty($cart_data)) {
                    // set the cart data.
                    $this->setWooSession('cart', unserialize($cart->cart));

                    mailchimp_debug('carts', "manually setting cart data for {$this->user_email}", array(
                        'cart_id' => $_GET['mc_cart_id'],
                        'cart' => $cart->cart,
                    ));
                }
            }
        }

        if (isset($_GET['mc_eid'])) {
            mailchimp_set_cookie('mailchimp_email_id', trim($_GET['mc_eid']), $cookie_duration, '/' );
        }
    }

    /**
     * @return bool
     * Checks if the current request is a WP REST API request.
     */
    function is_rest() {
        if (defined('REST_REQUEST') && REST_REQUEST
            || isset($_GET['rest_route'])
            && strpos( $_GET['rest_route'] , '/', 0 ) === 0)
            return true;

        global $wp_rewrite;
        if ($wp_rewrite === null) $wp_rewrite = new WP_Rewrite();

        $rest_url = wp_parse_url( trailingslashit( rest_url( ) ) );
        $current_url = wp_parse_url( add_query_arg( array( ) ) );
        return strpos( $current_url['path'] ?? '/', $rest_url['path'], 0 ) === 0;
    }

    /**
     * @return mixed|null
     */
    public function getLandingSiteCookie()
    {
        $cookie = $this->cookie('mailchimp_landing_site', false);

        if (empty($cookie)) {
            $cookie = $this->getWooSession('mailchimp_landing_site', false);
        }

        return $cookie;
    }

    /**
     * @return $this
     */
    public function setLandingSiteCookie()
    {
        // if we're not allowed to use this cookie, just return
        if (!mailchimp_allowed_to_use_cookie('mailchimp_landing_site')) {
            return $this;
        }

        if (isset($_GET['expire_landing_site'])) $this->expireLandingSiteCookie();

        // if we already have a cookie here, we need to skip it.
        if ($this->getLandingSiteCookie() != false) return $this;

        // grab the current landing url since it's a referral.
        $landing_site = home_url() . wp_unslash($_SERVER['REQUEST_URI']);

        // Catch all possible file requests to avoid false positives
        // We need to catch just real pages of the website
        // Catching images, videos and fonts file types
        preg_match("/^.*\.(ai|bmp|gif|ico|jpeg|jpg|png|ps|psd|svg|tif|tiff|fnt|fon|otf|ttf|3g2|3gp|avi|flv|h264|m4v|mkv|mov|mp4|mpg|mpeg|rm|swf|vob|wmv|aif|cda|mid|midi|mp3|mpa|ogg|wav|wma|wpl)$/i", $landing_site, $matches);

        if (!empty($landing_site) && !wp_doing_ajax() && ( count($matches) == 0 ) && !$this->is_rest() ) {
            mailchimp_set_cookie('mailchimp_landing_site', $landing_site, $this->getCookieDuration(), '/' );
            $this->setWooSession('mailchimp_landing_site', $landing_site);
        }

        return $this;
    }

    /**
     * @return array|bool|string
     */
    public function getReferer()
    {
        if (function_exists('wp_get_referer')) {
            return wp_get_referer();
        }
        if (!empty($_REQUEST['_wp_http_referer'])) {
            return wp_unslash($_REQUEST['_wp_http_referer']);
        } elseif (!empty($_SERVER['HTTP_REFERER'])) {
            return wp_unslash( $_SERVER['HTTP_REFERER']);
        }
        return false;
    }

    /**
     * @return $this
     */
    public function expireLandingSiteCookie()
    {
        if (!mailchimp_allowed_to_use_cookie('mailchimp_landing_site')) {
            return $this;
        }
        if ( !$this->is_rest() ) {
            mailchimp_set_cookie('mailchimp_landing_site', false, $this->getCookieDuration(), '/' );
            $this->setWooSession('mailchimp_landing_site', false);
        }

        return $this;
    }

    /**
     * @return bool
     */
    protected function getEmailFromSession()
    {
        return $this->cookie('mailchimp_user_email', false);
    }

    /**
     * @return bool
     */
    protected function getPreviousEmailFromSession()
    {
        if ($this->previous_email) {
            return $this->previous_email = strtolower($this->previous_email);
        }
        $email = $this->cookie('mailchimp_user_previous_email', false);
        return $email ? strtolower($email) : false;
    }

    /**
     * @param $key
     * @param null $default
     * @return mixed|null
     */
    public function getWooSession($key, $default = null)
    {
        if (!function_exists('WC')) return $default;

        if (!($woo = WC()) || empty($woo->session)) {
            return $default;
        }

        // not really sure why this would be the case, but if there is no session we can't get it anyway.
        if (!is_object($woo->session) || !method_exists($woo->session, 'get')) {
            return $default;
        }

        return $woo->session->get($key, $default);
    }

    /**
     * @param $key
     * @param $value
     * @return $this
     */
    public function setWooSession($key, $value)
    {
        if (!function_exists('WC')) return $this;

        if (!($woo = WC()) || empty($woo->session)) {
            return $this;
        }

        $woo->session->set($key, $value);

        return $this;
    }

    /**
     * @param $key
     * @return $this
     */
    public function removeWooSession($key)
    {
        if (!function_exists('WC')) return $this;

        if (!($woo = WC()) || empty($woo->session)) {
            return $this;
        }

        $woo->session->__unset($key);
        return $this;
    }

    /**
     *
     */
    public function get_user_by_hash()
    {
        if ($this->doingAjax() && isset($_GET['hash'])) {
            if (($cart = $this->getCart($_GET['hash']))) {
                $this->respondJSON(array('success' => true, 'email' => $cart->email));
            }
        }
        $this->respondJSON(array('success' => false, 'email' => false));
    }

	/**
	 * @param $email
	 *
	 * @return bool
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function set_user_from_block_checkout($email)
    {
        if (!mailchimp_allowed_to_use_cookie('mailchimp_user_email')) {
            return false;
        }
        if (!empty($email)) {
            $cookie_duration = $this->getCookieDuration();
            $this->user_email = trim(str_replace(' ','+', $email));
            if (($current_email = $this->getEmailFromSession()) && $current_email !== $this->user_email) {
                $this->previous_email = $current_email;
                $this->force_cart_post = true;
                mailchimp_set_cookie('mailchimp_user_previous_email',$this->user_email, $cookie_duration, '/' );
            }
            mailchimp_set_cookie('mailchimp_user_email', $this->user_email, $cookie_duration, '/' );
            $this->getCartItems();
//            if (isset($_GET['mc_language'])) {
//                $this->user_language = $_GET['mc_language'];
//            }
            $this->handleCartUpdated();
            return true;
        }
        return false;
    }

	/**
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function set_user_by_email()
    {
        if (mailchimp_carts_disabled()) {
            $this->respondJSON(array('success' => false, 'message' => 'filter blocked due to carts being disabled'));
        }

        if ($this->is_admin) {
            $this->respondJSON(array('success' => false, 'message' => 'admin carts are not tracked.'));
        }

        if (!mailchimp_allowed_to_use_cookie('mailchimp_user_email')) {
            $this->respondJSON(array('success' => false, 'email' => false, 'message' => 'filter blocked due to cookie preferences'));
        }

        if ($this->doingAjax() && isset($_POST['email'])) {
            $cookie_duration = $this->getCookieDuration();

            $this->user_email = trim(str_replace(' ','+', $_POST['email']));

            if (($current_email = $this->getEmailFromSession()) && $current_email !== $this->user_email) {
                $this->previous_email = $current_email;
                $this->force_cart_post = true;
                mailchimp_set_cookie('mailchimp_user_previous_email',$this->user_email, $cookie_duration, '/' );
            }

            mailchimp_set_cookie('mailchimp_user_email', $this->user_email, $cookie_duration, '/' );

            $this->getCartItems();

            if (isset($_POST['mc_language'])) {
                $this->user_language = $_POST['mc_language'];
            }

            if (isset($_POST['subscribed'])) {
                $this->cart_subscribe = (bool) $_POST['subscribed'];
            }

            $this->handleCartUpdated();

            $this->respondJSON(array(
                'success' => true,
                'email' => $this->user_email,
                'previous' => $this->previous_email,
                'cart' => $this->cart,
            ));
        }

        $this->respondJSON(array('success' => false, 'email' => false));
    }

    /**
     * @param string $time
     * @return int
     */
    protected function getCookieDuration($time = 'thirty_days')
    {
        $durations = array(
            'one_day' => 86400, 'seven_days' => 604800, 'fourteen_days' => 1209600, 'thirty_days' => 2419200,
        );

        if (!array_key_exists($time, $durations)) {
            $time = 'thirty_days';
        }

        return time() + $durations[$time];
    }

    /**
     * @param $key
     * @param bool $default
     * @return bool
     */
    protected function get($key, $default = false)
    {
        if (!isset($_REQUEST['mailchimp-woocommerce']) || !isset($_REQUEST['mailchimp-woocommerce'][$key])) {
            return $default;
        }
        return $_REQUEST['mailchimp-woocommerce'][$key];
    }

    /**
     * @param $uid
     * @return array|bool|null|object|void
     */
    protected function getCart($uid)
    {
        if (!$this->validated_cart_db) return false;

        global $wpdb;

        $table = "{$wpdb->prefix}mailchimp_carts";
        $statement = "SELECT * FROM $table WHERE id = %s";
        $sql = $wpdb->prepare($statement, $uid);

        if (($saved_cart = $wpdb->get_row($sql)) && !empty($saved_cart)) {
            return $saved_cart;
        }

        return false;
    }

	/**
	 * @param $uid
	 *
	 * @return bool
	 */
    protected function deleteCart($uid)
    {
        if (!$this->validated_cart_db) return false;

        global $wpdb;
        $table = "{$wpdb->prefix}mailchimp_carts";
        $sql = $wpdb->prepare("DELETE FROM $table WHERE id = %s", $uid);
        $wpdb->query($sql);

        return true;
    }

    /**
     * @param $uid
     * @param $email
     * @return bool
     */
    protected function trackCart($uid, $email)
    {
        if (!$this->validated_cart_db) return false;

        $hash = md5(strtolower($email));
        $transient_key = "mailchimp-woocommerce-cart-{$hash}";

        // let's set a transient here to block dup inserts
        if (get_site_transient($transient_key)) {
            return false;
        }

        // insert the transient
        set_site_transient($transient_key, true, 5);

        global $wpdb;

        // Some people don't want to see these logs when they're in debug mode
        $wpdb->suppress_errors();

        $table = "{$wpdb->prefix}mailchimp_carts";

        $statement = "SELECT * FROM $table WHERE id = %s";
        $sql = $wpdb->prepare($statement, $uid);

        $user_id = get_current_user_id();

        if (($saved_cart = $wpdb->get_row($sql)) && is_object($saved_cart)) {
            $statement = "UPDATE {$table} SET `cart` = '%s', `email` = '%s', `user_id` = %s WHERE `id` = '%s'";
            $sql = $wpdb->prepare($statement, array(maybe_serialize($this->cart), $email, $user_id, $uid));
            try {
                $wpdb->query($sql);
                delete_site_transient($transient_key);
            } catch (Exception $e) {
                return false;
            }
        } else {
            try {
                $wpdb->insert("{$wpdb->prefix}mailchimp_carts", array(
                    'id' => $uid,
                    'email' => $email,
                    'user_id' => (int) $user_id,
                    'cart'  => maybe_serialize($this->cart),
                    'created_at'   => gmdate('Y-m-d H:i:s', time()),
                ));
                delete_site_transient($transient_key);
            } catch (Exception $e) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param $data
     */
    protected function respondJSON($data)
    {
        header('Content-Type: application/json');
        echo json_encode($data);
        exit;
    }

    /**
     * @param null $obj_id
     * @return bool
     */
    public function mailchimp_process_single_job($obj_id = null) {
        try {
            // not sure why this is happening - but we need to prepare for it and return false when it does.
            if (empty($obj_id)) {
                return false;
            }
            // get job row from db
            global $wpdb;
            $sql = $wpdb->prepare( "SELECT * FROM {$wpdb->prefix}mailchimp_jobs	WHERE obj_id = %s", $obj_id );
            $job_row = $wpdb->get_row( $sql );

            if (is_null($job_row) || !is_object($job_row)) {
                mailchimp_error('action_scheduler.process_job.fail','Job '.current_action().' not found at '.$wpdb->prefix.'_mailchimp_jobs database table :: obj_id '.$obj_id);
                return false;
            }
            // get variables
            $job = unserialize($job_row->job);

            $job_id =$job_row->id;

            // process job
            $job->handle();

            // delete processed job
            $sql = $wpdb->prepare("DELETE FROM {$wpdb->prefix}mailchimp_jobs WHERE id = %s AND obj_id = %s", array($job_id, $obj_id));
            $wpdb->query($sql);

            return true;
        } catch (Exception $e) {
            $message = !empty($e->getMessage()) ? ' - ' . $e->getMessage() :'';

            mailchimp_debug('action_scheduler.process_job.fail', (isset($job) ? get_class($job) : '') . ' :: obj_id '.$obj_id . ' :: ' .get_class($e) . $message);
        }
        return false;
    }

	/**
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function mailchimp_process_sync_manager()
    {
        $sync_stats_manager = new MailChimp_WooCommerce_Process_Full_Sync_Manager();
        $sync_stats_manager->handle();
    }

    /**
     * Display the Mailchimp checkbox on the admin page
     * @param $user
     */
    public function user_subscribed_profile( $user )
    {
        $admin = MailChimp_WooCommerce_Admin::instance();
        $admin->display_user_profile_info( $user );
    }

    /**
     * Update the user meta from the admin page
     * @param $user_id
     */
    public function user_update_subscribe_status( $user_id )
    {
    	$subscribed = isset($_POST['mailchimp_woocommerce_is_subscribed_radio']) ? $_POST['mailchimp_woocommerce_is_subscribed_radio'] : '';
        $gdpr_fields = isset($_POST['mailchimp_woocommerce_gdpr']) ? $_POST['mailchimp_woocommerce_gdpr'] : null;

        // set a site transient that will prevent overlapping updates from refreshing the page on the admin user view
        mailchimp_set_transient("updating_subscriber_status.{$user_id}", true, 300);

        mailchimp_log("profile", 'user_update_subscribe_status', array(
            'subscribed' => $subscribed,
            'user_id' => $user_id,
            'gdpr_fields' => $gdpr_fields,
        ));

	    $user = get_user_by('id', $user_id);

	    if ( $user && $user->user_email ) {
		    $email_hash = md5( strtolower( trim( $user->user_email ) ) );
		    $list_id = mailchimp_get_list_id();
		    $transient = "mailchimp-woocommerce-subscribed.{$list_id}.{$email_hash}";
		    delete_site_transient( $transient );
	    }

        update_user_meta($user_id, 'mailchimp_woocommerce_is_subscribed', $subscribed);
        update_user_meta($user_id, 'mailchimp_woocommerce_gdpr_fields', $gdpr_fields);
        mailchimp_set_transient("mailchimp_woocommerce_gdpr_fields_{$user_id}", $gdpr_fields, 300);
    }
}

class-mailchimp-woocommerce.php                                                                                                                                                                                                                                20554         1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * The file that defines the core plugin class
 *
 * A class definition that includes attributes and functions used across both the
 * public-facing side of the site and the admin area.
 *
 * @link       https://mailchimp.com
 * @since      1.0.1
 *
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 */

/**
 * The core plugin class.
 *
 * This is used to define internationalization, admin-specific hooks, and
 * public-facing site hooks.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @since      1.0.0
 * @package    MailChimp_WooCommerce
 * @subpackage MailChimp_WooCommerce/includes
 * @author     Ryan Hungate <ryan@vextras.com>
 */
class MailChimp_WooCommerce
{

    /**
     * The loader that's responsible for maintaining and registering all hooks that power
     * the plugin.
     *
     * @since    1.0.0
     * @access   protected
     * @var      MailChimp_WooCommerce_Loader $loader Maintains and registers all hooks for the plugin.
     */
    protected $loader;

    /**
     * The unique identifier of this plugin.
     *
     * @since    1.0.0
     * @access   protected
     * @var      string $plugin_name The string used to uniquely identify this plugin.
     */
    protected $plugin_name;

    /**
     * The current version of the plugin.
     *
     * @since    1.0.0
     * @access   protected
     * @var      string $version The current version of the plugin.
     */
    protected $version;

    /**
     * @var string
     */
    protected $environment = 'production';

    protected $is_configured;

    protected static $logging_config = null;

    /**
     * @return object
     */
    public static function getLoggingConfig()
    {
        if (is_object(static::$logging_config)) {
            return static::$logging_config;
        }

        $plugin_options = get_option('mailchimp-woocommerce');
        $is_options = is_array($plugin_options);

        $api_key = $is_options && array_key_exists('mailchimp_api_key', $plugin_options) ?
            $plugin_options['mailchimp_api_key'] : false;

        $enable_logging = $is_options &&
            array_key_exists('mailchimp_debugging', $plugin_options) &&
            $plugin_options['mailchimp_debugging'];

        $account_id = $is_options && array_key_exists('mailchimp_account_info_id', $plugin_options) ?
            $plugin_options['mailchimp_account_info_id'] : false;

        $username = $is_options && array_key_exists('mailchimp_account_info_username', $plugin_options) ?
            $plugin_options['mailchimp_account_info_username'] : false;

        $api_key_parts = str_getcsv($api_key, '-');
        $data_center = isset($api_key_parts[1]) ? $api_key_parts[1] : 'us1';

        return static::$logging_config = (object)array(
            'enable_logging' => (bool)$enable_logging,
            'account_id' => $account_id,
            'username' => $username,
            'endpoint' => 'https://ecommerce.' . $data_center . '.list-manage.com/ecommerce/log',
        );
    }


    /**
     * Define the core functionality of the plugin.
     *
     * Set the plugin name and the plugin version that can be used throughout the plugin.
     * Load the dependencies, define the locale, and set the hooks for the admin area and
     * the public-facing side of the site.
     *
     * @param string $environment
     * @param string $version
     *
     * @since    1.0.0
     */
    public function __construct($environment = 'production', $version = '1.0.0')
    {
        $this->plugin_name = 'mailchimp-woocommerce';
        $this->version = $version;
        $this->environment = $environment;
        $this->is_configured = mailchimp_is_configured();

        $this->load_dependencies();
        $this->set_locale();
        $this->define_admin_hooks();
        $this->define_public_hooks();
        $this->define_gdpr_hooks();

        $this->activateMailChimpNewsletter();
        $this->activateMailChimpService();
        $this->applyQueryStringOverrides();
    }

    /**
     * @return void|bool
     */
    private function applyQueryStringOverrides()
    {
        // if we need to refresh the double opt in for any reason - just do it here.
        if ($this->queryStringEquals('mc_doi_refresh')) {
            try {
                $enabled_doi = mailchimp_list_has_double_optin(true);
            } catch (Exception $e) {
                mailchimp_error('mc.utils.doi_refresh', 'failed updating doi transient');
                return false;
            }
            mailchimp_log('mc.utils.doi_refresh', ($enabled_doi ? 'turned ON' : 'turned OFF'));
        }
        return;
    }

    /**
     * @param $key
     * @param string $value
     * @return bool
     */
    private function queryStringEquals($key, $value = '1')
    {
        return isset($_GET[$key]) && $_GET[$key] === $value;
    }

    /**
     * Load the required dependencies for this plugin.
     *
     * Include the following files that make up the plugin:
     *
     * - MailChimp_WooCommerce_Loader. Orchestrates the hooks of the plugin.
     * - MailChimp_WooCommerce_i18n. Defines internationalization functionality.
     * - MailChimp_WooCommerce_Admin. Defines all hooks for the admin area.
     * - MailChimp_WooCommerce_Public. Defines all hooks for the public side of the site.
     *
     * Create an instance of the loader which will be used to register the hooks
     * with WordPress.
     *
     * @since    1.0.0
     * @access   private
     */
    private function load_dependencies()
    {
        // fire up the loader
        $this->loader = new MailChimp_WooCommerce_Loader();

        // change up the queue to use the new rest api version
        $service = new MailChimp_WooCommerce_Rest_Api();
        $this->loader->add_action( 'rest_api_init', $service, 'register_routes');
    }

    /**
     * Define the locale for this plugin for internationalization.
     *
     * Uses the MailChimp_WooCommerce_i18n class in order to set the domain and to register the hook
     * with WordPress.
     *
     * @since    1.0.0
     * @access   private
     */
    private function set_locale()
    {
        $plugin_i18n = new MailChimp_WooCommerce_i18n();
        $this->loader->add_action('init', $plugin_i18n, 'load_plugin_textdomain');
    }

    /**
     * Define the GDPR additions from Automattic.
     */
    private function define_gdpr_hooks()
    {
        $gdpr = new MailChimp_WooCommerce_Privacy();

        $this->loader->add_action('admin_init', $gdpr, 'privacy_policy');
        $this->loader->add_filter('wp_privacy_personal_data_exporters', $gdpr, 'register_exporter');
        $this->loader->add_filter('wp_privacy_personal_data_erasers', $gdpr, 'register_eraser');
    }

	/**
	 * Register all of the hooks related to the admin area functionality
	 * of the plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_admin_hooks() {

		$plugin_admin = MailChimp_WooCommerce_Admin::instance();

		$this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles');
		$this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts');

		// Add menu item
		$this->loader->add_action('admin_menu', $plugin_admin, 'add_plugin_admin_menu', 71);

        // Add WooCommerce Navigation Bar
        $this->loader->add_action('admin_menu', $plugin_admin, 'add_woocommerce_navigation_bar');

        // Add Settings link to the plugin
		$plugin_basename = plugin_basename( plugin_dir_path( __DIR__ ) . $this->plugin_name . '.php');
		$this->loader->add_filter('plugin_action_links_' . $plugin_basename, $plugin_admin, 'add_action_links');

		// make sure we're listening for the admin init
        $this->loader->add_action('admin_init', $plugin_admin, 'options_update');
        $this->loader->add_action('admin_notices', $plugin_admin, 'initial_notice');
        // remove this for now
        //$this->loader->add_action('admin_notices', $plugin_admin, 'webook_initial_notice');
        $this->loader->add_action('admin_notices', $plugin_admin, 'action_scheduler_notice');
        
		// put the menu on the admin top bar.
		//$this->loader->add_action('admin_bar_menu', $plugin_admin, 'admin_bar', 100);

        $this->loader->add_action('plugins_loaded', $plugin_admin, 'update_db_check');
		$this->loader->add_action('upgrader_process_complete', $plugin_admin, 'plugin_upgrade_completed', 10, 2);
        $this->loader->add_action('init', $plugin_admin, 'update_plugin_check', 13);
        $this->loader->add_action('admin_init', $plugin_admin, 'setup_survey_form');
        $this->loader->add_action('admin_footer', $plugin_admin, 'inject_sync_ajax_call');

        // update MC store information when woocommerce general settings are saved
        $this->loader->add_action('woocommerce_settings_save_general', $plugin_admin, 'mailchimp_update_woo_settings');
        
        // update MC store information if "WooCommerce Multi-Currency Extension" settings are saved
        if ( class_exists( 'WOOMULTI_CURRENCY_F' ) ) {
            $this->loader->add_action('villatheme_support_woo-multi-currency', $plugin_admin, 'mailchimp_update_woo_settings');
        }

        // Mailchimp oAuth
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_oauth_start', $plugin_admin, 'mailchimp_woocommerce_ajax_oauth_start' );
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_oauth_status', $plugin_admin, 'mailchimp_woocommerce_ajax_oauth_status' );
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_oauth_finish', $plugin_admin, 'mailchimp_woocommerce_ajax_oauth_finish' );

        // Create new mailchimp Account methods
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_create_account_check_username', $plugin_admin, 'mailchimp_woocommerce_ajax_create_account_check_username' );
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_create_account_signup', $plugin_admin, 'mailchimp_woocommerce_ajax_create_account_signup' );
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_support_form', $plugin_admin, 'mailchimp_woocommerce_ajax_support_form' );

        // add Shop Manager capability to save options
        $this->loader->add_action('option_page_capability_mailchimp-woocommerce', $plugin_admin, 'mailchimp_woocommerce_option_page_capability');

        // set communications box status
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_communication_status', $plugin_admin, 'mailchimp_woocommerce_communication_status' );

        // set tower support status
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_tower_status', $plugin_admin, 'mailchimp_woocommerce_tower_status' );

        // Load log file via ajax
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_load_log_file', $plugin_admin, 'mailchimp_woocommerce_ajax_load_log_file' );

        // delete log file via ajax
        $this->loader->add_action( 'wp_ajax_mailchimp_woocommerce_delete_log_file', $plugin_admin, 'mailchimp_woocommerce_ajax_delete_log_file' );

    }

	/**
	 * Register all of the hooks related to the public-facing functionality
	 * of the plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 */
	private function define_public_hooks() {

		$plugin_public = MailChimp_WooCommerce_Public::instance();

		$this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_scripts');
        $this->loader->add_action('wp_footer', $plugin_public, 'add_inline_footer_script');

        $this->loader->add_action('woocommerce_after_checkout_form', $plugin_public, 'add_JS_checkout');
        $this->loader->add_action('woocommerce_register_form', $plugin_public, 'add_JS_checkout');

        // set my-account opt-in checkbox
        $this->loader->add_action('woocommerce_edit_account_form', $plugin_public, 'user_my_account_opt_in', 100);
        $this->loader->add_action('woocommerce_save_account_details', $plugin_public, 'user_my_account_opt_in_save', 1);

        // set order opt-in checkbox
//        $this->loader->add_filter('woocommerce_admin_billing_fields', $plugin_public, 'order_subscribe_user');
//        $this->loader->add_action('woocommerce_checkout_create_order', $plugin_public, 'save_order_subscribe_user', 220, 2);
//
//        // set order opt-in checkbox
//        $this->loader->add_action('woocommerce_admin_order_data_after_order_details', $plugin_public, 'order_subscribe_user');
//        $this->loader->add_action('woocommerce_process_shop_order_meta', $plugin_public, 'save_order_subscribe_user', 100, 1);
	}

	/**
	 * Handle the newsletter actions here.
	 */
	private function activateMailChimpNewsletter()
	{
		$service = MailChimp_Newsletter::instance();

		if ($this->is_configured && $service->isConfigured()) {

			$service->setEnvironment($this->environment);
			$service->setVersion($this->version);

			// adding the ability to render the checkbox on another screen of the checkout page.
			$render_on = $service->getOption('mailchimp_checkbox_action', 'woocommerce_after_checkout_billing_form');

			$this->loader->add_action($render_on, $service, 'applyNewsletterField');

			$this->loader->add_action('woocommerce_ppe_checkout_order_review', $service, 'applyNewsletterField');
			$this->loader->add_action('woocommerce_register_form', $service, 'applyNewsletterField');

			$this->loader->add_action('woocommerce_checkout_order_processed', $service, 'processNewsletterField', 10, 2);
			$this->loader->add_action('woocommerce_ppe_do_payaction', $service, 'processPayPalNewsletterField');
			$this->loader->add_action('woocommerce_register_post', $service, 'processRegistrationForm', 10, 3);
		}
	}

	/**
	 * Handle all the service hooks here.
	 */
	private function activateMailChimpService()
	{
		$service = MailChimp_Service::instance();
		if ($service->isConfigured()) {

			$service->setEnvironment($this->environment);
			$service->setVersion($this->version);

			// core hook setup
			$this->loader->add_action('admin_init', $service, 'adminReady');
			$this->loader->add_action('woocommerce_init', $service, 'wooIsRunning');

			// for the data sync we need to configure basic auth.
			$this->loader->add_filter('http_request_args', $service, 'addHttpRequestArgs', 10, 2);

			// campaign tracking
			$this->loader->add_action( 'init', $service, 'handleCampaignTracking' );

			// order hooks
            $this->loader->add_action('woocommerce_order_status_changed', $service, 'handleOrderStatusChanged', 11, 3);

			// refunds
            $this->loader->add_action('woocommerce_order_partially_refunded', $service, 'onPartiallyRefunded', 20);
            
            // set user profile info
            $this->loader->add_action('show_user_profile', $service, 'user_subscribed_profile', 100);
            $this->loader->add_action('edit_user_profile', $service, 'user_subscribed_profile', 100);
            $this->loader->add_action('personal_options_update', $service, 'user_update_subscribe_status', 100);
            $this->loader->add_action('edit_user_profile_update', $service, 'user_update_subscribe_status', 100);
            // cart hooks
            $this->loader->add_filter('woocommerce_update_cart_action_cart_updated', $service, 'handleCartUpdated');
			$this->loader->add_action('woocommerce_cart_item_set_quantity', $service, 'handleCartUpdated');
			$this->loader->add_action('woocommerce_add_to_cart', $service, 'handleCartUpdated');
			$this->loader->add_action('woocommerce_cart_item_removed', $service, 'handleCartUpdated');

			// save post hooks
			$this->loader->add_action('woocommerce_new_order', $service, 'handleOrderCreate', 200, 2);
            $this->loader->add_action('woocommerce_update_order', $service, 'handleOrderUpdate', 10, 2);
            $this->loader->add_action('save_post_product', $service, 'handleProductCreated', 10, 3);
            $this->loader->add_action('woocommerce_delete_product_variation', $service, 'handleDeleteProductVariation');

			// this needs to listen for the title and the description updates.
            $this->loader->add_action('post_updated', $service, 'handleProductUpdated', 10, 3);

			// here's the hook we need to check for "relevant fields" where we can see which property was updated.
			$this->loader->add_action('woocommerce_product_object_updated_props', $service, 'handleProcessProductMeta', 10, 2);

			// we need to listen for all 3 events because changes aren't the same as "new" or "deleted".
			$this->loader->add_action('updated_post_meta', $service, 'handleProductMetaUpdated', 10, 4);
            $this->loader->add_action('added_post_meta', $service, 'handleProductMetaUpdated', 10, 4);
            $this->loader->add_action('deleted_post_meta', $service, 'handleProductMetaUpdated', 10, 4);

			// hooks for user meta updates and additions
			$this->loader->add_action('added_user_meta', $service, 'handleUserMetaUpdated', 10, 4);
			$this->loader->add_action('updated_user_meta', $service, 'handleUserMetaUpdated', 10, 4);

			$this->loader->add_action('wp_trash_post', $service, 'handlePostTrashed');
            $this->loader->add_action('untrashed_post', $service, 'handlePostRestored');
			//coupons
            $this->loader->add_action('woocommerce_new_coupon', $service, 'handleNewCoupon');
            $this->loader->add_action('woocommerce_coupon_options_save', $service, 'handleCouponSaved', 10, 2);
            $this->loader->add_action('woocommerce_api_create_coupon', $service, 'handleCouponSaved', 9, 2);

            $this->loader->add_action('woocommerce_delete_coupon', $service, 'handlePostTrashed');
            $this->loader->add_action('woocommerce_trash_coupon', $service, 'handlePostTrashed');
            
            $this->loader->add_action('woocommerce_rest_delete_shop_coupon_object', $service, 'handleAPICouponTrashed', 10, 3);

			// handle the user registration hook
			$this->loader->add_action('user_register', $service, 'handleUserRegistration');
			// handle the user updated profile hook
			$this->loader->add_action('profile_update', $service, 'handleUserUpdated', 100, 2);

			// get user by hash ( public and private )
            $this->loader->add_action('wp_ajax_mailchimp_get_user_by_hash', $service, 'get_user_by_hash');
            $this->loader->add_action('wp_ajax_nopriv_mailchimp_get_user_by_hash', $service, 'get_user_by_hash');

            // set user by email hash ( public and private )
            $this->loader->add_action('wp_ajax_mailchimp_set_user_by_email', $service, 'set_user_by_email');
            $this->loader->add_action('wp_ajax_nopriv_mailchimp_set_user_by_email', $service, 'set_user_by_email');



            $jobs_classes = array(
                "MailChimp_WooCommerce_Single_Order",
                "MailChimp_WooCommerce_SingleCoupon",
                "MailChimp_WooCommerce_Single_Product",
                "MailChimp_WooCommerce_Cart_Update",
                "MailChimp_WooCommerce_User_Submit",
                "MailChimp_WooCommerce_Process_Coupons",
                "MailChimp_WooCommerce_Process_Orders",
                "MailChimp_WooCommerce_Process_Products",
                "MailChimp_WooCommerce_WebHooks_Sync"
            );
            foreach ($jobs_classes as $job_class) {
                $this->loader->add_action($job_class, $service, 'mailchimp_process_single_job');
            }
            
            // sync stats manager
            $this->loader->add_action('MailChimp_WooCommerce_Process_Full_Sync_Manager', $service, 'mailchimp_process_sync_manager');
		}
	}

	/**
	 * Run the loader to execute all of the hooks with WordPress.
	 *
	 * @since    1.0.0
	 */
	public function run() {
		$this->loader->run();
	}

	/**
	 * The name of the plugin used to uniquely identify it within the context of
	 * WordPress and to define internationalization functionality.
	 *
	 * @since     1.0.1
	 * @return    string    The name of the plugin.
	 */
	public function get_plugin_name() {
		return $this->plugin_name;
	}

	/**
	 * The reference to the class that orchestrates the hooks with the plugin.
	 *
	 * @since     1.0.1
	 * @return    MailChimp_WooCommerce_Loader    Orchestrates the hooks of the plugin.
	 */
	public function get_loader() {
		return $this->loader;
	}

	/**
	 * Retrieve the version number of the plugin.
	 *
	 * @since     1.0.1
	 * @return    string    The version number of the plugin.
	 */
	public function get_version() {
		return $this->version;
	}
}index.php                                                                                                                                                                                                                                                      26            1711191352  plugins/mailchimp-for-woocommerce/includes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php // Silence is goldenclass-mailchimp-woocommerce-abstract-sync.php                                                                                                                                                                                                                  10639         1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/14/16
 * Time: 11:54 AM
 */
abstract class MailChimp_WooCommerce_Abstract_Sync extends Mailchimp_Woocommerce_Job
{
    /**
     * @var MailChimp_WooCommerce_Api
     */
    private $api;

    /**
     * @var MailChimp_WooCommerce_MailChimpApi
     */
    private $mc;

    /**
     * @var string
     */
    private $plugin_name = 'mailchimp-woocommerce';

    /**
     * @var string
     */
    protected $store_id = '';

     /**
     * @var int
     */
    public $current_page = null;

    /**
     * @var int
     */
    public $items_per_page = 100;

    /**
     * MailChimp_WooCommerce_Abstract_Sync constructor.
     * @param int $current_page
     */
    public function __construct($current_page = 1)
    {
        $this->setCurrentPage($current_page);
    }

    /**
     * @return mixed
     */
    abstract public function getResourceType();

    /**
     * @return mixed
     */
    abstract protected function complete();

    /**
     * @return void
     */
    public function createSyncManagers()
    {
        switch ($this->getResourceType()) {
            case 'coupons':
                $post_count = mailchimp_get_coupons_count();
               break;
            case 'products':
                $post_count = mailchimp_get_product_count();
               break;
            case 'orders':
                $post_count = mailchimp_get_order_count();
               break;
           default:
                mailchimp_log('sync.error', $this->getResourceType().' is not a valid resource.');
               break;
        }
        
        $this->setData('sync.'.$this->getResourceType().'.started_at', time());

        $page = $this->getCurrentPage();

        while ($page - 1 <= ceil((int)$post_count / $this->items_per_page)) {
            $next = new static($page);
            mailchimp_handle_or_queue($next);
            $this->setResourcePagePointer(($page), $this->getResourceType());
            $page++;
        }
    }

	/**
	 * @param $current_page
	 */
    public function setCurrentPage($current_page)
    {
        $this->current_page = $current_page;
    }

     /**
     * @return string
     */
    public function getCurrentPage()
    {
        return $this->current_page;
    }

	/**
	 * @return mixed|string
	 */
    public function getStoreID()
    {
        return mailchimp_get_store_id();
    }

	/**
	 * Override this method to perform any actions required on each
	 * queue item. Return the modified item for further processing
	 * in the next pass through. Or, return false to remove the
	 * item from the queue.
	 *
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handle()
    {
        if (!mailchimp_is_configured()) {
            mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
            return false;
        }

        /// if we set something for an emergency stop through our admin, honor this
        if (mailchimp_get_data('emergency_stop')) {
            mailchimp_log('tower', 'Emergency stop sync has been issued. Please contact support to re-enable', array(
                'class' => get_called_class(),
            ));
            return false;
        }

        if (!($this->store_id = $this->getStoreID())) {
            mailchimp_debug(get_called_class().'@handle', 'store id not loaded');
            return false;
        }

        // set the last loop timestamp
        mailchimp_set_data( 'sync.last_loop_at', time() );

        // if we're being rate limited - we need to pause here.
        if ($this->isBeingRateLimited()) {
            // wait a few seconds
            sleep(3);
            // check this again
            if ($this->isBeingRateLimited()) {
                // ok - hold off for a few - let's re-queue the job.
                mailchimp_debug(get_called_class().'@handle', 'being rate limited - pausing for a few seconds...');
                $this->retry();
                return false;
            }
        }

        $page = $this->getResources();
        
        if (empty($page)) {
            mailchimp_debug(get_called_class().'@handle', 'could not find any more '.$this->getResourceType().' records ending on page '.$this->getResourcePagePointer());
            // call the completed event to process further
            $this->resourceComplete($this->getResourceType());
            $this->complete();

            return false;
        }


        // if we've got a 0 count, that means we're done.
        if ($page->count <= 0) {

            mailchimp_debug(get_called_class().'@handle', $this->getResourceType().' :: completing now!');

            // reset the resource page back to 1
            $this->resourceComplete($this->getResourceType());

            // call the completed event to process further
            $this->complete();

            return false;
        }

        // iterate through the items and send each one through the pipeline based on this class.
        foreach ($page->items as $resource) {
           switch ($this->getResourceType()) {
                case 'coupons':
                    mailchimp_handle_or_queue(new MailChimp_WooCommerce_SingleCoupon($resource));
                   break;
                case 'products':
                    mailchimp_handle_or_queue(new MailChimp_WooCommerce_Single_Product($resource));
                   break;
                case 'orders':
                    $order = new MailChimp_WooCommerce_Single_Order($resource);
                    $order->set_full_sync(true);
                    mailchimp_handle_or_queue($order);
                   break;
               default:
                    mailchimp_log('sync.error', $this->getResourceType().' is not a valid resource.');
                   break;
           }
        }

        return false;
    }

    /**
     * @return bool|object|stdClass
     */
    public function getResources()
    {
        $current_page = $this->getCurrentPage();
        if ($current_page === 'complete') {
            if (!$this->getData('sync.config.resync', false)) {
                return false;
            }

            $current_page = 1;
            $this->setResourcePagePointer($current_page);
            $this->setData('sync.config.resync', false);
        }

        return $this->api()->paginate($this->getResourceType(), $current_page, $this->items_per_page);
    }

    /**
     * @param null|string $resource
     * @return null
     */
    public function getResourcePagePointer($resource = null)
    {
        if (empty($resource)) $resource = $this->getResourceType();

        return $this->getData('sync.'.$resource.'.current_page', 1);
    }

    /**
     * @param $page
     * @param null $resource
     * @return MailChimp_WooCommerce_Abstract_Sync
     */
    public function setResourcePagePointer($page, $resource = null)
    {
        if (empty($resource)) $resource = $this->getResourceType();

        return $this->setData('sync.'.$resource.'.current_page', $page);
    }

    /**
     * @param null|string $resource
     * @return $this
     */
    protected function resourceComplete($resource = null)
    {
        if (empty($resource)) $resource = $this->getResourceType();

        $this->setData('sync.'.$resource.'.current_page', 'complete');

        return $this;
    }

    /**
     * @param null $resource
     * @return MailChimp_WooCommerce_Abstract_Sync
     */
    protected function setResourceCompleteTime($resource = null)
    {
        if (empty($resource)) $resource = $this->getResourceType();

        return $this->setData('sync.'.$resource.'.completed_at', time());
    }

    /**
     * @param null $resource
     * @return bool|DateTime
     */
    protected function getResourceCompleteTime($resource = null)
    {
        if (empty($resource)) $resource = $this->getResourceType();

        $time = $this->getData('sync.'.$resource.'.completed_at', false);

        if ($time > 0) {
            try {
                $date = new DateTime();
                $date->setTimestamp($time);
                return $date;
            } catch (Exception $e) {
                return false;
            }
        }

        return false;
    }

    /**
     * @param $key
     * @param null $default
     * @return null
     */
    public function getOption($key, $default = null)
    {
        $options = $this->getOptions();
        if (isset($options[$key])) {
            return $options[$key];
        }
        return $default;
    }

    /**
     * @param $key
     * @param $value
     * @return $this
     */
    public function setOption($key, $value)
    {
        $options = $this->getOptions();
        $options[$key] = $value;
        update_option($this->plugin_name, $options);
        return $this;
    }

    /**
     * @param $key
     * @param bool $default
     * @return bool
     */
    public function hasOption($key, $default = false)
    {
        return (bool) $this->getOption($key, $default);
    }

    /**
     * @return array
     */
    public function getOptions()
    {
        $options = get_option($this->plugin_name);
        return is_array($options) ? $options : array();
    }

    /**
     * @param $key
     * @param $value
     * @return $this
     */
    public function setData($key, $value)
    {
        update_option($this->plugin_name.'-'.$key, $value, 'yes');
        return $this;
    }

    /**
     * @param $key
     * @param null $default
     * @return mixed|void
     */
    public function getData($key, $default = null)
    {
        return get_option($this->plugin_name.'-'.$key, $default);
    }

    /**
     * @param $key
     * @return bool
     */
    public function removeData($key)
    {
        return delete_option($this->plugin_name.'-'.$key);
    }

    /**
     * @return MailChimp_WooCommerce_Api
     */
    protected function api()
    {
        if (empty($this->api)) {
            $this->api = new MailChimp_WooCommerce_Api();
        }
        return $this->api;
    }

    /**
     * @return MailChimp_WooCommerce_MailChimpApi
     */
    protected function mailchimp()
    {
        if (empty($this->mc)) {
            $this->mc = new MailChimp_WooCommerce_MailChimpApi($this->getOption('mailchimp_api_key'));
        }
        return $this->mc;
    }

    /**
     * @return bool
     */
    protected function isBeingRateLimited()
    {
        return (bool) mailchimp_get_transient('api-rate-limited', false);
    }
}
class-mailchimp-woocommerce-cart-update.php                                                                                                                                                                                                                    8560          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/15/16
 * Time: 11:42 AM
 */
class MailChimp_WooCommerce_Cart_Update extends Mailchimp_Woocommerce_Job
{
    public $id;
    public $email;
    public $previous_email;
    public $cart_data;
    public $ip_address;
    public $user_language;
    public $status = false;


	/**
	 * MailChimp_WooCommerce_Cart_Update constructor.
	 *
	 * @param null $uid
	 * @param null $email
	 * @param array $cart_data
	 * @param null $user_language
	 */
    public function __construct($uid = null, $email = null, array $cart_data = array(), $user_language = null)
    {
        if ($uid) {
            $this->id = $uid;
        }
        if ($email) {
            $this->email = $email;
        }
        if (!empty($cart_data)) {
            $this->cart_data = json_encode($cart_data);
        }

        if ($user_language) {
            $this->user_language = $user_language;
        }

        $this->assignIP();
    }

    public function setStatus($status)
    {
        $this->status = (bool) $status;

        return $this;
    }

    /**
     * @return null
     */
    public function assignIP()
    {
        $this->ip_address = isset($_SERVER['REMOTE_ADDR']) ? sanitize_text_field($_SERVER['REMOTE_ADDR']): null;

        if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && !empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $forwarded_address = explode(',', sanitize_text_field($_SERVER['HTTP_X_FORWARDED_FOR']));
            $this->ip_address = $forwarded_address[0];
        }

        return $this->ip_address;
    }

    /**
     * @return bool
     */
    public function handle()
    {
        if (($result = $this->process())) {
            mailchimp_log('ac.success', 'Added', array('api_response' => $result->toArray()));
        }

        return false;
    }

    /**
     * @return bool|MailChimp_WooCommerce_Cart
     */
    public function process()
    {
        try {

            if (!mailchimp_is_configured() || !($api = mailchimp_get_api())) {
                mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
                return false;
            }

            $options = get_option('mailchimp-woocommerce', array());
            $store_id = mailchimp_get_store_id();

            $this->cart_data = json_decode($this->cart_data, true);

            // delete it and the add it back.
            $api->deleteCartByID($store_id, $this->id);

            // if they emptied the cart ignore it.
            if (!is_array($this->cart_data) || empty($this->cart_data)) {
                return false;
            }

            $checkout_url = wc_get_checkout_url();

            if (mailchimp_string_contains($checkout_url, '?')) {
                $checkout_url .= '&mc_cart_id='.$this->id;
            } else {
                $checkout_url .= '?mc_cart_id='.$this->id;
            }

            $customer = new MailChimp_WooCommerce_Customer();
            $customer->setId($this->id);
            $customer->setEmailAddress($this->email);
            $customer->setOptInStatus($this->status);

            $cart = new MailChimp_WooCommerce_Cart();
            $cart->setId($this->id);

            $cart->setCheckoutUrl($checkout_url);
            $cart->setCurrencyCode();

            $cart->setCustomer($customer);

            $order_total = 0;
            $products = array();

            foreach ($this->cart_data as $hash => $item) {
                try {
                    $cart->addItem(($line = $this->transformLineItem($hash, $item)));
                    $qty = isset($item['quantity']) && is_numeric($item['quantity']) ? $item['quantity'] : 1;
                    if (($price = $line->getPrice()) && is_numeric($price)) {
                        $order_total += ($qty * $price);
                    }
                    $products[] = $line;
                } catch (Exception $e) {}
            }

            if (empty($products)) {
                return false;
            }

            $cart->setOrderTotal($order_total);

            try {
                try {
                    // if the post is successful we're all good.
                    if ($api->addCart($store_id, $cart, false) !== false) {
                        mailchimp_log('abandoned_cart.success', "email: {$customer->getEmailAddress()} :: checkout_url: $checkout_url");
                    }
                } catch (Exception $e) {
                    // for some reason this happens on carts and we need to make sure that this doesn't prevent
                    // the submission from going through.
                    if (mailchimp_string_contains($e->getMessage(), 'campaign with the')) {
                        // remove the campaign ID and re-submit
                        $cart->removeCampaignID();
                        if ($api->addCart($store_id, $cart, false) !== false) {
                            mailchimp_log('abandoned_cart.success', "email: {$customer->getEmailAddress()} :: checkout_url: $checkout_url");
                        }
                    } else {
                        throw $e;
                    }
                }
            } catch (Exception $e) {

                mailchimp_error('abandoned_cart.error', "email: {$customer->getEmailAddress()} :: attempting product update :: {$e->getMessage()}");

                // if we have an error it's most likely due to a product not being found.
                // let's loop through each item, verify that we have the product or not.
                // if not, we will add it.
                foreach ($products as $item) {
                    /** @var MailChimp_WooCommerce_LineItem $item */
                    $transformer = new MailChimp_WooCommerce_Single_Product($item->getProductID());
                    if (!$transformer->api()->getStoreProduct($store_id, $item->getProductId())) {
                        $transformer->handle();
                    }
                }

                // if the post is successful we're all good.
                $api->addCart($store_id, $cart, false);

                mailchimp_log('abandoned_cart.success', "email: {$customer->getEmailAddress()}");
            }

            // Maybe sync subscriber to set correct member.language
            mailchimp_member_data_update($this->email, $this->user_language, 'cart');

        } catch (MailChimp_WooCommerce_RateLimitError $e) {
            sleep(3);
            mailchimp_error('cart.error', mailchimp_error_trace($e, "RateLimited :: email {$this->email}"));
            $this->retry();
        } catch (Exception $e) {
            update_option('mailchimp-woocommerce-cart-error', $e->getMessage());
            mailchimp_error('abandoned_cart.error', $e);
        }

        return false;
    }

	/**
	 * @param $hash
	 * @param $item
	 *
	 * @return MailChimp_WooCommerce_LineItem
	 */
    protected function transformLineItem($hash, $item)
    {
        $variant_id = isset($item['variation_id']) && $item['variation_id'] > 0 ? $item['variation_id'] : null;
        $product_id = $item['product_id'];

        // if the line item has a total, and a quantity we can determine the proper price
        // that was in the cart at that time.
        if (isset($item['line_total']) && !empty($item['line_total'])) {
            if ($item['line_total'] > 0 && $item['quantity'] > 0) {
                $price = $item['line_total'] / $item['quantity'];
            }
        }

        // this is a fallback from now on.
        if (!isset($price) || empty($price)) {
            // if the cart contains a variant id with no parent id,
            // we need to use this instead of the main product id.
            if ($variant_id) {
                $product = wc_get_product($variant_id);
                if ( is_object( $product ) && method_exists( $product, 'get_parent_id' ) ) {
                    $product_id = $product->get_parent_id();
                } else {
                    $product = wc_get_product($product_id);
                }
            } else {
                $product = wc_get_product($product_id);
            }
            $price = $product ? $product->get_price() : 0;
        }

        $line = new MailChimp_WooCommerce_LineItem();
        $line->setId($hash);
        $line->setProductId($product_id);
        $line->setProductVariantId((!empty($variant_id) ? $variant_id : $product_id));
        $line->setQuantity($item['quantity']);
        $line->setPrice($price);
        return $line;
    }
}
class-mailchimp-woocommerce-full-sync-manager.php                                                                                                                                                                                                              6622          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php
/**
 * Created by Vextras.
 *
 * Name: Pedro Germani
 * Email: pedro.germani@gmail.com
 * Date: 04/07/2020
 */

if ( ! class_exists( 'MailChimp_WooCommerce_Process_Full_Sync_Manager' ) ) {
	class MailChimp_WooCommerce_Process_Full_Sync_Manager {
		/**
		 * @var string
		 */
		private $plugin_name = 'mailchimp-woocommerce';

		/**
		 * @throws MailChimp_WooCommerce_Error
		 * @throws MailChimp_WooCommerce_RateLimitError
		 * @throws MailChimp_WooCommerce_ServerError
		 */
		public function start_sync() {
			
			$this->flag_start_sync();
			
			$coupons_sync = new MailChimp_WooCommerce_Process_Coupons();
		
			// start sync processes creation
			$coupons_sync->createSyncManagers();

		}

		/**
		 * @return $this
		 */
		public function flag_start_sync() {
			$job = new MailChimp_Service();

			$job->removeSyncPointers();

			update_option("{$this->plugin_name}-sync.config.resync", false);
			update_option("{$this->plugin_name}-sync.orders.current_page", 1);
			update_option("{$this->plugin_name}-sync.products.current_page", 1);
			update_option("{$this->plugin_name}-sync.coupons.current_page", 1);

			update_option("{$this->plugin_name}-sync.syncing", true);
			update_option("{$this->plugin_name}-sync.started_at", time());

			// let this happen if they start the sync again.
			mailchimp_delete_transient('stop_sync');

			if (! get_option("{$this->plugin_name}-sync.completed_at")) {
				update_option("{$this->plugin_name}-sync.initial_sync", 1);
			} else delete_option("{$this->plugin_name}-sync.initial_sync");

			global $wpdb;
			try {
				$wpdb->show_errors(false);
				mailchimp_delete_as_jobs();
				mailchimp_flush_sync_job_tables();
				$wpdb->show_errors();
			} catch (Exception $e) {}

			mailchimp_log("{$this->plugin_name}-sync.started", "Starting Sync :: ".date('D, M j, Y g:i A'));

			// flag the store as syncing
			mailchimp_get_api()->flagStoreSync(mailchimp_get_store_id(), true);

			return $this;
		}

		/**
		 * @throws MailChimp_WooCommerce_Error
		 * @throws MailChimp_WooCommerce_RateLimitError
		 * @throws MailChimp_WooCommerce_ServerError
		 */
		function flag_stop_sync()
		{
			// this is the last thing we're doing so it's complete as of now.
			mailchimp_set_data('sync.syncing', false);
			mailchimp_set_data('sync.completed_at', time());

			// set the current sync pages back to 1 if the user hits resync.
			mailchimp_set_data('sync.orders.current_page', 1);
			mailchimp_set_data('sync.products.current_page', 1);
			mailchimp_set_data('sync.coupons.current_page', 1);

			$sync_started_at = get_option('mailchimp-woocommerce-sync.started_at');
			$sync_completed_at = get_option('mailchimp-woocommerce-sync.completed_at');

			$sync_total_time = $sync_completed_at - $sync_started_at;
			$time = gmdate("H:i:s",$sync_total_time);

			mailchimp_log('sync.completed', "Finished Sync :: ".date('D, M j, Y g:i A'). " (total time: ".$time.")");

			// flag the store as sync_finished
			mailchimp_get_api()->flagStoreSync(mailchimp_get_store_id(), false);

			// send the sync finished email.
			MailChimp_WooCommerce_Admin::instance()->mailchimp_send_sync_finished_email();
			
			mailchimp_update_communication_status();

		}

		/**
		 * @throws MailChimp_WooCommerce_Error
		 * @throws MailChimp_WooCommerce_RateLimitError
		 * @throws MailChimp_WooCommerce_ServerError
		 */
		public function handle(){
			// if we have a transient telling us to stop this sync, just break out here instead of
			// respawn and try to delete.
			if (mailchimp_get_transient('stop_sync', false)) {
				return;
			}
			
			// get started queueing processes
			$started = array(
				'coupons' => get_option('mailchimp-woocommerce-sync.coupons.started_at'),
				'products' => get_option('mailchimp-woocommerce-sync.products.started_at'),
				'orders' => get_option('mailchimp-woocommerce-sync.orders.started_at')
			);

			// get completed queueing processes
			$completed = array(
				'coupons' => get_option('mailchimp-woocommerce-sync.coupons.completed_at'),
				'products' => get_option('mailchimp-woocommerce-sync.products.completed_at'),
				'orders' => get_option('mailchimp-woocommerce-sync.orders.completed_at')
			);

			// allow products and coupons to be synced simultaneously
			if ($started['coupons'] && !$started['products']) {
				mailchimp_log('sync.full_sync_manager.queue', 'Starting PRODUCTS queueing.');
				//create Product Sync object
				$product_sync = new MailChimp_WooCommerce_Process_Products();
	
				// queue first job
				//mailchimp_handle_or_queue($product_sync);
				
				//trigger subsequent jobs creation
				$product_sync->createSyncManagers();			
			}

			// Only start orders when product jobs are all finished
			if ($completed['products'] && !$started['orders'] ) {
				// check if we have products still to be synced
				if (mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Single_Product') == 0 && mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Process_Products') <= 0) {
					
					$prevent_order_sync = get_option('mailchimp-woocommerce-sync.orders.prevent', false);

					// only do this if we're not strictly syncing products ( which is the default ).
					if (!$prevent_order_sync) {
						// since the products are all good, let's sync up the orders now.
						$order_sync = new MailChimp_WooCommerce_Process_Orders();
						// // queue first job
						//mailchimp_handle_or_queue($order_sync);
						// //trigger subsequent jobs creation
						$order_sync->createSyncManagers();
					}

					// since we skipped the orders feed we can delete this option.
					delete_option('mailchimp-woocommerce-sync.orders.prevent');	
				}
				
			}

			if ($completed['orders']) {
				if (mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Single_Order') <= 0 && mailchimp_get_remaining_jobs_count('MailChimp_WooCommerce_Process_Orders') <= 0) {
					mailchimp_set_transient('stop_sync', 600);
					$this->flag_stop_sync();
					mailchimp_log('sync', "Sync manager has finished queuing jobs and flagged the store as not syncing.");
                    try {
                        as_unschedule_action('MailChimp_WooCommerce_Process_Full_Sync_Manager', array(), 'mc-woocommerce' );
                    } catch (Exception $e) {
                    	mailchimp_error('sync.unschedule.error', $e->getMessage());
                    }
					return true;
				}
			}

			// Trigger respawn
			$this->recreate();
		}

		/**
		 *
		 */
		protected function recreate()
		{
			as_schedule_single_action(strtotime( '+10 seconds' ), 'MailChimp_WooCommerce_Process_Full_Sync_Manager', array(), 'mc-woocommerce' );	
		}
	}
}
class-mailchimp-woocommerce-job.php                                                                                                                                                                                                                            849           1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

if ( ! class_exists( 'Mailchimp_Woocommerce_Job' ) ) {
	abstract class Mailchimp_Woocommerce_Job {

		private $attempts = 0;

		/**
		 * @param $attempts
		 */
		public function set_attempts( $attempts ) {
			$this->attempts = (int) $attempts;
		}

		/**
		 * @return int
		 */
		public function get_attempts( ) {
			return $this->attempts;
		}

		/**
		 * @param int $delay
		 */
		public function retry( $delay = 30 ) {
			$job = $this;
			if (null == $job->attempts) $job->set_attempts(0);
			$job->set_attempts($job->get_attempts() + 1);
			mailchimp_as_push($job, $delay);
		}

		/**
		 * @return $this
		 */
		protected function applyRateLimitedScenario()
		{
			mailchimp_set_transient('api-rate-limited', true );

			$this->retry();

			return $this;
		}
		
		/**
		 * Handle the job.
		 */
		abstract public function handle();

	}
}
class-mailchimp-woocommerce-process-coupons.php                                                                                                                                                                                                                1035          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 10/06/17
 * Time: 10:57 AM
 */
class MailChimp_WooCommerce_Process_Coupons extends MailChimp_WooCommerce_Abstract_Sync
{
    /**
     * @var string
     */
    protected $action = 'mailchimp_woocommerce_process_coupons';

    /**
     * Resync the products
     */
    public static function push()
    {
        $service = MailChimp_Service::instance();
        $service->removePointers(true, false);
        $coupons_sync = new MailChimp_WooCommerce_Process_Coupons();
        $coupons_sync->createSyncManagers();
    }

    /**
     * @return string
     */
    public function getResourceType()
    {
        return 'coupons';
    }

    /**
     * After the resources have been loaded and pushed
     */
    protected function complete()
    {
        mailchimp_log('coupon_sync.completed', 'Done with the coupon queueing.');

        // add a timestamp for the orders sync completion
        $this->setResourceCompleteTime();
    }
}
class-mailchimp-woocommerce-process-orders.php                                                                                                                                                                                                                 1094          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/14/16
 * Time: 10:57 AM
 */
class MailChimp_WooCommerce_Process_Orders extends MailChimp_WooCommerce_Abstract_Sync
{
    /**
     * @var string
     */
    protected $action = 'mailchimp_woocommerce_process_orders';
    public $items = array();

    /**
     * Resync just the orders
     */
    public static function push()
    {
        $service = MailChimp_Service::instance();
        $service->removePointers(false);
        $sync = new MailChimp_WooCommerce_Process_Orders();
        $sync->createSyncManagers();
        $service->setData('sync.config.resync', true);
    }

    /**
     * @return string
     */
    public function getResourceType()
    {
        return 'orders';
    }

    /**
     * After the resources have been loaded and pushed
     */
    protected function complete()
    {
        mailchimp_log('order_sync.completed', 'Done with the order queueing.');

        // add a timestamp for the orders sync completion
        $this->setResourceCompleteTime();
    }

}
class-mailchimp-woocommerce-process-products.php                                                                                                                                                                                                               1054          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/14/16
 * Time: 10:57 AM
 */
class MailChimp_WooCommerce_Process_Products extends MailChimp_WooCommerce_Abstract_Sync
{
    /**
     * @var string
     */
    protected $action = 'mailchimp_woocommerce_process_products';

    /**
     * Resync the products
     */
    public static function push()
    {
        $service = MailChimp_Service::instance();
        $service->removePointers(true, false);
        $sync = new MailChimp_WooCommerce_Process_Products();
        $sync->createSyncManagers();
    }


    /**
     * @return string
     */
    public function getResourceType()
    {
        return 'products';
    }

    /**
     * Called after all the products have been iterated and processed into MailChimp
     */
    protected function complete()
    {
        mailchimp_log('product_sync.completed', 'Done with the product queuing');

        // add a timestamp for the product sync completion
        $this->setResourceCompleteTime();
    }
}
class-mailchimp-woocommerce-single-coupon.php                                                                                                                                                                                                                  3003          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 10/6/17
 * Time: 11:14 AM
 */
class MailChimp_WooCommerce_SingleCoupon extends Mailchimp_Woocommerce_Job
{
    public $coupon_data;
    public $id;

    /**
     * MailChimp_WooCommerce_Coupon_Sync constructor.
     * @param $id
     */
    public function __construct($id = null)
    {
        $this->setId($id);
    }

    /**
     * @param null $id
     * @return MailChimp_WooCommerce_SingleCoupon
     */
    public function setId($id)
    {
        if (!empty($id)) {
            $this->id = $id instanceof WP_Post ? $id->ID : $id;
        }
        return $this;
    }

	/**
	 * @return false|void
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handle()
    {
        try {

            if (!mailchimp_is_configured()) {
                mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
                return false;
            }

            if (empty($this->id)) {
                mailchimp_error('promo_code_submit.failure', "could not process coupon {$this->id}");
                return;
            }

            $api = mailchimp_get_api();
            $store_id = mailchimp_get_store_id();

            $transformer = new MailChimp_WooCommerce_Transform_Coupons();
            $code = $transformer->transform($this->id);

            $api->addPromoRule($store_id, $code->getAttachedPromoRule());
            $api->addPromoCodeForRule($store_id, $code->getAttachedPromoRule(), $code);

            mailchimp_log('promo_code_submit.success', "#{$this->id} :: code: {$code->getCode()}");
        } catch (MailChimp_WooCommerce_RateLimitError $e) {
            sleep(3);
            $promo_code = isset($code) ? "code {$code->getCode()}" : "id {$this->id}";
            mailchimp_error('promo_code_submit.error', mailchimp_error_trace($e, "RateLimited :: #{$promo_code}"));
            $this->applyRateLimitedScenario();
            throw $e;
        } catch (MailChimp_WooCommerce_ServerError $e) {
	        $promo_code = isset($code) ? "code {$code->getCode()}" : "id {$this->id}";
            mailchimp_error('promo_code_submit.error', mailchimp_error_trace($e, "error updating promo rule #{$this->id} :: {$promo_code}"));
            throw $e;
        } catch (MailChimp_WooCommerce_Error $e) {
	        $promo_code = isset($code) ? "code {$code->getCode()}" : "id {$this->id}";
            mailchimp_error('promo_code_submit.error', mailchimp_error_trace($e, "error updating promo rule #{$this->id} :: {$promo_code}"));
            throw $e;
        } catch (Exception $e) {
            $promo_code = isset($code) ? "code {$code->getCode()}" : "id {$this->id}";
            mailchimp_error('promo_code_submit.exception', mailchimp_error_trace($e, "error updating promo rule :: {$promo_code}"));
            throw $e;
        }
        return;
    }
}
class-mailchimp-woocommerce-single-order.php                                                                                                                                                                                                                   21861         1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/15/16
 * Time: 11:42 AM
 */


class MailChimp_WooCommerce_Single_Order extends Mailchimp_Woocommerce_Job
{
    public $id;
    public $cart_session_id;
    public $landing_site;
    public $user_language;
    public $is_update = false;
    public $is_admin_save = false;
    public $is_full_sync = false;
    public $partially_refunded = false;
    public $gdpr_fields = false;
    protected $woo_order_number = false;
    protected $is_amazon_order = false;
    protected $is_privacy_restricted = false;
	/**
	 * @var null|WC_Order|WC_Order_Refund
	 */
	protected $woo_order = null;

	/**
	 * MailChimp_WooCommerce_Single_Order constructor.
	 *
	 * @param null $id
	 * @param null $cart_session_id
	 * @param null $landing_site
	 * @param null $user_language
	 * @param null $gdpr_fields
	 */
    public function __construct($id = null, $cart_session_id = null, $landing_site = null, $user_language = null, $gdpr_fields = null)
    {
        if (!empty($id)) $this->id = $id;
        if (!empty($cart_session_id)) $this->cart_session_id = $cart_session_id;
        if (!empty($landing_site)) $this->landing_site = $landing_site;
        if (!empty($user_language)) $this->user_language = $user_language;
        if (!empty($gdpr_fields)) $this->gdpr_fields = $gdpr_fields;
    }

    /**
     * @param null $id
     * @return MailChimp_WooCommerce_Single_Order
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

	/**
	 * @param $is_full_sync
	 *
	 * @return $this
	 */
    public function set_full_sync($is_full_sync)
    {
        $this->is_full_sync = $is_full_sync;

        return $this;
    }

	/**
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handle()
    {
        $this->process();
        return false;
    }

	/**
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function process()
    {
        if (!mailchimp_is_configured() || !($api = mailchimp_get_api())) {
            mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
            return false;
        }

        $store_id = mailchimp_get_store_id();

		// this will set the woo_order variable or return false.
        if (!($woo_order_number = $this->getRealOrderNumber())) {
            mailchimp_log('order_submit.failure', "There is no real order number to use for order ID {$this->id}.");
            return false;
        }

        $order_post_type_list = apply_filters( 'mailchimp_should_push_order_post_type_list', [
	        'shop_order'
        ]);

        if ( ! in_array( $this->woo_order->get_type(), $order_post_type_list ) ) {
            mailchimp_log('filter', "Order {$woo_order_number} was skipped by the filter");
            return false;
        }

	    $wordpress_user_id = $this->woo_order->get_user_id();
	    $user = $wordpress_user_id ? get_user_by( 'ID', $wordpress_user_id ) : false;

	    if ( $user ) {
		    $restricted_roles = array('administrator');
		    $allowed_roles = array();
		    $allowed_roles = apply_filters('mailchimp_campaign_user_roles', $allowed_roles );
		    if ( ( count( $allowed_roles ) && count( array_intersect( $allowed_roles, $user->roles ) ) === 0 ) || ( count( array_intersect( $restricted_roles, $user->roles ) ) !== 0 ) ) {
			    mailchimp_log( 'order_process', "Order #{$woo_order_number} skipped, user #{$this->woo_order->get_user_id()} user role is not in the list" );
			    return false;
		    }
	    }

        $job = new MailChimp_WooCommerce_Transform_Orders();

        try {
            $call = $api->getStoreOrder($store_id, $woo_order_number, true) ? 'updateStoreOrder' : 'addStoreOrder';
        } catch (Exception $e) {
            if ($e instanceof MailChimp_WooCommerce_RateLimitError) {
                sleep(2);
                mailchimp_error('order_submit.error', mailchimp_error_trace($e, "RateLimited :: #{$this->id}"));
                $this->retry();
            }
            $call = 'addStoreOrder';
        }

        $new_order = $call === 'addStoreOrder';

        if (!$this->is_admin_save && $new_order && $this->is_update === true) {
			mailchimp_log('order_submit.filter', "Order ID {$this->id} was new, but skipping because this job was supposed to be an update.");
            return false;
        }

        // if we already pushed this order into the system, we need to unset it now just in case there
        // was another campaign that had been sent and this was only an order update.
        if (!$new_order) {
            $this->landing_site = null;
        }

	    $email = null;

        // will either add or update the order
        try {
            // transform the order
            $order = $job->transform($this->woo_order);

			$original_woo_status = $order->getOriginalWooStatus();

            // don't allow this to happen.
            if ($original_woo_status === 'checkout-draft') {
                mailchimp_debug('filter', "Order {$woo_order_number} is in draft status and can not be submitted");
                return false;
            }

            // if the order is new, and has been flagged as a status that should not be pushed over to
            // Mailchimp - just ignore it and log it.
            if ($new_order && $order->shouldIgnoreIfNotInMailchimp()) {
                mailchimp_debug('filter', "order {$woo_order_number} is in {$original_woo_status} status, and is being skipped for now.");
                return false;
            }

            // see if we need to prevent this order from being submitted.
            $email = $order->getCustomer()->getEmailAddress();
            // see if we have a bad email

            if ($this->shouldSkipOrder($email, $order->getId())) {
                return false;
            }

			$original_status = $order->getCustomer()->getOriginalSubscriberStatus();
            $status = $order->getCustomer()->getOptInStatus();
            $transient_key = mailchimp_hash_trim_lower($email).".mc.status";
            $current_status = null;
            $pulled_member = false;

			// if the customer did not actually check the box, this will always be false.
	        // we needed to use this flag because when using double opt in, the status gets
	        // overwritten to allow us to submit a pending status to the list member endpoint
	        // which fires the double opt in.
            if (!$original_status && mailchimp_submit_subscribed_only()) {
                try {
                    $subscriber = $api->member(mailchimp_get_list_id(), $email);
                    $current_status = $subscriber['status'];
                    mailchimp_set_transient($transient_key, $current_status);
                    if ($current_status != 'subscribed') {
                        mailchimp_debug('filter', "#{$woo_order_number} was blocked due to subscriber only settings and current mailchimp status was {$current_status}");
                        return false;
                    }
                } catch (Exception $e) {
                    mailchimp_set_transient($transient_key, $current_status);
                    mailchimp_debug('filter', "#{$woo_order_number} was blocked due to subscriber only settings");
                    return false;
                }
                $pulled_member = true;
            }

            if ($this->is_full_sync) {
                // see if this store has the auto subscribe setting enabled on initial sync
                $plugin_options = get_option('mailchimp-woocommerce');
                $should_auto_subscribe = (bool) $plugin_options['mailchimp_auto_subscribe'];

                // since we're syncing the customer for the first time, this is where we need to add the override
                // for subscriber status. We don't get the checkbox until this plugin is actually installed and working!
                if (!$status) {
                    try {
                        if (!$pulled_member) {
                            $subscriber = $api->member(mailchimp_get_list_id(), $order->getCustomer()->getEmailAddress());
                            $current_status = $subscriber['status'];
                            $pulled_member = true;
                        }

                        if ($pulled_member && $current_status != 'archived' && isset($subscriber)) {
                            $status = !in_array( $subscriber['status'], array('unsubscribed', 'transactional') );
                            $order->getCustomer()->setOptInStatus($status);
                            if ($subscriber['status'] === 'transactional') {
                                $new_status = '0';
                            } else if ($subscriber['status'] === 'subscribed') {
                                $new_status = '1';
                            } else {
                                $new_status = $subscriber['status'];
                            }
                            // if the wordpress user id is not empty, and the status is subscribed, we can update the
	                        // subscribed status meta so it reflects the current status of Mailchimp during a sync.
                            if ($wordpress_user_id && $current_status) {
                                update_user_meta($wordpress_user_id, 'mailchimp_woocommerce_is_subscribed', $new_status);
	                        }
                        }
                    } catch (Exception $e) {
                        if ($e instanceof MailChimp_WooCommerce_RateLimitError) {
                            mailchimp_error('order_sync.error', mailchimp_error_trace($e, "GET subscriber :: {$order->getId()}"));
                            throw $e;
                        }
                        // if they are using double opt in, we need to pass this in as false here so it doesn't auto subscribe.
	                    $doi = mailchimp_list_has_double_optin(false);
                        $status = $doi ? false : $should_auto_subscribe;
                        $order->getCustomer()->setOptInStatus($status);
                    }
                }
            }

            // will be the same as the customer id. an md5'd hash of a lowercased email.
            $this->cart_session_id = $order->getCustomer()->getId();

            if ($original_woo_status !== 'pending') {
                // delete the AC cart record.
                $deleted_abandoned_cart = !empty($this->cart_session_id) && $api->deleteCartByID($store_id, $this->cart_session_id);
            }

            // skip amazon orders and skip privacy protected orders.
            if ($order->isFlaggedAsAmazonOrder()) {
                mailchimp_log('validation.amazon', "Order #{$woo_order_number} was placed through Amazon. Skipping!");
                return false;
            } elseif ($order->isFlaggedAsPrivacyProtected()) {
                mailchimp_log('validation.gdpr', "Order #{$woo_order_number} is GDPR restricted. Skipping!");
                return false;
            }

            if ($new_order) {
                // if single sync and
                // if the order is in failed or cancelled status - and it's brand new, we shouldn't submit it.
                if (!$this->is_full_sync && in_array($order->getFinancialStatus(), array('failed', 'cancelled')) || $original_woo_status === 'pending') {
                    mailchimp_log('order_submit', "#{$order->getId()} has a financial status of {$order->getFinancialStatus()} and was skipped.");
                    return false;
                }
                // if full sync and
                // if the original woocommerce status is actually pending, we need to skip these on new orders because
                // it is probably happening due to 3rd party payment processing and it's still pending. These orders
                // don't always make it over because someone could be cancelling out of the payment there.
                if ($this->is_full_sync && !in_array(strtolower($order->getFinancialStatus()), array('processing', 'completed', 'paid'))) {
                    mailchimp_log('order_submit', "#{$order->getId()} has a financial status of {$order->getFinancialStatus()} and was skipped.");
                    return false;
                }
            }

            // if the order is brand new, and we already have a paid status,
            // we need to double up the post to force the confirmation + the invoice.
            if ($new_order && $order->getFinancialStatus() === 'paid') {
                $order->setFinancialStatus('pending');
                $order->confirmAndPay(true);
            }

            // if we're overriding this we need to set it here.
            if ($this->partially_refunded) {
                $order->setFinancialStatus('partially_refunded');
            }

            $log = "$call :: #{$order->getId()} :: email: {$email}";

            // only do this stuff on new orders
	        // apply the landing site if we have one.
	        if ( $new_order && ! empty( $this->landing_site ) ) {
	            $log .= ' :: landing site ' . $this->landing_site;
	            $order->setLandingSite($this->landing_site);
	        }

            if ($this->is_full_sync) {
                $line_items = $order->items();

                // if we don't have any line items, we need to create the mailchimp product
                // with a price of 1.00 and we'll use the inventory quantity to adjust correctly.
                if (empty($line_items) || !count($line_items)) {

                    // this will create an empty product placeholder, or return the pre populated version if already
                    // sent to Mailchimp.
                    $product = $api->createEmptyLineItemProductPlaceholder();

                    $line_item = new MailChimp_WooCommerce_LineItem();
                    $line_item->setId($product->getId());
                    $line_item->setPrice(1);
                    $line_item->setProductId($product->getId());
                    $line_item->setProductVariantId($product->getId());
                    $line_item->setQuantity((int) $order->getOrderTotal());

                    $order->addItem($line_item);

                    mailchimp_log('order_submit.error', "Order {$order->getId()} does not have any line items, so we are using 'empty_line_item_placeholder' instead.");
                }
            }

            mailchimp_debug('order_submit', " #{$woo_order_number}", $order->toArray());

            try {
                // update or create
                $api_response = $api->$call($store_id, $order, false);
            } catch (Exception $e) {
                // if for whatever reason we get a product not found error, we need to iterate
                // through the order items, and use a "create mode only" on each product
                // then re-submit the order once they're in the database again.
                if (mailchimp_string_contains($e->getMessage(), 'product with the provided ID')) {
                    $api->handleProductsMissingFromAPI($order);
                    // make another attempt again to add the order.
                    $api_response = $api->$call($store_id, $order, false);
                } else {
                    throw $e;
                }
            }

            if (empty($api_response)) {
                mailchimp_error('order_submit.failure', "$call :: #{$order->getId()} :: email: {$email} produced a blank response from MailChimp");
                return false;
            }

            if (isset($deleted_abandoned_cart) && $deleted_abandoned_cart) {
                $log .= " :: abandoned cart deleted [{$this->cart_session_id}]";
            }

			// log the campaign id if we have this value from the API response.
	        if ( $new_order && $api_response instanceof MailChimp_WooCommerce_Order ) {
				if (($campaign_id = $api_response->getCampaignId()) && !empty($campaign_id)) {
					$log .= " :: campaign id {$campaign_id}";
				}
	        }

            // if we require double opt in on the list, and the customer requires double opt in,
            // we should mark them as pending so they get the opt in email now.
            if (mailchimp_list_has_double_optin()) {
                $status_if_new = $order->getCustomer()->getOriginalSubscriberStatus() ? 'pending' : 'transactional';
            } else {
                // if true, subscribed - otherwise transactional
                $status_if_new = $order->getCustomer()->getOptInStatus() ? 'subscribed' : 'transactional';
            }

            // if this is not currently in mailchimp - and we have the saved GDPR fields from
            // we can use the post meta for gdpr fields that were saved during checkout.
            if (!$this->is_full_sync && $new_order && empty($this->gdpr_fields)) {
                $this->gdpr_fields = $this->woo_order->get_meta('mailchimp_woocommerce_gdpr_fields');
            }

            // Maybe sync subscriber to set correct member.language
            mailchimp_member_data_update($email, $this->user_language, 'order', $status_if_new, $order, $this->gdpr_fields, !$this->is_full_sync);

            mailchimp_log('order_submit.success', $log);

            if ($this->is_full_sync && $new_order) {
                // if the customer has a flag to double opt in - we need to push this data over to MailChimp as pending
                //TODO: RYAN: this is the only place getOriginalSubscriberStatus() is called, but the iterate method uses another way.
                // mailchimp_update_member_with_double_opt_in($order, ($should_auto_subscribe || $status));
                mailchimp_update_member_with_double_opt_in($order, ((isset($should_auto_subscribe) && $should_auto_subscribe) || $order->getCustomer()->getOriginalSubscriberStatus()));
            }

            return $api_response;
        } catch (MailChimp_WooCommerce_RateLimitError $e) {
            sleep(3);
            mailchimp_error('order_submit.error', mailchimp_error_trace($e, "RateLimited :: #{$this->id}"));
            $this->applyRateLimitedScenario();
            throw $e;
        } catch (MailChimp_WooCommerce_ServerError $e) {
            mailchimp_error('order_submit.error', mailchimp_error_trace($e, "{$call} :: #{$this->id}"));
            throw $e;
        } catch (MailChimp_WooCommerce_Error $e) {
            mailchimp_error('order_submit.error', mailchimp_error_trace($e, "{$call} :: #{$this->id}"));
            throw $e;
        } catch (Exception $e) {
            $message = strtolower($e->getMessage());
            mailchimp_error('order_submit.tracing_error', $e);
            // this can happen when a customer changes their email.
            if (isset($order) && strpos($message, 'not be changed')) {
                try {
                    mailchimp_log('order_submit.deleting_customer', "#{$order->getId()} :: email: {$email}");
                    // delete the customer before adding it again.
                    $api->deleteCustomer($store_id, $order->getCustomer()->getId());
                    // update or create
                    $api_response = $api->$call($store_id, $order, false);
                    $log = "Deleted Customer :: $call :: #{$order->getId()} :: email: {$email}";
                    mailchimp_log('order_submit.success', $log);
                    // if we're adding a new order and the session id is here, we need to delete the AC cart record.
                    if (!empty($this->cart_session_id)) {
                        $api->deleteCartByID($store_id, $this->cart_session_id);
                    }
                    return $api_response;
                } catch (Exception $e) {
                    mailchimp_error('order_submit.error', mailchimp_error_trace($e, 'deleting-customer-re-add :: #'.$this->id));
                }
            }
            throw $e;
        }
    }

    /**
     * @return bool|string
     */
    public function getRealOrderNumber()
    {
        try {
	        $this->woo_order = null;
			$this->woo_order_number = false;
            if (empty($this->id)) {
                return false;
            }
            if ( !($woo = MailChimp_WooCommerce_HPOS::get_order($this->id)) ) {
				mailchimp_log('order_sync.failure', "Order #{$this->id}. Can’t submit order without a valid ID");
				return false;
            }
	        $this->woo_order = $woo;
            return $this->woo_order_number = $this->woo_order->get_order_number();
        } catch (Exception $e) {
			$this->woo_order = null;
            $this->woo_order_number = false;
            mailchimp_error('order_sync.failure', mailchimp_error_trace($e, "{$this->id} could not be loaded"));
            return false;
        }
    }

    /**
     * @param $email
     * @param $order_id
     * @return bool
     */
    protected function shouldSkipOrder($email, $order_id)
    {
        if (!is_email($email)) {
            mailchimp_log('validation.bad_email', "Order #{$order_id} has an invalid email address. Skipping!");
            return true;
        }

        // make sure we can submit this order to MailChimp or skip it.
        if (mailchimp_email_is_amazon($email)) {
            mailchimp_log('validation.amazon', "Order #{$order_id} was placed through Amazon. Skipping!");
            return true;
        }

        if (mailchimp_email_is_privacy_protected($email)) {
            mailchimp_log('validation.gdpr', "Order #{$order_id} is GDPR restricted. Skipping!");
            return true;
        }

        return false;
    }
}

class-mailchimp-woocommerce-single-product.php                                                                                                                                                                                                                 6826          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 7/15/16
 * Time: 11:42 AM
 */

class MailChimp_WooCommerce_Single_Product extends Mailchimp_Woocommerce_Job
{
    public $id;
    public $fallback_title;
    protected $store_id;
    protected $api;
    protected $service;
    protected $mode = 'update_or_create';
    protected $order_item = null;

	/**
	 * MailChimp_WooCommerce_Single_Product constructor.
	 *
	 * @param null $id
	 * @param null $fallback_title
	 */
    public function __construct($id = null, $fallback_title = null)
    {
        $this->setId($id);
        $this->setFallbackTitle($fallback_title);
    }

    /**
     * @param null $id
     * @return MailChimp_WooCommerce_Single_Product
     */
    public function setId($id)
    {
        if (!empty($id)) {
            $this->id = $id instanceof WP_Post ? $id->ID : $id;
        }
        return $this;
    }

    /**
     * @param $title
     * @return $this
     */
    public function setFallbackTitle($title)
    {
        $this->fallback_title = $title;

        return $this;
    }

    /**
     * @return $this
     */
    public function createModeOnly()
    {
        $this->mode = 'create';
        return $this;
    }

    /**
     * @return $this
     */
    public function updateModeOnly()
    {
        $this->mode = 'update';

        return $this;
    }

    /**
     * @return $this
     */
    public function updateOrCreateMode()
    {
        $this->mode = 'update_or_create';

        return $this;
    }

    /**
     * @param MailChimp_WooCommerce_LineItem $item
     * @return $this
     */
    public function fromOrderItem(MailChimp_WooCommerce_LineItem $item)
    {
        $this->order_item = $item;
        return $this;
    }

	/**
	 * @return false
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function handle()
    {
        $this->process();

        return false;
    }

	/**
	 * @return bool|MailChimp_WooCommerce_Product
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    public function process()
    {
        if (empty($this->id)) {
            return false;
        }

        if (!mailchimp_is_configured()) {
            mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
            return false;
        }

        $method = "no action";

        try {

            if( !($product_post = MailChimp_WooCommerce_HPOS::get_product($this->id)) ){
                return false;
            }
            /*if (!($product_post = get_post($this->id))) {
                return false;
            }*/

            try {
                // pull the product from Mailchimp first to see what method we need to call next.
                $mailchimp_product = $this->api()->getStoreProduct($this->store_id, $this->id, true);
            } catch (Exception $e) {
                if ($e instanceof MailChimp_WooCommerce_RateLimitError) {
                    throw $e;
                }
                $mailchimp_product = false;
            }

            // depending on if it's existing or not - we change the method call
            $method = $mailchimp_product ? 'updateStoreProduct' : 'addStoreProduct';

            // if the mode set is "create" and the product is in Mailchimp - just return the product.
            if ($this->mode === 'create' && !empty($mailchimp_product)) {
                return $mailchimp_product;
            }

            // if the mode is set to "update" and the product is not currently in Mailchimp - skip it.
            if ($this->mode === 'update' && empty($mailchimp_product)) {
                return false;
            }

            // if qe instructed this job to build from the order item, let's do that instead of the product post.
            if ($this->order_item) {
                mailchimp_debug('product_submit.debug', 'using order item', array('item' => $this->order_item));
                $product = $this->transformer()->fromOrderItem($this->order_item);
            } else {
                $product = $this->transformer()->transform($product_post, $this->fallback_title);
            }

            if (empty($product->getTitle()) && !empty($this->fallback_title)) {
                $product->setTitle($this->fallback_title);
            }

            mailchimp_debug('product_submit.debug', "#{$this->id}", $product->toArray());

            if (!$product->getId() || !$product->getTitle()) {
                mailchimp_log('product_submit.warning', "{$method} :: post #{$this->id} was invalid.");
                return false;
            }

            // either updating or creating the product
            $this->api()->{$method}($this->store_id, $product, false);

            mailchimp_log('product_submit.success', "{$method} :: #{$product->getId()}");

            update_option('mailchimp-woocommerce-last_product_updated', $product->getId());

            return $product;

        } catch (MailChimp_WooCommerce_RateLimitError $e) {
            sleep(3);
            mailchimp_error('product_submit.error', mailchimp_error_trace($e, "{$method} :: #{$this->id}"));
            $this->applyRateLimitedScenario();
            throw $e;
        } catch (MailChimp_WooCommerce_ServerError $e) {
            mailchimp_error('product_submit.error', mailchimp_error_trace($e, "{$method} :: #{$this->id}"));
            throw $e;
        } catch (MailChimp_WooCommerce_Error $e) {
            mailchimp_log('product_submit.error', mailchimp_error_trace($e, "{$method} :: #{$this->id}"));
            throw $e;
        } catch (Exception $e) {
            mailchimp_log('product_submit.error', mailchimp_error_trace($e, "{$method} :: #{$this->id}"));
            throw $e;
        }
    }

	/**
	 * @return MailChimp_WooCommerce_MailChimpApi
	 */
    public function api()
    {
        if (is_null($this->api)) {

            $this->store_id = mailchimp_get_store_id();
            $options = get_option('mailchimp-woocommerce', array());

            if (!empty($this->store_id) && is_array($options) && isset($options['mailchimp_api_key'])) {
                return $this->api = new MailChimp_WooCommerce_MailChimpApi($options['mailchimp_api_key']);
            }

            throw new RuntimeException('The MailChimp API is not currently configured!');
        }

        return $this->api;
    }

    /**
     * @return MailChimp_WooCommerce_Transform_Products
     */
    public function transformer()
    {
        if (is_null($this->service)) {
            return $this->service = new MailChimp_WooCommerce_Transform_Products();
        }

        return $this->service;
    }
}
class-mailchimp-woocommerce-subscriber-sync.php                                                                                                                                                                                                                8097          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class MailChimp_WooCommerce_Subscriber_Sync
 */
class MailChimp_WooCommerce_Subscriber_Sync extends Mailchimp_Woocommerce_Job
{
    public $data = array();

    /**
     * SubscriberSync constructor.
     * Pass in the raw data from the webhook from Mailchimp
     * @param $data
     */
    public function __construct($data)
    {
        $this->data = (array) $data;
    }

    /**
     * @return bool|null
     */
    public function handle()
    {
    	mailchimp_debug('subscriber_sync', "tracing mailchimp post", array('data' => $this->data));

        try {
            // if the store is not properly connected to Mailchimp - we need to skip this.
            if (!mailchimp_is_configured()) {
                mailchimp_log('subscriber_sync', 'Mailchimp is not configured, can not process job.');
                return null;
            }
            // grab the hook type, and the new data
            list($hook_type, $data, $failed) = $this->parseInputData();
            // extract the service ids from the data we get
            list ($service_id, $email) = $this->extractServiceIDs($data);

            /// when subscriber sync hooks come in, force refresh the admin view
            $list_id = mailchimp_get_list_id();
	        $email_hash = md5( strtolower( trim( $email ) ) );
	        delete_site_transient( "mailchimp-woocommerce-subscribed.{$list_id}.{$email_hash}" );

            // ignore the empty submissions or certain events or emails
            if ($this->hasInvalidEvent($hook_type, $failed, $data)) {
                mailchimp_log('subscriber_sync', 'Webhook has invalid event', compact('email'));
                return false;
            }
            if ($this->shouldIgnoreEmail($email)) {
                mailchimp_log('subscriber_sync', 'Webhook is ignoring email', compact('email'));
                return false;
            }
            // if hook type is 'subscribe' that means we need ot subscribe them
            $subscribe = $hook_type === 'subscribe';
            // if we don't have a user by email
            if (!($user = get_user_by('email', $email))) {
                // if the user is not found and we should create new customers
                return ($subscribe && $this->shouldCreateNewCustomers()) ?
                    (bool) $this->createNewCustomer($email) :
                    false;
            }
            try {
                $handled_key = "subscriber_sync.{$service_id}.handled";
                // see if we've saved a service call in the last 30 minutes.
                $handled = mailchimp_get_transient($handled_key);
                // if we've got the subscriber sync id and it's the same as the previous submission, just skip out now.
                if ($handled === $subscribe) {
                    mailchimp_log('subscriber_sync', "didn't need to do anything");
                    return true;
                }
                // if they unsubscribed, we need to put a cache on this because it's causing issues in the
                // shopify webhooks for some reason being re-subscribed.
                if (!$subscribe) {
                    // update the cached status just in case this is causing trouble with the webhook.
                    $hashed = md5(trim(strtolower($email)));
                    // tell the webhooks that we've just synced this customer with a certain status.
                    mailchimp_set_transient("{$hashed}.subscriber_sync", array('time' => time(), 'status' => false), 90);
                }
                // update the user meta to show the proper value.
                update_user_meta($user->ID, 'mailchimp_woocommerce_is_subscribed', $subscribe);
                // cache it for 90 seconds to be used above.
                mailchimp_set_transient($handled_key, $subscribe, 90);
                mailchimp_log('webhook', "Subscriber Sync :: {$hook_type} :: {$email}", array(
                    'subscribed' => $subscribe,
                    'user_id' => $user->ID,
                ));
                return true;
            } catch (Exception $e) {
                $error = $e->getMessage();
                mailchimp_error('webhook', "Updating Subscriber Status :: MC service ID {$service_id} :: {$hook_type} :: {$error}");
                return false;
            }
        } catch (Throwable $e) {
            mailchimp_error('webhook', $e->getMessage(), array(
            	'data' => isset($data) && $data ? json_encode($data) : null
            ));
        }
        return false;
    }

    /**
     * @param $data
     * @return array
     */
    private function extractServiceIDs($data)
    {
        if (is_object($data)) {
            $service_id = isset($data->web_id) ?
                $data->web_id :
                (isset($data->id) ? $data->id : null);
            $email = isset($data->email) ? $data->email : null;
            return array($service_id, $email);
        } else {
            $service_id = isset($data['web_id']) ? $data['web_id'] : false;
            if (!$service_id) {
                $service_id = isset($data['id']) ? $data['id'] : false;
            }
            $email = isset($data['email']) ? $data['email'] : false;
            return array($service_id, $email);
        }
    }

    /**
     * @return array
     */
    private function parseInputData()
    {
        $hook_type = isset($this->data['type']) ? $this->data['type'] : 'certainly_not';
        $data = isset($this->data['data']) ? $this->data['data'] : [];
        $failed = false;
        $allowed_hooks = array('subscribe' => true, 'unsubscribe' => true,);
        if (!is_string($hook_type) || !isset($allowed_hooks[$hook_type])) {
            $failed = true;
        }
        return array($hook_type, $data, $failed);
    }

	/**
	 * @param $email
	 *
	 * @return int|WP_Error
	 * @throws MailChimp_WooCommerce_Error
	 * @throws MailChimp_WooCommerce_RateLimitError
	 * @throws MailChimp_WooCommerce_ServerError
	 */
    private function createNewCustomer($email)
    {
        $member = mailchimp_get_api()->member(mailchimp_get_list_id(), $email);
        $first_name = !empty($member['merge_fields']['FNAME']) ? $member['merge_fields']['FNAME'] : 'Guest';
        $last_name = !empty($member['merge_fields']['LNAME']) ? $member['merge_fields']['LNAME'] : 'Customer';
        if (empty($first_name)) $first_name = null;
        if (empty($last_name)) $last_name = null;
        // TODO maybe use the registration method and keep a record for when the user is verified later
        $user = wp_create_user(strtolower($email), wp_generate_password(), strtolower($email));
        // subscribe them because this function only runs for subscribers.
        update_user_meta($user, 'mailchimp_woocommerce_is_subscribed', true);
        // if we have a first and last name from the MC account, just use that.
        if ($first_name && $last_name) {
            wp_update_user(array(
                'ID' => $user,
                'first_name' => $first_name,
                'last_name' => $last_name
            ));
        }
        mailchimp_log('webhook', "CREATED CUSTOMER :: {$email} :: {$first_name} {$last_name}");
        return $user;
    }

    /**
     * @return false
     */
    private function shouldCreateNewCustomers()
    {
        // maybe we add a setting for this in the UI and use this here.
        return false;
    }

    /**
     * @param $email
     * @return bool
     */
    private function shouldIgnoreEmail($email)
    {
        return mailchimp_string_contains($email, array(
            'forgotten.mailchimp.com'
        ));
    }

    /**
     * @param $hook_type
     * @param $failed
     * @param $data
     * @return bool
     */
    private function hasInvalidEvent($hook_type, $failed, $data)
    {
        if (empty($hook_type) || empty($data)) {
            return true;
        }
        // if the flag is failed, or deleted, don't do anything.
        if ($failed || $hook_type === 'deleted' || $hook_type === 'delete') {
            return true;
        }
        return false;
    }
}
class-mailchimp-woocommerce-user-submit.php                                                                                                                                                                                                                    12887         1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 *
 * Name: Ryan Hungate
 * Email: ryan@vextras.com
 * Date: 11/14/16
 * Time: 9:38 AM
 */
class MailChimp_WooCommerce_User_Submit extends Mailchimp_Woocommerce_Job
{
	public static $handling_for = null;

	public $id;
	public $subscribed;
	public $gdpr_fields;
	public $updated_data;
	public $language;
	public $should_ignore = false;
	public $submit_transactional = true;

	/**
	 * MailChimp_WooCommerce_User_Submit constructor.
	 *
	 * @param null $id
	 * @param null $subscribed
	 * @param null $updated_data
	 * @param null $language
	 * @param null $gdpr_fields
	 */
	public function __construct($id = null, $subscribed = null, $updated_data = null, $language = null, $gdpr_fields = null)
	{

		if (!empty($id)) {
			// if we're passing in another user with the same id during the same php process we need to ignore it.
			if (static::$handling_for === $id) {
				$this->should_ignore = true;
			}
			// set the user id and the current 'handling_for' to this user id so we don't duplicate jobs.
			static::$handling_for = $this->id = $id;
		}

		if ( !is_null($subscribed) ) {
			$this->subscribed = $subscribed;

			if ( is_string($subscribed) && !empty($gdpr_fields)) {
				foreach ($gdpr_fields as $id => $value) {
					$gdpr_field['marketing_permission_id'] = $id;
					$gdpr_field['enabled'] = (bool) $value;
					$this->gdpr_fields[] = $gdpr_field;
				}
			}
		}



		if (!empty($updated_data)) {
			$this->updated_data = $updated_data->to_array();
		}

		if (!empty($language)) {
			$this->language = $language;
		}

		mailchimp_debug('member.sync', "construct this -> subscribed " . $this->subscribed);

	}

	/**
	 * @param bool $bool
	 * @return $this
	 */
	public function submittingTransactional($bool = true)
	{
		$this->submit_transactional = (bool) $bool;
		return $this;
	}

	/**
	 * @return bool
	 */
	public function handle()
	{

		mailchimp_debug('member.sync', "first this -> subscribed " . $this->subscribed);

		if (!mailchimp_is_configured()) {
			mailchimp_debug(get_called_class(), 'Mailchimp is not configured properly');
			static::$handling_for = null;
			return false;
		}

		if ($this->should_ignore) {
			mailchimp_debug(get_called_class(), "{$this->id} is currently in motion - skipping this one.");
			static::$handling_for = null;
			return false;
		}

		$options = get_option('mailchimp-woocommerce', array());
		$store_id = mailchimp_get_store_id();

		// load up the user.
		$user = new WP_User($this->id);

		// we need a valid user, a valid store id and options to continue
		if ($user->ID <= 0 || empty($store_id) || !is_array($options)) {

			// seems as if the database records are not being set by the time this queue job is fired,
			// just a precautionary to make sure it's available during
			sleep(1);

			$options = get_option('mailchimp-woocommerce', array());
			$store_id = mailchimp_get_store_id();

			// load up the user.
			$user = new WP_User($this->id);

			if ($user->ID <= 0 || empty($store_id) || !is_array($options)) {
				mailchimp_log('member.sync', "Invalid Data For Submission :: {$user->ID}");
				static::$handling_for = null;
				return false;
			}
		}

		$email = $user->user_email;

		// make sure we don't need to skip this email
		if (!mailchimp_email_is_allowed($email)) {
			mailchimp_debug('email.filter', "$email is either blocked, or invalid");
			static::$handling_for = null;
			return false;
		}

		$user_subscribed = get_user_meta($this->id, 'mailchimp_woocommerce_is_subscribed', true);
		$unsaved = '' === $user_subscribed || null === $user_subscribed;

		// if we have a null value, we need to grab the correct user meta for is_subscribed
		if (is_null($this->subscribed)) {
			if ( $unsaved ) {
				mailchimp_log('member.sync', "Skipping sync for {$email} because no subscriber status has been set");
				static::$handling_for = null;
				return false;
			}
			$this->subscribed = $user_subscribed;
			mailchimp_debug('user_submit.action', "set subscribed variable for {$email} to {$this->subscribed}");
		}

		// if the meta we've stored on the user is not equal to the value being passed to Mailchimp
		// let's update that value here.

		if ( $unsaved || ( $this->subscribed !== '' && $user_subscribed !== $this->subscribed ) ) {
			update_user_meta(
				$this->id,
				'mailchimp_woocommerce_is_subscribed',
				$this->subscribed
			);
			mailchimp_debug('user_submit.update_meta', "Updated user meta for {$email} to {$this->subscribed}");
		}

		$api_key = isset($options['mailchimp_api_key']) ? $options['mailchimp_api_key'] : false;
		$list_id = isset($options['mailchimp_list']) ? $options['mailchimp_list'] : false;

		// we need a valid api key and list id to continue
		if (empty($api_key) || empty($list_id)) {
			mailchimp_log('member.sync', "Invalid Api Key or ListID :: {$email}");
			static::$handling_for = null;
			return false;
		}

		// don't let anyone be unsubscribed from the list - that should only happen on email campaigns
		// and someone clicking the unsubscribe linkage.
		if ($this->subscribed === '0' && !$this->submit_transactional) {
			static::$handling_for = null;
			return false;
		}

		$api = new MailChimp_WooCommerce_MailChimpApi($api_key);

		$merge_fields_system = array();

		$fn = trim($user->first_name);
		$ln = trim($user->last_name);

		if (!empty($fn)) $merge_fields_system['FNAME'] = $fn;
		if (!empty($ln)) $merge_fields_system['LNAME'] = $ln;

		// allow users to hook into the merge field submission
		$merge_fields = apply_filters('mailchimp_sync_user_mergetags', $merge_fields_system, $user);

		// for whatever reason if this isn't an array we need to skip it.
		if (!is_array($merge_fields)) {
			mailchimp_error("custom.merge_fields", "The filter for mailchimp_sync_user_mergetags needs to return an array, using the default setup instead.");
			$merge_fields = $merge_fields_system;
		}
		// language
		$language = $this->language;

		// GDPR
		$gdpr_fields = $this->gdpr_fields;

		// pull the transient key for this job.
		$transient_id = mailchimp_get_transient_email_key($email);
		$status_meta = mailchimp_get_subscriber_status_options($this->subscribed);

		try {

			// check to see if the status meta has changed when a false response is given
			if (mailchimp_check_serialized_transient_changed($transient_id, $status_meta) === false) {
				mailchimp_debug(get_called_class(), "Skipping sync for {$email} because it was just pushed less than a minute ago.");
				static::$handling_for = null;
				return false;
			}

			// see if we have a member.
			$member_data = $api->member($list_id, $email);

			// if we're updating a member and the email is different, we need to delete the old person
			if (is_array($this->updated_data) && isset($this->updated_data['user_email'])) {
				if ($this->updated_data['user_email'] !== $email) {
					// delete the old
					$api->deleteMember($list_id, $this->updated_data['user_email']);
					// subscribe the new
					$api->subscribe($list_id, $email, $status_meta['created'], $merge_fields, null, $language, $gdpr_fields);

					// update the member tags but fail silently just in case.
					$api->updateMemberTags(mailchimp_get_list_id(), $email, true);

					mailchimp_tell_system_about_user_submit($email, $status_meta);

					if ($status_meta['created']) {
						mailchimp_log('member.sync', 'Subscriber Swap '.$this->updated_data['user_email'].' to '.$email, array(
							'status' => $status_meta['created'],
							'merge_fields' => $merge_fields
						));
					} else {
						mailchimp_log('member.sync', 'Subscriber Swap '.$this->updated_data['user_email'].' to '.$email.' Pending Double OptIn', array(
							'status' => $status_meta['created'],
							'merge_fields' => $merge_fields
						));
					}
					static::$handling_for = null;
					return false;
				}
			}

			// if the member is unsubscribed or pending, we really can't do anything here.
			if (isset($member_data['status']) && in_array($member_data['status'], array('unsubscribed', 'pending'))) {
				if ( ( $this->subscribed === '1' || $this->subscribed === '0' )  && $member_data['status'] !== 'pending') {
					mailchimp_log('member.sync', "pushing {$email} status as pending because they were previously unsubscribed, and must use the double opt in to make it back on the list.");
					$member_data['status'] = 'pending';
				} else {
					mailchimp_log('member.sync', "Skipped Member Sync For {$email} because the current status is {$member_data['status']}", $merge_fields);
					static::$handling_for = null;
					return false;
				}
			}

			// if the status is not === 'transactional' we can update them to subscribed or pending now.
			if (isset($member_data['status']) && $member_data['status'] === 'transactional' || $member_data['status'] === 'cleaned') {
				// ok let's update this member
				$api->update($list_id, $email, $status_meta['updated'], $merge_fields, null, $language, $gdpr_fields);

				// update the member tags but fail silently just in case.
				$api->updateMemberTags(mailchimp_get_list_id(), $email, true);

				mailchimp_tell_system_about_user_submit($email, $status_meta);
				mailchimp_log('member.sync', "Updated Member {$email}", array(
					'previous_status' => $member_data['status'],
					'status' => $status_meta['updated'],
					'language' => $language,
					'merge_fields' => $merge_fields,
					'gdpr_fields' => $gdpr_fields,
				));
				static::$handling_for = null;
				return true;
			}

			if (isset($member_data['status'])) {
				if ( ($member_data['status'] === 'subscribed' || $member_data['status'] === 'unsubscribed') && $this->subscribed === '0') {
					$member_data['status'] = 'transactional';
				} else if ( ($member_data['status'] === 'subscribed' || $member_data['status'] === 'transactional') && $this->subscribed === 'unsubscribed' ) {
					$member_data['status'] = 'unsubscribed';
				}

				// ok let's update this member
				$api->update($list_id, $email, $member_data['status'], $merge_fields, null, $language, $gdpr_fields);

				// delete this admin transient if there was one
				mailchimp_delete_transient("updating_subscriber_status.{$this->id}" );

				// update the member tags but fail silently just in case.
				$api->updateMemberTags(mailchimp_get_list_id(), $email, true);

				mailchimp_tell_system_about_user_submit($email, $status_meta);
				mailchimp_log('member.sync', "Updated Member {$email}", array(
					'status' => $member_data['status'],
					'language' => $language,
					'merge_fields' => $merge_fields,
					'gdpr_fields' => $gdpr_fields,
				));
				static::$handling_for = null;
				return true;
			}

			static::$handling_for = null;
		} catch (MailChimp_WooCommerce_RateLimitError $e) {
			sleep(3);
			mailchimp_error('member.sync.error', mailchimp_error_trace($e, "RateLimited :: user #{$this->id}"));
			$this->retry();
		} catch (Exception $e) {

			$compliance_state = mailchimp_string_contains($e->getMessage(), 'compliance state');

			if ($compliance_state) {
				return $this->handleComplianceState($email, $merge_fields);
			}

			// if we have a 404 not found, we can create the member
			if ($e->getCode() == 404) {

				try {
					$uses_doi = isset($status_meta['requires_double_optin']) && $status_meta['requires_double_optin'];
					$status_if_new = $uses_doi && (bool) $this->subscribed ? 'pending' : $this->subscribed;

					$api->subscribe($list_id, $user->user_email, $status_if_new, $merge_fields, null, $language, $gdpr_fields);

					// delete this admin transient if there was one
					mailchimp_delete_transient("updating_subscriber_status.{$this->id}" );

					// update the member tags but fail silently just in case.
					$api->updateMemberTags(mailchimp_get_list_id(), $email, true);

					mailchimp_tell_system_about_user_submit($email, $status_meta);

					if ($status_meta['created']) {
						mailchimp_log('member.sync', "Subscribed Member {$user->user_email}", array('status_if_new' => $status_if_new, 'has_doi' => $uses_doi, 'merge_fields' => $merge_fields));
					} else {
						mailchimp_log('member.sync', "{$user->user_email} is Pending Double OptIn", array('status_if_new' => $status_if_new, 'has_doi' => $uses_doi, 'status_meta' => $status_meta));
					}
				} catch (Exception $e) {
					mailchimp_log('member.sync', $e->getMessage());
				}
				static::$handling_for = null;
				return false;
			}
			mailchimp_error('member.sync', mailchimp_error_trace($e, $user->user_email));
		}

		static::$handling_for = null;

		return false;
	}

	/**
	 * @param $email
	 * @param array $fields
	 * @param array $interests
	 * @throws \Throwable
	 */
	protected function handleComplianceState($email, $fields = [], $interests = [])
	{
		mailchimp_log('subscriber_sync', "member {$email} is in compliance state, sending double opt in.");
		return mailchimp_get_api()->updateOrCreate(mailchimp_get_list_id(), $email, 'pending', $fields, $interests);
	}
}
class-mailchimp-woocommerce-webhooks-sync.php                                                                                                                                                                                                                  2546          1711191352  plugins/mailchimp-for-woocommerce/includes/processes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Created by Vextras.
 * Date: 04/02/16
 * Time: 10:55 PM
 */
class MailChimp_WooCommerce_WebHooks_Sync extends Mailchimp_Woocommerce_Job
{
	protected $skip_creation = false;

	/**
	 * Handle job
	 * @return void
	 */
	public function handle()
	{
		$this->subscribeWebhook();
	}

	/**
	 * Subscribe mailchimp webhook
	 * @return void|bool
	 */
	public function subscribeWebhook()
	{
		try {
			if (!mailchimp_is_configured()) {
				return null;
			}

			$this->cleanHooks();

			if (true === $this->skip_creation) {
				return null;
			}

			$list = mailchimp_get_list_id();
			$api = mailchimp_get_api();

			// we used to check for this until we fixed the url delimiter problem
			// get_option('permalink_structure') !== ''
			$key = mailchimp_create_webhook_token();
			$url = mailchimp_build_webhook_url($key);
			mailchimp_set_data('webhook.token', $key);
			//requesting api webhooks subscription
			$webhook = $api->webHookSubscribe($list, $url);
			//if no errors let save the url
			mailchimp_set_webhook_url($webhook['url']);
			mailchimp_log('webhooks', "added webhook to audience");
		} catch (Throwable $e) {
			mailchimp_error('webhook', $e->getMessage());
			mailchimp_set_data('webhook.token', false);
			mailchimp_set_webhook_url(false);
		}
		return false;
	}

	/**
	 * @return array|bool|null
	 */
	public function cleanHooks($disconnect = false)
	{
		if (!mailchimp_is_configured()) {
			return null;
		}
		$token = mailchimp_get_data('webhook.token');
		$list = mailchimp_get_list_id();
		$api = mailchimp_get_api();
		$deleted = [];
		try {
			$rest_url = MailChimp_WooCommerce_Rest_Api::url('member-sync');
			$hooks = $api->getWebHooks($list);

			foreach ($hooks['webhooks'] as $hook) {
				$href = isset($hook['url']) ? $hook['url'] : (isset($hook['href']) ? $hook['href'] : null);
				if ($href && mailchimp_string_contains($href, $rest_url)) {
					if (!$disconnect && !empty($token) && mailchimp_string_contains($href, $token)) {
						$this->skip_creation = true;
						mailchimp_log('webhooks', "Verified webhook {$hook['id']}");
						continue;
					}
					$api->deleteWebhookByID($list, $hook['id']);
					$deleted[] = $hook['id'];
					mailchimp_log('webhooks', "Deleted old plugin webhook id {$hook['id']}");
				}
			}

			if ($this->skip_creation) {
				return $deleted;
			}

			mailchimp_set_data('webhook.token', false);
			mailchimp_set_webhook_url(false);

			return true;
		} catch (Throwable $e) {
			mailchimp_error('webhook deletion error', $e->getMessage());
		}
		return $deleted;
	}
}release-drafter.yml                                                                                                                                                                                                                                            258           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/.github                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      template: |
  ## next release &ndash; date

  <!-- Move the individual changes below into the appropriate section -->

  $CHANGES

  **Added**
  **Changed**
  **Deprecated**
  **Removed**
  **Fixed**
  **Security**

change-template: '* $TITLE (PR #$NUMBER)'
action-scheduler.php                                                                                                                                                                                                                                           2773          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php
/**
 * Plugin Name: Action Scheduler
 * Plugin URI: https://actionscheduler.org
 * Description: A robust scheduling library for use in WordPress plugins.
 * Author: Automattic
 * Author URI: https://automattic.com/
 * Version: 3.5.4
 * License: GPLv3
 *
 * Copyright 2019 Automattic, Inc.  (https://automattic.com/contact/)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @package ActionScheduler
 */

if ( ! function_exists( 'action_scheduler_register_3_dot_5_dot_4' ) && function_exists( 'add_action' ) ) { // WRCS: DEFINED_VERSION.

	if ( ! class_exists( 'ActionScheduler_Versions', false ) ) {
		require_once __DIR__ . '/classes/ActionScheduler_Versions.php';
		add_action( 'plugins_loaded', array( 'ActionScheduler_Versions', 'initialize_latest_version' ), 1, 0 );
	}

	add_action( 'plugins_loaded', 'action_scheduler_register_3_dot_5_dot_4', 0, 0 ); // WRCS: DEFINED_VERSION.

	/**
	 * Registers this version of Action Scheduler.
	 */
	function action_scheduler_register_3_dot_5_dot_4() { // WRCS: DEFINED_VERSION.
		$versions = ActionScheduler_Versions::instance();
		$versions->register( '3.5.4', 'action_scheduler_initialize_3_dot_5_dot_4' ); // WRCS: DEFINED_VERSION.
	}

	/**
	 * Initializes this version of Action Scheduler.
	 */
	function action_scheduler_initialize_3_dot_5_dot_4() { // WRCS: DEFINED_VERSION.
		// A final safety check is required even here, because historic versions of Action Scheduler
		// followed a different pattern (in some unusual cases, we could reach this point and the
		// ActionScheduler class is already defined—so we need to guard against that).
		if ( ! class_exists( 'ActionScheduler', false ) ) {
			require_once __DIR__ . '/classes/abstracts/ActionScheduler.php';
			ActionScheduler::init( __FILE__ );
		}
	}

	// Support usage in themes - load this version if no plugin has loaded a version yet.
	if ( did_action( 'plugins_loaded' ) && ! doing_action( 'plugins_loaded' ) && ! class_exists( 'ActionScheduler', false ) ) {
		action_scheduler_initialize_3_dot_5_dot_4(); // WRCS: DEFINED_VERSION.
		do_action( 'action_scheduler_pre_theme_init' );
		ActionScheduler_Versions::initialize_latest_version();
	}
}
changelog.txt                                                                                                                                                                                                                                                  4183          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *** Changelog ***

= 3.5.4 - 2023-01-17 =
* Add pre filters during action registration.
* Async scheduling.
* Calculate timeouts based on total actions.
* Correctly order the parameters for `ActionScheduler_ActionFactory`'s calls to `single_unique`.
* Fetch action in memory first before releasing claim to avoid deadlock.
* PHP 8.2: declare property to fix creation of dynamic property warning.
* PHP 8.2: fix "Using ${var} in strings is deprecated, use {$var} instead".
* Prevent `undefined variable` warning for `$num_pastdue_actions`.

= 3.5.3 - 2022-11-09 =
* Query actions with partial match.

= 3.5.2 - 2022-09-16 =
* Fix - erroneous 3.5.1 release.

= 3.5.1 - 2022-09-13 =
* Maintenance on A/S docs.
* fix: PHP 8.2 deprecated notice.

= 3.5.0 - 2022-08-25 =
* Add - The active view link within the "Tools > Scheduled Actions" screen is now clickable.
* Add - A warning when there are past-due actions.
* Enhancement - Added the ability to schedule unique actions via an atomic operation.
* Enhancement - Improvements to cache invalidation when processing batches (when running on WordPress 6.0+).
* Enhancement - If a recurring action is found to be consistently failing, it will stop being rescheduled.
* Enhancement - Adds a new "Past Due" view to the scheduled actions list table.

= 3.4.2 - 2022-06-08 =
* Fix - Change the include for better linting.
* Fix - update: Added Action scheduler completed action hook.

= 3.4.1 - 2022-05-24 =
* Fix - Change the include for better linting.
* Fix - Fix the documented return type.

= 3.4.0 - 2021-10-29 =
* Enhancement - Number of items per page can now be set for the Scheduled Actions view (props @ovidiul). #771
* Fix - Do not lower the max_execution_time if it is already set to 0 (unlimited) (props @barryhughes). #755
* Fix - Avoid triggering autoloaders during the version resolution process (props @olegabr). #731 & #776
* Dev - ActionScheduler_wcSystemStatus PHPCS fixes (props @ovidiul). #761
* Dev - ActionScheduler_DBLogger.php PHPCS fixes (props @ovidiul). #768
* Dev - Fixed phpcs for ActionScheduler_Schedule_Deprecated (props @ovidiul). #762
* Dev - Improve actions table indicies (props @glagonikas). #774 & #777
* Dev - PHPCS fixes for ActionScheduler_DBStore.php (props @ovidiul). #769 & #778
* Dev - PHPCS Fixes for ActionScheduler_Abstract_ListTable (props @ovidiul). #763 & #779
* Dev - Adds new filter action_scheduler_claim_actions_order_by to allow tuning of the claim query (props @glagonikas). #773
* Dev - PHPCS fixes for ActionScheduler_WpPostStore class (props @ovidiul). #780

= 3.3.0 - 2021-09-15 =
* Enhancement - Adds as_has_scheduled_action() to provide a performant way to test for existing actions. #645
* Fix - Improves compatibility with environments where NO_ZERO_DATE is enabled. #519
* Fix - Adds safety checks to guard against errors when our database tables cannot be created. #645
* Dev - Now supports queries that use multiple statuses. #649
* Dev - Minimum requirements for WordPress and PHP bumped (to 5.2 and 5.6 respectively). #723

= 3.2.1 - 2021-06-21 =
* Fix - Add extra safety/account for different versions of AS and different loading patterns. #714
* Fix - Handle hidden columns (Tools → Scheduled Actions) | #600.

= 3.2.0 - 2021-06-03 =
* Fix - Add "no ordering" option to as_next_scheduled_action().
* Fix - Add secondary scheduled date checks when claiming actions (DBStore) | #634.
* Fix - Add secondary scheduled date checks when claiming actions (wpPostStore) | #634.
* Fix - Adds a new index to the action table, reducing the potential for deadlocks (props: @glagonikas).
* Fix - Fix unit tests infrastructure and adapt tests to PHP 8.
* Fix - Identify in-use data store.
* Fix - Improve test_migration_is_scheduled.
* Fix - PHP notice on list table.
* Fix - Speed up clean up and batch selects.
* Fix - Update pending dependencies.
* Fix - [PHP 8.0] Only pass action arg values through to do_action_ref_array().
* Fix - [PHP 8] Set the PHP version to 7.1 in composer.json for PHP 8 compatibility.
* Fix - add is_initialized() to docs.
* Fix - fix file permissions.
* Fix - fixes #664 by replacing __ with esc_html__.

= 3.1.6 - 2020-05-12 =
* Change log starts.
ActionScheduler.php                                                                                                                                                                                                                                            8754          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

use Action_Scheduler\WP_CLI\Migration_Command;
use Action_Scheduler\Migration\Controller;

/**
 * Class ActionScheduler
 * @codeCoverageIgnore
 */
abstract class ActionScheduler {
	private static $plugin_file = '';
	/** @var ActionScheduler_ActionFactory */
	private static $factory = NULL;
	/** @var bool */
	private static $data_store_initialized = false;

	public static function factory() {
		if ( !isset(self::$factory) ) {
			self::$factory = new ActionScheduler_ActionFactory();
		}
		return self::$factory;
	}

	public static function store() {
		return ActionScheduler_Store::instance();
	}

	public static function lock() {
		return ActionScheduler_Lock::instance();
	}

	public static function logger() {
		return ActionScheduler_Logger::instance();
	}

	public static function runner() {
		return ActionScheduler_QueueRunner::instance();
	}

	public static function admin_view() {
		return ActionScheduler_AdminView::instance();
	}

	/**
	 * Get the absolute system path to the plugin directory, or a file therein
	 * @static
	 * @param string $path
	 * @return string
	 */
	public static function plugin_path( $path ) {
		$base = dirname(self::$plugin_file);
		if ( $path ) {
			return trailingslashit($base).$path;
		} else {
			return untrailingslashit($base);
		}
	}

	/**
	 * Get the absolute URL to the plugin directory, or a file therein
	 * @static
	 * @param string $path
	 * @return string
	 */
	public static function plugin_url( $path ) {
		return plugins_url($path, self::$plugin_file);
	}

	public static function autoload( $class ) {
		$d           = DIRECTORY_SEPARATOR;
		$classes_dir = self::plugin_path( 'classes' . $d );
		$separator   = strrpos( $class, '\\' );
		if ( false !== $separator ) {
			if ( 0 !== strpos( $class, 'Action_Scheduler' ) ) {
				return;
			}
			$class = substr( $class, $separator + 1 );
		}

		if ( 'Deprecated' === substr( $class, -10 ) ) {
			$dir = self::plugin_path( 'deprecated' . $d );
		} elseif ( self::is_class_abstract( $class ) ) {
			$dir = $classes_dir . 'abstracts' . $d;
		} elseif ( self::is_class_migration( $class ) ) {
			$dir = $classes_dir . 'migration' . $d;
		} elseif ( 'Schedule' === substr( $class, -8 ) ) {
			$dir = $classes_dir . 'schedules' . $d;
		} elseif ( 'Action' === substr( $class, -6 ) ) {
			$dir = $classes_dir . 'actions' . $d;
		} elseif ( 'Schema' === substr( $class, -6 ) ) {
			$dir = $classes_dir . 'schema' . $d;
		} elseif ( strpos( $class, 'ActionScheduler' ) === 0 ) {
			$segments = explode( '_', $class );
			$type = isset( $segments[ 1 ] ) ? $segments[ 1 ] : '';

			switch ( $type ) {
				case 'WPCLI':
					$dir = $classes_dir . 'WP_CLI' . $d;
					break;
				case 'DBLogger':
				case 'DBStore':
				case 'HybridStore':
				case 'wpPostStore':
				case 'wpCommentLogger':
					$dir = $classes_dir . 'data-stores' . $d;
					break;
				default:
					$dir = $classes_dir;
					break;
			}
		} elseif ( self::is_class_cli( $class ) ) {
			$dir = $classes_dir . 'WP_CLI' . $d;
		} elseif ( strpos( $class, 'CronExpression' ) === 0 ) {
			$dir = self::plugin_path( 'lib' . $d . 'cron-expression' . $d );
		} elseif ( strpos( $class, 'WP_Async_Request' ) === 0 ) {
			$dir = self::plugin_path( 'lib' . $d );
		} else {
			return;
		}

		if ( file_exists( $dir . "{$class}.php" ) ) {
			include( $dir . "{$class}.php" );
			return;
		}
	}

	/**
	 * Initialize the plugin
	 *
	 * @static
	 * @param string $plugin_file
	 */
	public static function init( $plugin_file ) {
		self::$plugin_file = $plugin_file;
		spl_autoload_register( array( __CLASS__, 'autoload' ) );

		/**
		 * Fires in the early stages of Action Scheduler init hook.
		 */
		do_action( 'action_scheduler_pre_init' );

		require_once( self::plugin_path( 'functions.php' ) );
		ActionScheduler_DataController::init();

		$store      = self::store();
		$logger     = self::logger();
		$runner     = self::runner();
		$admin_view = self::admin_view();

		// Ensure initialization on plugin activation.
		if ( ! did_action( 'init' ) ) {
			add_action( 'init', array( $admin_view, 'init' ), 0, 0 ); // run before $store::init()
			add_action( 'init', array( $store, 'init' ), 1, 0 );
			add_action( 'init', array( $logger, 'init' ), 1, 0 );
			add_action( 'init', array( $runner, 'init' ), 1, 0 );
		} else {
			$admin_view->init();
			$store->init();
			$logger->init();
			$runner->init();
		}

		if ( apply_filters( 'action_scheduler_load_deprecated_functions', true ) ) {
			require_once( self::plugin_path( 'deprecated/functions.php' ) );
		}

		if ( defined( 'WP_CLI' ) && WP_CLI ) {
			WP_CLI::add_command( 'action-scheduler', 'ActionScheduler_WPCLI_Scheduler_command' );
			if ( ! ActionScheduler_DataController::is_migration_complete() && Controller::instance()->allow_migration() ) {
				$command = new Migration_Command();
				$command->register();
			}
		}

		self::$data_store_initialized = true;

		/**
		 * Handle WP comment cleanup after migration.
		 */
		if ( is_a( $logger, 'ActionScheduler_DBLogger' ) && ActionScheduler_DataController::is_migration_complete() && ActionScheduler_WPCommentCleaner::has_logs() ) {
			ActionScheduler_WPCommentCleaner::init();
		}

		add_action( 'action_scheduler/migration_complete', 'ActionScheduler_WPCommentCleaner::maybe_schedule_cleanup' );
	}

	/**
	 * Check whether the AS data store has been initialized.
	 *
	 * @param string $function_name The name of the function being called. Optional. Default `null`.
	 * @return bool
	 */
	public static function is_initialized( $function_name = null ) {
		if ( ! self::$data_store_initialized && ! empty( $function_name ) ) {
			$message = sprintf( __( '%s() was called before the Action Scheduler data store was initialized', 'action-scheduler' ), esc_attr( $function_name ) );
			error_log( $message, E_WARNING );
		}

		return self::$data_store_initialized;
	}

	/**
	 * Determine if the class is one of our abstract classes.
	 *
	 * @since 3.0.0
	 *
	 * @param string $class The class name.
	 *
	 * @return bool
	 */
	protected static function is_class_abstract( $class ) {
		static $abstracts = array(
			'ActionScheduler'                            => true,
			'ActionScheduler_Abstract_ListTable'         => true,
			'ActionScheduler_Abstract_QueueRunner'       => true,
			'ActionScheduler_Abstract_Schedule'          => true,
			'ActionScheduler_Abstract_RecurringSchedule' => true,
			'ActionScheduler_Lock'                       => true,
			'ActionScheduler_Logger'                     => true,
			'ActionScheduler_Abstract_Schema'            => true,
			'ActionScheduler_Store'                      => true,
			'ActionScheduler_TimezoneHelper'             => true,
		);

		return isset( $abstracts[ $class ] ) && $abstracts[ $class ];
	}

	/**
	 * Determine if the class is one of our migration classes.
	 *
	 * @since 3.0.0
	 *
	 * @param string $class The class name.
	 *
	 * @return bool
	 */
	protected static function is_class_migration( $class ) {
		static $migration_segments = array(
			'ActionMigrator'  => true,
			'BatchFetcher'    => true,
			'DBStoreMigrator' => true,
			'DryRun'          => true,
			'LogMigrator'     => true,
			'Config'          => true,
			'Controller'      => true,
			'Runner'          => true,
			'Scheduler'       => true,
		);

		$segments = explode( '_', $class );
		$segment = isset( $segments[ 1 ] ) ? $segments[ 1 ] : $class;

		return isset( $migration_segments[ $segment ] ) && $migration_segments[ $segment ];
	}

	/**
	 * Determine if the class is one of our WP CLI classes.
	 *
	 * @since 3.0.0
	 *
	 * @param string $class The class name.
	 *
	 * @return bool
	 */
	protected static function is_class_cli( $class ) {
		static $cli_segments = array(
			'QueueRunner' => true,
			'Command'     => true,
			'ProgressBar' => true,
		);

		$segments = explode( '_', $class );
		$segment = isset( $segments[ 1 ] ) ? $segments[ 1 ] : $class;

		return isset( $cli_segments[ $segment ] ) && $cli_segments[ $segment ];
	}

	final public function __clone() {
		trigger_error("Singleton. No cloning allowed!", E_USER_ERROR);
	}

	final public function __wakeup() {
		trigger_error("Singleton. No serialization allowed!", E_USER_ERROR);
	}

	final private function __construct() {}

	/** Deprecated **/

	public static function get_datetime_object( $when = null, $timezone = 'UTC' ) {
		_deprecated_function( __METHOD__, '2.0', 'wcs_add_months()' );
		return as_get_datetime_object( $when, $timezone );
	}

	/**
	 * Issue deprecated warning if an Action Scheduler function is called in the shutdown hook.
	 *
	 * @param string $function_name The name of the function being called.
	 * @deprecated 3.1.6.
	 */
	public static function check_shutdown_hook( $function_name ) {
		_deprecated_function( __FUNCTION__, '3.1.6' );
	}
}
ActionScheduler_Abstract_ListTable.php                                                                                                                                                                                                                         24205         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

if ( ! class_exists( 'WP_List_Table' ) ) {
	require_once ABSPATH . 'wp-admin/includes/class-wp-list-table.php';
}

/**
 * Action Scheduler Abstract List Table class
 *
 * This abstract class enhances WP_List_Table making it ready to use.
 *
 * By extending this class we can focus on describing how our table looks like,
 * which columns needs to be shown, filter, ordered by and more and forget about the details.
 *
 * This class supports:
 *  - Bulk actions
 *  - Search
 *  - Sortable columns
 *  - Automatic translations of the columns
 *
 * @codeCoverageIgnore
 * @since  2.0.0
 */
abstract class ActionScheduler_Abstract_ListTable extends WP_List_Table {

	/**
	 * The table name
	 *
	 * @var string
	 */
	protected $table_name;

	/**
	 * Package name, used to get options from WP_List_Table::get_items_per_page.
	 *
	 * @var string
	 */
	protected $package;

	/**
	 * How many items do we render per page?
	 *
	 * @var int
	 */
	protected $items_per_page = 10;

	/**
	 * Enables search in this table listing. If this array
	 * is empty it means the listing is not searchable.
	 *
	 * @var array
	 */
	protected $search_by = array();

	/**
	 * Columns to show in the table listing. It is a key => value pair. The
	 * key must much the table column name and the value is the label, which is
	 * automatically translated.
	 *
	 * @var array
	 */
	protected $columns = array();

	/**
	 * Defines the row-actions. It expects an array where the key
	 * is the column name and the value is an array of actions.
	 *
	 * The array of actions are key => value, where key is the method name
	 * (with the prefix row_action_<key>) and the value is the label
	 * and title.
	 *
	 * @var array
	 */
	protected $row_actions = array();

	/**
	 * The Primary key of our table
	 *
	 * @var string
	 */
	protected $ID = 'ID';

	/**
	 * Enables sorting, it expects an array
	 * of columns (the column names are the values)
	 *
	 * @var array
	 */
	protected $sort_by = array();

	/**
	 * The default sort order
	 *
	 * @var string
	 */
	protected $filter_by = array();

	/**
	 * The status name => count combinations for this table's items. Used to display status filters.
	 *
	 * @var array
	 */
	protected $status_counts = array();

	/**
	 * Notices to display when loading the table. Array of arrays of form array( 'class' => {updated|error}, 'message' => 'This is the notice text display.' ).
	 *
	 * @var array
	 */
	protected $admin_notices = array();

	/**
	 * Localised string displayed in the <h1> element above the able.
	 *
	 * @var string
	 */
	protected $table_header;

	/**
	 * Enables bulk actions. It must be an array where the key is the action name
	 * and the value is the label (which is translated automatically). It is important
	 * to notice that it will check that the method exists (`bulk_$name`) and will throw
	 * an exception if it does not exists.
	 *
	 * This class will automatically check if the current request has a bulk action, will do the
	 * validations and afterwards will execute the bulk method, with two arguments. The first argument
	 * is the array with primary keys, the second argument is a string with a list of the primary keys,
	 * escaped and ready to use (with `IN`).
	 *
	 * @var array
	 */
	protected $bulk_actions = array();

	/**
	 * Makes translation easier, it basically just wraps
	 * `_x` with some default (the package name).
	 *
	 * @param string $text The new text to translate.
	 * @param string $context The context of the text.
	 * @return string|void The translated text.
	 *
	 * @deprecated 3.0.0 Use `_x()` instead.
	 */
	protected function translate( $text, $context = '' ) {
		return $text;
	}

	/**
	 * Reads `$this->bulk_actions` and returns an array that WP_List_Table understands. It
	 * also validates that the bulk method handler exists. It throws an exception because
	 * this is a library meant for developers and missing a bulk method is a development-time error.
	 *
	 * @return array
	 *
	 * @throws RuntimeException Throws RuntimeException when the bulk action does not have a callback method.
	 */
	protected function get_bulk_actions() {
		$actions = array();

		foreach ( $this->bulk_actions as $action => $label ) {
			if ( ! is_callable( array( $this, 'bulk_' . $action ) ) ) {
				throw new RuntimeException( "The bulk action $action does not have a callback method" );
			}

			$actions[ $action ] = $label;
		}

		return $actions;
	}

	/**
	 * Checks if the current request has a bulk action. If that is the case it will validate and will
	 * execute the bulk method handler. Regardless if the action is valid or not it will redirect to
	 * the previous page removing the current arguments that makes this request a bulk action.
	 */
	protected function process_bulk_action() {
		global $wpdb;
		// Detect when a bulk action is being triggered.
		$action = $this->current_action();
		if ( ! $action ) {
			return;
		}

		check_admin_referer( 'bulk-' . $this->_args['plural'] );

		$method = 'bulk_' . $action;
		if ( array_key_exists( $action, $this->bulk_actions ) && is_callable( array( $this, $method ) ) && ! empty( $_GET['ID'] ) && is_array( $_GET['ID'] ) ) {
			$ids_sql = '(' . implode( ',', array_fill( 0, count( $_GET['ID'] ), '%s' ) ) . ')';
			$id      = array_map( 'absint', $_GET['ID'] );
			$this->$method( $id, $wpdb->prepare( $ids_sql, $id ) ); //phpcs:ignore WordPress.DB.PreparedSQL
		}

		if ( isset( $_SERVER['REQUEST_URI'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array( '_wp_http_referer', '_wpnonce', 'ID', 'action', 'action2' ),
					esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) )
				)
			);
			exit;
		}
	}

	/**
	 * Default code for deleting entries.
	 * validated already by process_bulk_action()
	 *
	 * @param array  $ids ids of the items to delete.
	 * @param string $ids_sql the sql for the ids.
	 * @return void
	 */
	protected function bulk_delete( array $ids, $ids_sql ) {
		$store = ActionScheduler::store();
		foreach ( $ids as $action_id ) {
			$store->delete( $action_id );
		}
	}

	/**
	 * Prepares the _column_headers property which is used by WP_Table_List at rendering.
	 * It merges the columns and the sortable columns.
	 */
	protected function prepare_column_headers() {
		$this->_column_headers = array(
			$this->get_columns(),
			get_hidden_columns( $this->screen ),
			$this->get_sortable_columns(),
		);
	}

	/**
	 * Reads $this->sort_by and returns the columns name in a format that WP_Table_List
	 * expects
	 */
	public function get_sortable_columns() {
		$sort_by = array();
		foreach ( $this->sort_by as $column ) {
			$sort_by[ $column ] = array( $column, true );
		}
		return $sort_by;
	}

	/**
	 * Returns the columns names for rendering. It adds a checkbox for selecting everything
	 * as the first column
	 */
	public function get_columns() {
		$columns = array_merge(
			array( 'cb' => '<input type="checkbox" />' ),
			$this->columns
		);

		return $columns;
	}

	/**
	 * Get prepared LIMIT clause for items query
	 *
	 * @global wpdb $wpdb
	 *
	 * @return string Prepared LIMIT clause for items query.
	 */
	protected function get_items_query_limit() {
		global $wpdb;

		$per_page = $this->get_items_per_page( $this->get_per_page_option_name(), $this->items_per_page );
		return $wpdb->prepare( 'LIMIT %d', $per_page );
	}

	/**
	 * Returns the number of items to offset/skip for this current view.
	 *
	 * @return int
	 */
	protected function get_items_offset() {
		$per_page     = $this->get_items_per_page( $this->get_per_page_option_name(), $this->items_per_page );
		$current_page = $this->get_pagenum();
		if ( 1 < $current_page ) {
			$offset = $per_page * ( $current_page - 1 );
		} else {
			$offset = 0;
		}

		return $offset;
	}

	/**
	 * Get prepared OFFSET clause for items query
	 *
	 * @global wpdb $wpdb
	 *
	 * @return string Prepared OFFSET clause for items query.
	 */
	protected function get_items_query_offset() {
		global $wpdb;

		return $wpdb->prepare( 'OFFSET %d', $this->get_items_offset() );
	}

	/**
	 * Prepares the ORDER BY sql statement. It uses `$this->sort_by` to know which
	 * columns are sortable. This requests validates the orderby $_GET parameter is a valid
	 * column and sortable. It will also use order (ASC|DESC) using DESC by default.
	 */
	protected function get_items_query_order() {
		if ( empty( $this->sort_by ) ) {
			return '';
		}

		$orderby = esc_sql( $this->get_request_orderby() );
		$order   = esc_sql( $this->get_request_order() );

		return "ORDER BY {$orderby} {$order}";
	}

	/**
	 * Return the sortable column specified for this request to order the results by, if any.
	 *
	 * @return string
	 */
	protected function get_request_orderby() {

		$valid_sortable_columns = array_values( $this->sort_by );

		if ( ! empty( $_GET['orderby'] ) && in_array( $_GET['orderby'], $valid_sortable_columns, true ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			$orderby = sanitize_text_field( wp_unslash( $_GET['orderby'] ) ); //phpcs:ignore WordPress.Security.NonceVerification.Recommended
		} else {
			$orderby = $valid_sortable_columns[0];
		}

		return $orderby;
	}

	/**
	 * Return the sortable column order specified for this request.
	 *
	 * @return string
	 */
	protected function get_request_order() {

		if ( ! empty( $_GET['order'] ) && 'desc' === strtolower( sanitize_text_field( wp_unslash( $_GET['order'] ) ) ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			$order = 'DESC';
		} else {
			$order = 'ASC';
		}

		return $order;
	}

	/**
	 * Return the status filter for this request, if any.
	 *
	 * @return string
	 */
	protected function get_request_status() {
		$status = ( ! empty( $_GET['status'] ) ) ? sanitize_text_field( wp_unslash( $_GET['status'] ) ) : ''; //phpcs:ignore WordPress.Security.NonceVerification.Recommended
		return $status;
	}

	/**
	 * Return the search filter for this request, if any.
	 *
	 * @return string
	 */
	protected function get_request_search_query() {
		$search_query = ( ! empty( $_GET['s'] ) ) ? sanitize_text_field( wp_unslash( $_GET['s'] ) ) : ''; //phpcs:ignore WordPress.Security.NonceVerification.Recommended
		return $search_query;
	}

	/**
	 * Process and return the columns name. This is meant for using with SQL, this means it
	 * always includes the primary key.
	 *
	 * @return array
	 */
	protected function get_table_columns() {
		$columns = array_keys( $this->columns );
		if ( ! in_array( $this->ID, $columns, true ) ) {
			$columns[] = $this->ID;
		}

		return $columns;
	}

	/**
	 * Check if the current request is doing a "full text" search. If that is the case
	 * prepares the SQL to search texts using LIKE.
	 *
	 * If the current request does not have any search or if this list table does not support
	 * that feature it will return an empty string.
	 *
	 * @return string
	 */
	protected function get_items_query_search() {
		global $wpdb;

		if ( empty( $_GET['s'] ) || empty( $this->search_by ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			return '';
		}

		$search_string = sanitize_text_field( wp_unslash( $_GET['s'] ) ); //phpcs:ignore WordPress.Security.NonceVerification.Recommended

		$filter = array();
		foreach ( $this->search_by as $column ) {
			$wild     = '%';
			$sql_like = $wild . $wpdb->esc_like( $search_string ) . $wild;
			$filter[] = $wpdb->prepare( '`' . $column . '` LIKE %s', $sql_like ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended, WordPress.DB.PreparedSQL.NotPrepared
		}
		return implode( ' OR ', $filter );
	}

	/**
	 * Prepares the SQL to filter rows by the options defined at `$this->filter_by`. Before trusting
	 * any data sent by the user it validates that it is a valid option.
	 */
	protected function get_items_query_filters() {
		global $wpdb;

		if ( ! $this->filter_by || empty( $_GET['filter_by'] ) || ! is_array( $_GET['filter_by'] ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			return '';
		}

		$filter = array();

		foreach ( $this->filter_by as $column => $options ) {
			if ( empty( $_GET['filter_by'][ $column ] ) || empty( $options[ $_GET['filter_by'][ $column ] ] ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
				continue;
			}

			$filter[] = $wpdb->prepare( "`$column` = %s", sanitize_text_field( wp_unslash( $_GET['filter_by'][ $column ] ) ) ); //phpcs:ignore WordPress.Security.NonceVerification.Recommended, WordPress.DB.PreparedSQL.InterpolatedNotPrepared
		}

		return implode( ' AND ', $filter );

	}

	/**
	 * Prepares the data to feed WP_Table_List.
	 *
	 * This has the core for selecting, sorting and filting data. To keep the code simple
	 * its logic is split among many methods (get_items_query_*).
	 *
	 * Beside populating the items this function will also count all the records that matches
	 * the filtering criteria and will do fill the pagination variables.
	 */
	public function prepare_items() {
		global $wpdb;

		$this->process_bulk_action();

		$this->process_row_actions();

		if ( ! empty( $_REQUEST['_wp_http_referer'] && ! empty( $_SERVER['REQUEST_URI'] ) ) ) { //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			// _wp_http_referer is used only on bulk actions, we remove it to keep the $_GET shorter
			wp_safe_redirect( remove_query_arg( array( '_wp_http_referer', '_wpnonce' ), esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) ) ) );
			exit;
		}

		$this->prepare_column_headers();

		$limit   = $this->get_items_query_limit();
		$offset  = $this->get_items_query_offset();
		$order   = $this->get_items_query_order();
		$where   = array_filter(
			array(
				$this->get_items_query_search(),
				$this->get_items_query_filters(),
			)
		);
		$columns = '`' . implode( '`, `', $this->get_table_columns() ) . '`';

		if ( ! empty( $where ) ) {
			$where = 'WHERE (' . implode( ') AND (', $where ) . ')';
		} else {
			$where = '';
		}

		$sql = "SELECT $columns FROM {$this->table_name} {$where} {$order} {$limit} {$offset}";

		$this->set_items( $wpdb->get_results( $sql, ARRAY_A ) ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared

		$query_count = "SELECT COUNT({$this->ID}) FROM {$this->table_name} {$where}";
		$total_items = $wpdb->get_var( $query_count ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		$per_page    = $this->get_items_per_page( $this->get_per_page_option_name(), $this->items_per_page );
		$this->set_pagination_args(
			array(
				'total_items' => $total_items,
				'per_page'    => $per_page,
				'total_pages' => ceil( $total_items / $per_page ),
			)
		);
	}

	/**
	 * Display the table.
	 *
	 * @param string $which The name of the table.
	 */
	public function extra_tablenav( $which ) {
		if ( ! $this->filter_by || 'top' !== $which ) {
			return;
		}

		echo '<div class="alignleft actions">';

		foreach ( $this->filter_by as $id => $options ) {
			$default = ! empty( $_GET['filter_by'][ $id ] ) ? sanitize_text_field( wp_unslash( $_GET['filter_by'][ $id ] ) ) : ''; //phpcs:ignore WordPress.Security.NonceVerification.Recommended
			if ( empty( $options[ $default ] ) ) {
				$default = '';
			}

			echo '<select name="filter_by[' . esc_attr( $id ) . ']" class="first" id="filter-by-' . esc_attr( $id ) . '">';

			foreach ( $options as $value => $label ) {
				echo '<option value="' . esc_attr( $value ) . '" ' . esc_html( $value === $default ? 'selected' : '' ) . '>'
					. esc_html( $label )
				. '</option>';
			}

			echo '</select>';
		}

		submit_button( esc_html__( 'Filter', 'action-scheduler' ), '', 'filter_action', false, array( 'id' => 'post-query-submit' ) );
		echo '</div>';
	}

	/**
	 * Set the data for displaying. It will attempt to unserialize (There is a chance that some columns
	 * are serialized). This can be override in child classes for futher data transformation.
	 *
	 * @param array $items Items array.
	 */
	protected function set_items( array $items ) {
		$this->items = array();
		foreach ( $items as $item ) {
			$this->items[ $item[ $this->ID ] ] = array_map( 'maybe_unserialize', $item );
		}
	}

	/**
	 * Renders the checkbox for each row, this is the first column and it is named ID regardless
	 * of how the primary key is named (to keep the code simpler). The bulk actions will do the proper
	 * name transformation though using `$this->ID`.
	 *
	 * @param array $row The row to render.
	 */
	public function column_cb( $row ) {
		return '<input name="ID[]" type="checkbox" value="' . esc_attr( $row[ $this->ID ] ) . '" />';
	}

	/**
	 * Renders the row-actions.
	 *
	 * This method renders the action menu, it reads the definition from the $row_actions property,
	 * and it checks that the row action method exists before rendering it.
	 *
	 * @param array  $row Row to be rendered.
	 * @param string $column_name Column name.
	 * @return string
	 */
	protected function maybe_render_actions( $row, $column_name ) {
		if ( empty( $this->row_actions[ $column_name ] ) ) {
			return;
		}

		$row_id = $row[ $this->ID ];

		$actions      = '<div class="row-actions">';
		$action_count = 0;
		foreach ( $this->row_actions[ $column_name ] as $action_key => $action ) {

			$action_count++;

			if ( ! method_exists( $this, 'row_action_' . $action_key ) ) {
				continue;
			}

			$action_link = ! empty( $action['link'] ) ? $action['link'] : add_query_arg(
				array(
					'row_action' => $action_key,
					'row_id'     => $row_id,
					'nonce'      => wp_create_nonce( $action_key . '::' . $row_id ),
				)
			);
			$span_class  = ! empty( $action['class'] ) ? $action['class'] : $action_key;
			$separator   = ( $action_count < count( $this->row_actions[ $column_name ] ) ) ? ' | ' : '';

			$actions .= sprintf( '<span class="%s">', esc_attr( $span_class ) );
			$actions .= sprintf( '<a href="%1$s" title="%2$s">%3$s</a>', esc_url( $action_link ), esc_attr( $action['desc'] ), esc_html( $action['name'] ) );
			$actions .= sprintf( '%s</span>', $separator );
		}
		$actions .= '</div>';
		return $actions;
	}

	/**
	 * Process the bulk actions.
	 *
	 * @return void
	 */
	protected function process_row_actions() {
		$parameters = array( 'row_action', 'row_id', 'nonce' );
		foreach ( $parameters as $parameter ) {
			if ( empty( $_REQUEST[ $parameter ] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Recommended
				return;
			}
		}

		$action = sanitize_text_field( wp_unslash( $_REQUEST['row_action'] ) ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended, WordPress.Security.ValidatedSanitizedInput.InputNotValidated
		$row_id = sanitize_text_field( wp_unslash( $_REQUEST['row_id'] ) ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended, WordPress.Security.ValidatedSanitizedInput.InputNotValidated
		$nonce  = sanitize_text_field( wp_unslash( $_REQUEST['nonce'] ) ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended, WordPress.Security.ValidatedSanitizedInput.InputNotValidated
		$method = 'row_action_' . $action; // phpcs:ignore WordPress.Security.NonceVerification.Recommended

		if ( wp_verify_nonce( $nonce, $action . '::' . $row_id ) && method_exists( $this, $method ) ) {
			$this->$method( sanitize_text_field( wp_unslash( $row_id ) ) ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended
		}

		if ( isset( $_SERVER['REQUEST_URI'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array( 'row_id', 'row_action', 'nonce' ),
					esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) )
				)
			);
			exit;
		}
	}

	/**
	 * Default column formatting, it will escape everythig for security.
	 *
	 * @param array  $item The item array.
	 * @param string $column_name Column name to display.
	 *
	 * @return string
	 */
	public function column_default( $item, $column_name ) {
		$column_html  = esc_html( $item[ $column_name ] );
		$column_html .= $this->maybe_render_actions( $item, $column_name );
		return $column_html;
	}

	/**
	 * Display the table heading and search query, if any
	 */
	protected function display_header() {
		echo '<h1 class="wp-heading-inline">' . esc_attr( $this->table_header ) . '</h1>';
		if ( $this->get_request_search_query() ) {
			/* translators: %s: search query */
			echo '<span class="subtitle">' . esc_attr( sprintf( __( 'Search results for "%s"', 'action-scheduler' ), $this->get_request_search_query() ) ) . '</span>';
		}
		echo '<hr class="wp-header-end">';
	}

	/**
	 * Display the table heading and search query, if any
	 */
	protected function display_admin_notices() {
		foreach ( $this->admin_notices as $notice ) {
			echo '<div id="message" class="' . esc_attr( $notice['class'] ) . '">';
			echo '	<p>' . wp_kses_post( $notice['message'] ) . '</p>';
			echo '</div>';
		}
	}

	/**
	 * Prints the available statuses so the user can click to filter.
	 */
	protected function display_filter_by_status() {

		$status_list_items = array();
		$request_status    = $this->get_request_status();

		// Helper to set 'all' filter when not set on status counts passed in.
		if ( ! isset( $this->status_counts['all'] ) ) {
			$this->status_counts = array( 'all' => array_sum( $this->status_counts ) ) + $this->status_counts;
		}

		foreach ( $this->status_counts as $status_name => $count ) {

			if ( 0 === $count ) {
				continue;
			}

			if ( $status_name === $request_status || ( empty( $request_status ) && 'all' === $status_name ) ) {
				$status_list_item = '<li class="%1$s"><a href="%2$s" class="current">%3$s</a> (%4$d)</li>';
			} else {
				$status_list_item = '<li class="%1$s"><a href="%2$s">%3$s</a> (%4$d)</li>';
			}

			$status_filter_url   = ( 'all' === $status_name ) ? remove_query_arg( 'status' ) : add_query_arg( 'status', $status_name );
			$status_filter_url   = remove_query_arg( array( 'paged', 's' ), $status_filter_url );
			$status_list_items[] = sprintf( $status_list_item, esc_attr( $status_name ), esc_url( $status_filter_url ), esc_html( ucfirst( $status_name ) ), absint( $count ) );
		}

		if ( $status_list_items ) {
			echo '<ul class="subsubsub">';
			echo implode( " | \n", $status_list_items ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
			echo '</ul>';
		}
	}

	/**
	 * Renders the table list, we override the original class to render the table inside a form
	 * and to render any needed HTML (like the search box). By doing so the callee of a function can simple
	 * forget about any extra HTML.
	 */
	protected function display_table() {
		echo '<form id="' . esc_attr( $this->_args['plural'] ) . '-filter" method="get">';
		foreach ( $_GET as $key => $value ) { // phpcs:ignore WordPress.Security.NonceVerification.Recommended
			if ( '_' === $key[0] || 'paged' === $key || 'ID' === $key ) {
				continue;
			}
			echo '<input type="hidden" name="' . esc_attr( $key ) . '" value="' . esc_attr( $value ) . '" />';
		}
		if ( ! empty( $this->search_by ) ) {
			echo $this->search_box( $this->get_search_box_button_text(), 'plugin' ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
		}
		parent::display();
		echo '</form>';
	}

	/**
	 * Process any pending actions.
	 */
	public function process_actions() {
		$this->process_bulk_action();
		$this->process_row_actions();

		if ( ! empty( $_REQUEST['_wp_http_referer'] ) && ! empty( $_SERVER['REQUEST_URI'] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Recommended
			// _wp_http_referer is used only on bulk actions, we remove it to keep the $_GET shorter
			wp_safe_redirect( remove_query_arg( array( '_wp_http_referer', '_wpnonce' ), esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) ) ) );
			exit;
		}
	}

	/**
	 * Render the list table page, including header, notices, status filters and table.
	 */
	public function display_page() {
		$this->prepare_items();

		echo '<div class="wrap">';
		$this->display_header();
		$this->display_admin_notices();
		$this->display_filter_by_status();
		$this->display_table();
		echo '</div>';
	}

	/**
	 * Get the text to display in the search box on the list table.
	 */
	protected function get_search_box_placeholder() {
		return esc_html__( 'Search', 'action-scheduler' );
	}

	/**
	 * Gets the screen per_page option name.
	 *
	 * @return string
	 */
	protected function get_per_page_option_name() {
		return $this->package . '_items_per_page';
	}
}
ActionScheduler_Abstract_QueueRunner.php                                                                                                                                                                                                                       10884         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Abstract class with common Queue Cleaner functionality.
 */
abstract class ActionScheduler_Abstract_QueueRunner extends ActionScheduler_Abstract_QueueRunner_Deprecated {

	/** @var ActionScheduler_QueueCleaner */
	protected $cleaner;

	/** @var ActionScheduler_FatalErrorMonitor */
	protected $monitor;

	/** @var ActionScheduler_Store */
	protected $store;

	/**
	 * The created time.
	 *
	 * Represents when the queue runner was constructed and used when calculating how long a PHP request has been running.
	 * For this reason it should be as close as possible to the PHP request start time.
	 *
	 * @var int
	 */
	private $created_time;

	/**
	 * ActionScheduler_Abstract_QueueRunner constructor.
	 *
	 * @param ActionScheduler_Store             $store
	 * @param ActionScheduler_FatalErrorMonitor $monitor
	 * @param ActionScheduler_QueueCleaner      $cleaner
	 */
	public function __construct( ActionScheduler_Store $store = null, ActionScheduler_FatalErrorMonitor $monitor = null, ActionScheduler_QueueCleaner $cleaner = null ) {

		$this->created_time = microtime( true );

		$this->store   = $store ? $store : ActionScheduler_Store::instance();
		$this->monitor = $monitor ? $monitor : new ActionScheduler_FatalErrorMonitor( $this->store );
		$this->cleaner = $cleaner ? $cleaner : new ActionScheduler_QueueCleaner( $this->store );
	}

	/**
	 * Process an individual action.
	 *
	 * @param int $action_id The action ID to process.
	 * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
	 *        Generally, this should be capitalised and not localised as it's a proper noun.
	 */
	public function process_action( $action_id, $context = '' ) {
		try {
			$valid_action = false;
			do_action( 'action_scheduler_before_execute', $action_id, $context );

			if ( ActionScheduler_Store::STATUS_PENDING !== $this->store->get_status( $action_id ) ) {
				do_action( 'action_scheduler_execution_ignored', $action_id, $context );
				return;
			}

			$valid_action = true;
			do_action( 'action_scheduler_begin_execute', $action_id, $context );

			$action = $this->store->fetch_action( $action_id );
			$this->store->log_execution( $action_id );
			$action->execute();
			do_action( 'action_scheduler_after_execute', $action_id, $action, $context );
			$this->store->mark_complete( $action_id );
		} catch ( Exception $e ) {
			if ( $valid_action ) {
				$this->store->mark_failure( $action_id );
				do_action( 'action_scheduler_failed_execution', $action_id, $e, $context );
			} else {
				do_action( 'action_scheduler_failed_validation', $action_id, $e, $context );
			}
		}

		if ( isset( $action ) && is_a( $action, 'ActionScheduler_Action' ) && $action->get_schedule()->is_recurring() ) {
			$this->schedule_next_instance( $action, $action_id );
		}
	}

	/**
	 * Schedule the next instance of the action if necessary.
	 *
	 * @param ActionScheduler_Action $action
	 * @param int $action_id
	 */
	protected function schedule_next_instance( ActionScheduler_Action $action, $action_id ) {
		// If a recurring action has been consistently failing, we may wish to stop rescheduling it.
		if (
			ActionScheduler_Store::STATUS_FAILED === $this->store->get_status( $action_id )
			&& $this->recurring_action_is_consistently_failing( $action, $action_id )
		) {
			ActionScheduler_Logger::instance()->log(
				$action_id,
				__( 'This action appears to be consistently failing. A new instance will not be scheduled.', 'action-scheduler' )
			);

			return;
		}

		try {
			ActionScheduler::factory()->repeat( $action );
		} catch ( Exception $e ) {
			do_action( 'action_scheduler_failed_to_schedule_next_instance', $action_id, $e, $action );
		}
	}

	/**
	 * Determine if the specified recurring action has been consistently failing.
	 *
	 * @param ActionScheduler_Action $action    The recurring action to be rescheduled.
	 * @param int                    $action_id The ID of the recurring action.
	 *
	 * @return bool
	 */
	private function recurring_action_is_consistently_failing( ActionScheduler_Action $action, $action_id ) {
		/**
		 * Controls the failure threshold for recurring actions.
		 *
		 * Before rescheduling a recurring action, we look at its status. If it failed, we then check if all of the most
		 * recent actions (upto the threshold set by this filter) sharing the same hook have also failed: if they have,
		 * that is considered consistent failure and a new instance of the action will not be scheduled.
		 *
		 * @param int $failure_threshold Number of actions of the same hook to examine for failure. Defaults to 5.
		 */
		$consistent_failure_threshold = (int) apply_filters( 'action_scheduler_recurring_action_failure_threshold', 5 );

		// This query should find the earliest *failing* action (for the hook we are interested in) within our threshold.
		$query_args = array(
			'hook'         => $action->get_hook(),
			'status'       => ActionScheduler_Store::STATUS_FAILED,
			'date'         => date_create( 'now', timezone_open( 'UTC' ) )->format( 'Y-m-d H:i:s' ),
			'date_compare' => '<',
			'per_page'     => 1,
			'offset'       => $consistent_failure_threshold - 1
		);

		$first_failing_action_id = $this->store->query_actions( $query_args );

		// If we didn't retrieve an action ID, then there haven't been enough failures for us to worry about.
		if ( empty( $first_failing_action_id ) ) {
			return false;
		}

		// Now let's fetch the first action (having the same hook) of *any status*ithin the same window.
		unset( $query_args['status'] );
		$first_action_id_with_the_same_hook = $this->store->query_actions( $query_args );

		// If the IDs match, then actions for this hook must be consistently failing.
		return $first_action_id_with_the_same_hook === $first_failing_action_id;
	}

	/**
	 * Run the queue cleaner.
	 *
	 * @author Jeremy Pry
	 */
	protected function run_cleanup() {
		$this->cleaner->clean( 10 * $this->get_time_limit() );
	}

	/**
	 * Get the number of concurrent batches a runner allows.
	 *
	 * @return int
	 */
	public function get_allowed_concurrent_batches() {
		return apply_filters( 'action_scheduler_queue_runner_concurrent_batches', 1 );
	}

	/**
	 * Check if the number of allowed concurrent batches is met or exceeded.
	 *
	 * @return bool
	 */
	public function has_maximum_concurrent_batches() {
		return $this->store->get_claim_count() >= $this->get_allowed_concurrent_batches();
	}

	/**
	 * Get the maximum number of seconds a batch can run for.
	 *
	 * @return int The number of seconds.
	 */
	protected function get_time_limit() {

		$time_limit = 30;

		// Apply deprecated filter from deprecated get_maximum_execution_time() method
		if ( has_filter( 'action_scheduler_maximum_execution_time' ) ) {
			_deprecated_function( 'action_scheduler_maximum_execution_time', '2.1.1', 'action_scheduler_queue_runner_time_limit' );
			$time_limit = apply_filters( 'action_scheduler_maximum_execution_time', $time_limit );
		}

		return absint( apply_filters( 'action_scheduler_queue_runner_time_limit', $time_limit ) );
	}

	/**
	 * Get the number of seconds the process has been running.
	 *
	 * @return int The number of seconds.
	 */
	protected function get_execution_time() {
		$execution_time = microtime( true ) - $this->created_time;

		// Get the CPU time if the hosting environment uses it rather than wall-clock time to calculate a process's execution time.
		if ( function_exists( 'getrusage' ) && apply_filters( 'action_scheduler_use_cpu_execution_time', defined( 'PANTHEON_ENVIRONMENT' ) ) ) {
			$resource_usages = getrusage();

			if ( isset( $resource_usages['ru_stime.tv_usec'], $resource_usages['ru_stime.tv_usec'] ) ) {
				$execution_time = $resource_usages['ru_stime.tv_sec'] + ( $resource_usages['ru_stime.tv_usec'] / 1000000 );
			}
		}

		return $execution_time;
	}

	/**
	 * Check if the host's max execution time is (likely) to be exceeded if processing more actions.
	 *
	 * @param int $processed_actions The number of actions processed so far - used to determine the likelihood of exceeding the time limit if processing another action
	 * @return bool
	 */
	protected function time_likely_to_be_exceeded( $processed_actions ) {
		$execution_time     = $this->get_execution_time();
		$max_execution_time = $this->get_time_limit();

		// Safety against division by zero errors.
		if ( 0 === $processed_actions ) {
			return $execution_time >= $max_execution_time;
		}

		$time_per_action       = $execution_time / $processed_actions;
		$estimated_time        = $execution_time + ( $time_per_action * 3 );
		$likely_to_be_exceeded = $estimated_time > $max_execution_time;

		return apply_filters( 'action_scheduler_maximum_execution_time_likely_to_be_exceeded', $likely_to_be_exceeded, $this, $processed_actions, $execution_time, $max_execution_time );
	}

	/**
	 * Get memory limit
	 *
	 * Based on WP_Background_Process::get_memory_limit()
	 *
	 * @return int
	 */
	protected function get_memory_limit() {
		if ( function_exists( 'ini_get' ) ) {
			$memory_limit = ini_get( 'memory_limit' );
		} else {
			$memory_limit = '128M'; // Sensible default, and minimum required by WooCommerce
		}

		if ( ! $memory_limit || -1 === $memory_limit || '-1' === $memory_limit ) {
			// Unlimited, set to 32GB.
			$memory_limit = '32G';
		}

		return ActionScheduler_Compatibility::convert_hr_to_bytes( $memory_limit );
	}

	/**
	 * Memory exceeded
	 *
	 * Ensures the batch process never exceeds 90% of the maximum WordPress memory.
	 *
	 * Based on WP_Background_Process::memory_exceeded()
	 *
	 * @return bool
	 */
	protected function memory_exceeded() {

		$memory_limit    = $this->get_memory_limit() * 0.90;
		$current_memory  = memory_get_usage( true );
		$memory_exceeded = $current_memory >= $memory_limit;

		return apply_filters( 'action_scheduler_memory_exceeded', $memory_exceeded, $this );
	}

	/**
	 * See if the batch limits have been exceeded, which is when memory usage is almost at
	 * the maximum limit, or the time to process more actions will exceed the max time limit.
	 *
	 * Based on WC_Background_Process::batch_limits_exceeded()
	 *
	 * @param int $processed_actions The number of actions processed so far - used to determine the likelihood of exceeding the time limit if processing another action
	 * @return bool
	 */
	protected function batch_limits_exceeded( $processed_actions ) {
		return $this->memory_exceeded() || $this->time_likely_to_be_exceeded( $processed_actions );
	}

	/**
	 * Process actions in the queue.
	 *
	 * @author Jeremy Pry
	 * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
	 *        Generally, this should be capitalised and not localised as it's a proper noun.
	 * @return int The number of actions processed.
	 */
	abstract public function run( $context = '' );
}
ActionScheduler_Abstract_RecurringSchedule.php                                                                                                                                                                                                                 3174          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class ActionScheduler_Abstract_RecurringSchedule
 */
abstract class ActionScheduler_Abstract_RecurringSchedule extends ActionScheduler_Abstract_Schedule {

	/**
	 * The date & time the first instance of this schedule was setup to run (which may not be this instance).
	 *
	 * Schedule objects are attached to an action object. Each schedule stores the run date for that
	 * object as the start date - @see $this->start - and logic to calculate the next run date after
	 * that - @see $this->calculate_next(). The $first_date property also keeps a record of when the very
	 * first instance of this chain of schedules ran.
	 *
	 * @var DateTime
	 */
	private $first_date = NULL;

	/**
	 * Timestamp equivalent of @see $this->first_date
	 *
	 * @var int
	 */
	protected $first_timestamp = NULL;

	/**
	 * The recurrance between each time an action is run using this schedule.
	 * Used to calculate the start date & time. Can be a number of seconds, in the
	 * case of ActionScheduler_IntervalSchedule, or a cron expression, as in the
	 * case of ActionScheduler_CronSchedule. Or something else.
	 *
	 * @var mixed
	 */
	protected $recurrence;

	/**
	 * @param DateTime $date The date & time to run the action.
	 * @param mixed $recurrence The data used to determine the schedule's recurrance.
	 * @param DateTime|null $first (Optional) The date & time the first instance of this interval schedule ran. Default null, meaning this is the first instance.
	 */
	public function __construct( DateTime $date, $recurrence, DateTime $first = null ) {
		parent::__construct( $date );
		$this->first_date = empty( $first ) ? $date : $first;
		$this->recurrence = $recurrence;
	}

	/**
	 * @return bool
	 */
	public function is_recurring() {
		return true;
	}

	/**
	 * Get the date & time of the first schedule in this recurring series.
	 *
	 * @return DateTime|null
	 */
	public function get_first_date() {
		return clone $this->first_date;
	}

	/**
	 * @return string
	 */
	public function get_recurrence() {
		return $this->recurrence;
	}

	/**
	 * For PHP 5.2 compat, since DateTime objects can't be serialized
	 * @return array
	 */
	public function __sleep() {
		$sleep_params = parent::__sleep();
		$this->first_timestamp = $this->first_date->getTimestamp();
		return array_merge( $sleep_params, array(
			'first_timestamp',
			'recurrence'
		) );
	}

	/**
	 * Unserialize recurring schedules serialized/stored prior to AS 3.0.0
	 *
	 * Prior to Action Scheduler 3.0.0, schedules used different property names to refer
	 * to equivalent data. For example, ActionScheduler_IntervalSchedule::start_timestamp
	 * was the same as ActionScheduler_SimpleSchedule::timestamp. This was addressed in
	 * Action Scheduler 3.0.0, where properties and property names were aligned for better
	 * inheritance. To maintain backward compatibility with scheduled serialized and stored
	 * prior to 3.0, we need to correctly map the old property names.
	 */
	public function __wakeup() {
		parent::__wakeup();
		if ( $this->first_timestamp > 0 ) {
			$this->first_date = as_get_datetime_object( $this->first_timestamp );
		} else {
			$this->first_date = $this->get_date();
		}
	}
}
ActionScheduler_Abstract_Schedule.php                                                                                                                                                                                                                          1814          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class ActionScheduler_Abstract_Schedule
 */
abstract class ActionScheduler_Abstract_Schedule extends ActionScheduler_Schedule_Deprecated {

	/**
	 * The date & time the schedule is set to run.
	 *
	 * @var DateTime
	 */
	private $scheduled_date = NULL;

	/**
	 * Timestamp equivalent of @see $this->scheduled_date
	 *
	 * @var int
	 */
	protected $scheduled_timestamp = NULL;

	/**
	 * @param DateTime $date The date & time to run the action.
	 */
	public function __construct( DateTime $date ) {
		$this->scheduled_date = $date;
	}

	/**
	 * Check if a schedule should recur.
	 *
	 * @return bool
	 */
	abstract public function is_recurring();

	/**
	 * Calculate when the next instance of this schedule would run based on a given date & time.
	 *
	 * @param DateTime $after
	 * @return DateTime
	 */
	abstract protected function calculate_next( DateTime $after );

	/**
	 * Get the next date & time when this schedule should run after a given date & time.
	 *
	 * @param DateTime $after
	 * @return DateTime|null
	 */
	public function get_next( DateTime $after ) {
		$after = clone $after;
		if ( $after > $this->scheduled_date ) {
			$after = $this->calculate_next( $after );
			return $after;
		}
		return clone $this->scheduled_date;
	}

	/**
	 * Get the date & time the schedule is set to run.
	 *
	 * @return DateTime|null
	 */
	public function get_date() {
		return $this->scheduled_date;
	}

	/**
	 * For PHP 5.2 compat, since DateTime objects can't be serialized
	 * @return array
	 */
	public function __sleep() {
		$this->scheduled_timestamp = $this->scheduled_date->getTimestamp();
		return array(
			'scheduled_timestamp',
		);
	}

	public function __wakeup() {
		$this->scheduled_date = as_get_datetime_object( $this->scheduled_timestamp );
		unset( $this->scheduled_timestamp );
	}
}
ActionScheduler_Abstract_Schema.php                                                                                                                                                                                                                            4641          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php


/**
 * Class ActionScheduler_Abstract_Schema
 *
 * @package Action_Scheduler
 *
 * @codeCoverageIgnore
 *
 * Utility class for creating/updating custom tables
 */
abstract class ActionScheduler_Abstract_Schema {

	/**
	 * @var int Increment this value in derived class to trigger a schema update.
	 */
	protected $schema_version = 1;

	/**
	 * @var string Schema version stored in database.
	 */
	protected $db_version;

	/**
	 * @var array Names of tables that will be registered by this class.
	 */
	protected $tables = [];

	/**
	 * Can optionally be used by concrete classes to carry out additional initialization work
	 * as needed.
	 */
	public function init() {}

	/**
	 * Register tables with WordPress, and create them if needed.
	 *
	 * @param bool $force_update Optional. Default false. Use true to always run the schema update.
	 *
	 * @return void
	 */
	public function register_tables( $force_update = false ) {
		global $wpdb;

		// make WP aware of our tables
		foreach ( $this->tables as $table ) {
			$wpdb->tables[] = $table;
			$name           = $this->get_full_table_name( $table );
			$wpdb->$table   = $name;
		}

		// create the tables
		if ( $this->schema_update_required() || $force_update ) {
			foreach ( $this->tables as $table ) {
				/**
				 * Allow custom processing before updating a table schema.
				 *
				 * @param string $table Name of table being updated.
				 * @param string $db_version Existing version of the table being updated.
				 */
				do_action( 'action_scheduler_before_schema_update', $table, $this->db_version );
				$this->update_table( $table );
			}
			$this->mark_schema_update_complete();
		}
	}

	/**
	 * @param string $table The name of the table
	 *
	 * @return string The CREATE TABLE statement, suitable for passing to dbDelta
	 */
	abstract protected function get_table_definition( $table );

	/**
	 * Determine if the database schema is out of date
	 * by comparing the integer found in $this->schema_version
	 * with the option set in the WordPress options table
	 *
	 * @return bool
	 */
	private function schema_update_required() {
		$option_name      = 'schema-' . static::class;
		$this->db_version = get_option( $option_name, 0 );

		// Check for schema option stored by the Action Scheduler Custom Tables plugin in case site has migrated from that plugin with an older schema
		if ( 0 === $this->db_version ) {

			$plugin_option_name = 'schema-';

			switch ( static::class ) {
				case 'ActionScheduler_StoreSchema' :
					$plugin_option_name .= 'Action_Scheduler\Custom_Tables\DB_Store_Table_Maker';
					break;
				case 'ActionScheduler_LoggerSchema' :
					$plugin_option_name .= 'Action_Scheduler\Custom_Tables\DB_Logger_Table_Maker';
					break;
			}

			$this->db_version = get_option( $plugin_option_name, 0 );

			delete_option( $plugin_option_name );
		}

		return version_compare( $this->db_version, $this->schema_version, '<' );
	}

	/**
	 * Update the option in WordPress to indicate that
	 * our schema is now up to date
	 *
	 * @return void
	 */
	private function mark_schema_update_complete() {
		$option_name = 'schema-' . static::class;

		// work around race conditions and ensure that our option updates
		$value_to_save = (string) $this->schema_version . '.0.' . time();

		update_option( $option_name, $value_to_save );
	}

	/**
	 * Update the schema for the given table
	 *
	 * @param string $table The name of the table to update
	 *
	 * @return void
	 */
	private function update_table( $table ) {
		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
		$definition = $this->get_table_definition( $table );
		if ( $definition ) {
			$updated = dbDelta( $definition );
			foreach ( $updated as $updated_table => $update_description ) {
				if ( strpos( $update_description, 'Created table' ) === 0 ) {
					do_action( 'action_scheduler/created_table', $updated_table, $table );
				}
			}
		}
	}

	/**
	 * @param string $table
	 *
	 * @return string The full name of the table, including the
	 *                table prefix for the current blog
	 */
	protected function get_full_table_name( $table ) {
		return $GLOBALS[ 'wpdb' ]->prefix . $table;
	}

	/**
	 * Confirms that all of the tables registered by this schema class have been created.
	 *
	 * @return bool
	 */
	public function tables_exist() {
		global $wpdb;

		$existing_tables = $wpdb->get_col( 'SHOW TABLES' );
		$expected_tables = array_map(
			function ( $table_name ) use ( $wpdb ) {
				return $wpdb->prefix . $table_name;
			},
			$this->tables
		);

		return count( array_intersect( $existing_tables, $expected_tables ) ) === count( $expected_tables );
	}
}
ActionScheduler_Lock.php                                                                                                                                                                                                                                       1627          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Abstract class for setting a basic lock to throttle some action.
 *
 * Class ActionScheduler_Lock
 */
abstract class ActionScheduler_Lock {

	/** @var ActionScheduler_Lock */
	private static $locker = NULL;

	/** @var int */
	protected static $lock_duration = MINUTE_IN_SECONDS;

	/**
	 * Check if a lock is set for a given lock type.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return bool
	 */
	public function is_locked( $lock_type ) {
		return ( $this->get_expiration( $lock_type ) >= time() );
	}

	/**
	 * Set a lock.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return bool
	 */
	abstract public function set( $lock_type );

	/**
	 * If a lock is set, return the timestamp it was set to expiry.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return bool|int False if no lock is set, otherwise the timestamp for when the lock is set to expire.
	 */
	abstract public function get_expiration( $lock_type );

	/**
	 * Get the amount of time to set for a given lock. 60 seconds by default.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return int
	 */
	protected function get_duration( $lock_type ) {
		return apply_filters( 'action_scheduler_lock_duration', self::$lock_duration, $lock_type );
	}

	/**
	 * @return ActionScheduler_Lock
	 */
	public static function instance() {
		if ( empty( self::$locker ) ) {
			$class = apply_filters( 'action_scheduler_lock_class', 'ActionScheduler_OptionLock' );
			self::$locker = new $class();
		}
		return self::$locker;
	}
}
ActionScheduler_Logger.php                                                                                                                                                                                                                                     6319          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class ActionScheduler_Logger
 * @codeCoverageIgnore
 */
abstract class ActionScheduler_Logger {
	private static $logger = NULL;

	/**
	 * @return ActionScheduler_Logger
	 */
	public static function instance() {
		if ( empty(self::$logger) ) {
			$class = apply_filters('action_scheduler_logger_class', 'ActionScheduler_wpCommentLogger');
			self::$logger = new $class();
		}
		return self::$logger;
	}

	/**
	 * @param string $action_id
	 * @param string $message
	 * @param DateTime $date
	 *
	 * @return string The log entry ID
	 */
	abstract public function log( $action_id, $message, DateTime $date = NULL );

	/**
	 * @param string $entry_id
	 *
	 * @return ActionScheduler_LogEntry
	 */
	abstract public function get_entry( $entry_id );

	/**
	 * @param string $action_id
	 *
	 * @return ActionScheduler_LogEntry[]
	 */
	abstract public function get_logs( $action_id );


	/**
	 * @codeCoverageIgnore
	 */
	public function init() {
		$this->hook_stored_action();
		add_action( 'action_scheduler_canceled_action', array( $this, 'log_canceled_action' ), 10, 1 );
		add_action( 'action_scheduler_begin_execute', array( $this, 'log_started_action' ), 10, 2 );
		add_action( 'action_scheduler_after_execute', array( $this, 'log_completed_action' ), 10, 3 );
		add_action( 'action_scheduler_failed_execution', array( $this, 'log_failed_action' ), 10, 3 );
		add_action( 'action_scheduler_failed_action', array( $this, 'log_timed_out_action' ), 10, 2 );
		add_action( 'action_scheduler_unexpected_shutdown', array( $this, 'log_unexpected_shutdown' ), 10, 2 );
		add_action( 'action_scheduler_reset_action', array( $this, 'log_reset_action' ), 10, 1 );
		add_action( 'action_scheduler_execution_ignored', array( $this, 'log_ignored_action' ), 10, 2 );
		add_action( 'action_scheduler_failed_fetch_action', array( $this, 'log_failed_fetch_action' ), 10, 2 );
		add_action( 'action_scheduler_failed_to_schedule_next_instance', array( $this, 'log_failed_schedule_next_instance' ), 10, 2 );
		add_action( 'action_scheduler_bulk_cancel_actions', array( $this, 'bulk_log_cancel_actions' ), 10, 1 );
	}

	public function hook_stored_action() {
		add_action( 'action_scheduler_stored_action', array( $this, 'log_stored_action' ) );
	}

	public function unhook_stored_action() {
		remove_action( 'action_scheduler_stored_action', array( $this, 'log_stored_action' ) );
	}

	public function log_stored_action( $action_id ) {
		$this->log( $action_id, __( 'action created', 'action-scheduler' ) );
	}

	public function log_canceled_action( $action_id ) {
		$this->log( $action_id, __( 'action canceled', 'action-scheduler' ) );
	}

	public function log_started_action( $action_id, $context = '' ) {
		if ( ! empty( $context ) ) {
			/* translators: %s: context */
			$message = sprintf( __( 'action started via %s', 'action-scheduler' ), $context );
		} else {
			$message = __( 'action started', 'action-scheduler' );
		}
		$this->log( $action_id, $message );
	}

	public function log_completed_action( $action_id, $action = NULL, $context = '' ) {
		if ( ! empty( $context ) ) {
			/* translators: %s: context */
			$message = sprintf( __( 'action complete via %s', 'action-scheduler' ), $context );
		} else {
			$message = __( 'action complete', 'action-scheduler' );
		}
		$this->log( $action_id, $message );
	}

	public function log_failed_action( $action_id, Exception $exception, $context = '' ) {
		if ( ! empty( $context ) ) {
			/* translators: 1: context 2: exception message */
			$message = sprintf( __( 'action failed via %1$s: %2$s', 'action-scheduler' ), $context, $exception->getMessage() );
		} else {
			/* translators: %s: exception message */
			$message = sprintf( __( 'action failed: %s', 'action-scheduler' ), $exception->getMessage() );
		}
		$this->log( $action_id, $message );
	}

	public function log_timed_out_action( $action_id, $timeout ) {
		/* translators: %s: amount of time */
		$this->log( $action_id, sprintf( __( 'action marked as failed after %s seconds. Unknown error occurred. Check server, PHP and database error logs to diagnose cause.', 'action-scheduler' ), $timeout ) );
	}

	public function log_unexpected_shutdown( $action_id, $error ) {
		if ( ! empty( $error ) ) {
			/* translators: 1: error message 2: filename 3: line */
			$this->log( $action_id, sprintf( __( 'unexpected shutdown: PHP Fatal error %1$s in %2$s on line %3$s', 'action-scheduler' ), $error['message'], $error['file'], $error['line'] ) );
		}
	}

	public function log_reset_action( $action_id ) {
		$this->log( $action_id, __( 'action reset', 'action-scheduler' ) );
	}

	public function log_ignored_action( $action_id, $context = '' ) {
		if ( ! empty( $context ) ) {
			/* translators: %s: context */
			$message = sprintf( __( 'action ignored via %s', 'action-scheduler' ), $context );
		} else {
			$message = __( 'action ignored', 'action-scheduler' );
		}
		$this->log( $action_id, $message );
	}

	/**
	 * @param string $action_id
	 * @param Exception|NULL $exception The exception which occured when fetching the action. NULL by default for backward compatibility.
	 *
	 * @return ActionScheduler_LogEntry[]
	 */
	public function log_failed_fetch_action( $action_id, Exception $exception = NULL ) {

		if ( ! is_null( $exception ) ) {
			/* translators: %s: exception message */
			$log_message = sprintf( __( 'There was a failure fetching this action: %s', 'action-scheduler' ), $exception->getMessage() );
		} else {
			$log_message = __( 'There was a failure fetching this action', 'action-scheduler' );
		}

		$this->log( $action_id, $log_message );
	}

	public function log_failed_schedule_next_instance( $action_id, Exception $exception ) {
		/* translators: %s: exception message */
		$this->log( $action_id, sprintf( __( 'There was a failure scheduling the next instance of this action: %s', 'action-scheduler' ), $exception->getMessage() ) );
	}

	/**
	 * Bulk add cancel action log entries.
	 *
	 * Implemented here for backward compatibility. Should be implemented in parent loggers
	 * for more performant bulk logging.
	 *
	 * @param array $action_ids List of action ID.
	 */
	public function bulk_log_cancel_actions( $action_ids ) {
		if ( empty( $action_ids ) ) {
			return;
		}

		foreach ( $action_ids as $action_id ) {
			$this->log_canceled_action( $action_id );
		}
	}
}
ActionScheduler_Store.php                                                                                                                                                                                                                                      13293         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class ActionScheduler_Store
 * @codeCoverageIgnore
 */
abstract class ActionScheduler_Store extends ActionScheduler_Store_Deprecated {
	const STATUS_COMPLETE = 'complete';
	const STATUS_PENDING  = 'pending';
	const STATUS_RUNNING  = 'in-progress';
	const STATUS_FAILED   = 'failed';
	const STATUS_CANCELED = 'canceled';
	const DEFAULT_CLASS   = 'ActionScheduler_wpPostStore';

	/** @var ActionScheduler_Store */
	private static $store = NULL;

	/** @var int */
	protected static $max_args_length = 191;

	/**
	 * @param ActionScheduler_Action $action
	 * @param DateTime $scheduled_date Optional Date of the first instance
	 *        to store. Otherwise uses the first date of the action's
	 *        schedule.
	 *
	 * @return int The action ID
	 */
	abstract public function save_action( ActionScheduler_Action $action, DateTime $scheduled_date = NULL );

	/**
	 * @param string $action_id
	 *
	 * @return ActionScheduler_Action
	 */
	abstract public function fetch_action( $action_id );

	/**
	 * Find an action.
	 *
	 * Note: the query ordering changes based on the passed 'status' value.
	 *
	 * @param string $hook Action hook.
	 * @param array  $params Parameters of the action to find.
	 *
	 * @return string|null ID of the next action matching the criteria or NULL if not found.
	 */
	public function find_action( $hook, $params = array() ) {
		$params = wp_parse_args(
			$params,
			array(
				'args'   => null,
				'status' => self::STATUS_PENDING,
				'group'  => '',
			)
		);

		// These params are fixed for this method.
		$params['hook']     = $hook;
		$params['orderby']  = 'date';
		$params['per_page'] = 1;

		if ( ! empty( $params['status'] ) ) {
			if ( self::STATUS_PENDING === $params['status'] ) {
				$params['order'] = 'ASC'; // Find the next action that matches.
			} else {
				$params['order'] = 'DESC'; // Find the most recent action that matches.
			}
		}

		$results = $this->query_actions( $params );

		return empty( $results ) ? null : $results[0];
	}

	/**
	 * Query for action count or list of action IDs.
	 *
	 * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
	 *
	 * @param array  $query {
	 *      Query filtering options.
	 *
	 *      @type string       $hook             The name of the actions. Optional.
	 *      @type string|array $status           The status or statuses of the actions. Optional.
	 *      @type array        $args             The args array of the actions. Optional.
	 *      @type DateTime     $date             The scheduled date of the action. Used in UTC timezone. Optional.
	 *      @type string       $date_compare     Operator for selecting by $date param. Accepted values are '!=', '>', '>=', '<', '<=', '='. Defaults to '<='.
	 *      @type DateTime     $modified         The last modified date of the action. Used in UTC timezone. Optional.
	 *      @type string       $modified_compare Operator for comparing $modified param. Accepted values are '!=', '>', '>=', '<', '<=', '='. Defaults to '<='.
	 *      @type string       $group            The group the action belongs to. Optional.
	 *      @type bool|int     $claimed          TRUE to find claimed actions, FALSE to find unclaimed actions, an int to find a specific claim ID. Optional.
	 *      @type int          $per_page         Number of results to return. Defaults to 5.
	 *      @type int          $offset           The query pagination offset. Defaults to 0.
	 *      @type int          $orderby          Accepted values are 'hook', 'group', 'modified', 'date' or 'none'. Defaults to 'date'.
	 *      @type string       $order            Accepted values are 'ASC' or 'DESC'. Defaults to 'ASC'.
	 * }
	 * @param string $query_type Whether to select or count the results. Default, select.
	 *
	 * @return string|array|null The IDs of actions matching the query. Null on failure.
	 */
	abstract public function query_actions( $query = array(), $query_type = 'select' );

	/**
	 * Run query to get a single action ID.
	 *
	 * @since 3.3.0
	 *
	 * @see ActionScheduler_Store::query_actions for $query arg usage but 'per_page' and 'offset' can't be used.
	 *
	 * @param array $query Query parameters.
	 *
	 * @return int|null
	 */
	public function query_action( $query ) {
		$query['per_page'] = 1;
		$query['offset']   = 0;
		$results           = $this->query_actions( $query );

		if ( empty( $results ) ) {
			return null;
		} else {
			return (int) $results[0];
		}
	}

	/**
	 * Get a count of all actions in the store, grouped by status
	 *
	 * @return array
	 */
	abstract public function action_counts();

	/**
	 * Get additional action counts.
	 *
	 * - add past-due actions
	 *
	 * @return array
	 */
	public function extra_action_counts() {
		$extra_actions = array();

		$pastdue_action_counts = ( int ) $this->query_actions( array(
			'status' => self::STATUS_PENDING,
			'date'   => as_get_datetime_object(),
		), 'count' );

		if ( $pastdue_action_counts ) {
			$extra_actions['past-due'] = $pastdue_action_counts;
		}

		/**
		 * Allows 3rd party code to add extra action counts (used in filters in the list table).
		 *
		 * @since 3.5.0
		 * @param $extra_actions array Array with format action_count_identifier => action count.
		 */
		return apply_filters( 'action_scheduler_extra_action_counts', $extra_actions );
	}

	/**
	 * @param string $action_id
	 */
	abstract public function cancel_action( $action_id );

	/**
	 * @param string $action_id
	 */
	abstract public function delete_action( $action_id );

	/**
	 * @param string $action_id
	 *
	 * @return DateTime The date the action is schedule to run, or the date that it ran.
	 */
	abstract public function get_date( $action_id );


	/**
	 * @param int      $max_actions
	 * @param DateTime $before_date Claim only actions schedule before the given date. Defaults to now.
	 * @param array    $hooks       Claim only actions with a hook or hooks.
	 * @param string   $group       Claim only actions in the given group.
	 *
	 * @return ActionScheduler_ActionClaim
	 */
	abstract public function stake_claim( $max_actions = 10, DateTime $before_date = null, $hooks = array(), $group = '' );

	/**
	 * @return int
	 */
	abstract public function get_claim_count();

	/**
	 * @param ActionScheduler_ActionClaim $claim
	 */
	abstract public function release_claim( ActionScheduler_ActionClaim $claim );

	/**
	 * @param string $action_id
	 */
	abstract public function unclaim_action( $action_id );

	/**
	 * @param string $action_id
	 */
	abstract public function mark_failure( $action_id );

	/**
	 * @param string $action_id
	 */
	abstract public function log_execution( $action_id );

	/**
	 * @param string $action_id
	 */
	abstract public function mark_complete( $action_id );

	/**
	 * @param string $action_id
	 *
	 * @return string
	 */
	abstract public function get_status( $action_id );

	/**
	 * @param string $action_id
	 * @return mixed
	 */
	abstract public function get_claim_id( $action_id );

	/**
	 * @param string $claim_id
	 * @return array
	 */
	abstract public function find_actions_by_claim_id( $claim_id );

	/**
	 * @param string $comparison_operator
	 * @return string
	 */
	protected function validate_sql_comparator( $comparison_operator ) {
		if ( in_array( $comparison_operator, array('!=', '>', '>=', '<', '<=', '=') ) ) {
			return $comparison_operator;
		}
		return '=';
	}

	/**
	 * Get the time MySQL formated date/time string for an action's (next) scheduled date.
	 *
	 * @param ActionScheduler_Action $action
	 * @param DateTime $scheduled_date (optional)
	 * @return string
	 */
	protected function get_scheduled_date_string( ActionScheduler_Action $action, DateTime $scheduled_date = NULL ) {
		$next = null === $scheduled_date ? $action->get_schedule()->get_date() : $scheduled_date;
		if ( ! $next ) {
			$next = date_create();
		}
		$next->setTimezone( new DateTimeZone( 'UTC' ) );

		return $next->format( 'Y-m-d H:i:s' );
	}

	/**
	 * Get the time MySQL formated date/time string for an action's (next) scheduled date.
	 *
	 * @param ActionScheduler_Action $action
	 * @param DateTime $scheduled_date (optional)
	 * @return string
	 */
	protected function get_scheduled_date_string_local( ActionScheduler_Action $action, DateTime $scheduled_date = NULL ) {
		$next = null === $scheduled_date ? $action->get_schedule()->get_date() : $scheduled_date;
		if ( ! $next ) {
			$next = date_create();
		}

		ActionScheduler_TimezoneHelper::set_local_timezone( $next );
		return $next->format( 'Y-m-d H:i:s' );
	}

	/**
	 * Validate that we could decode action arguments.
	 *
	 * @param mixed $args      The decoded arguments.
	 * @param int   $action_id The action ID.
	 *
	 * @throws ActionScheduler_InvalidActionException When the decoded arguments are invalid.
	 */
	protected function validate_args( $args, $action_id ) {
		// Ensure we have an array of args.
		if ( ! is_array( $args ) ) {
			throw ActionScheduler_InvalidActionException::from_decoding_args( $action_id );
		}

		// Validate JSON decoding if possible.
		if ( function_exists( 'json_last_error' ) && JSON_ERROR_NONE !== json_last_error() ) {
			throw ActionScheduler_InvalidActionException::from_decoding_args( $action_id, $args );
		}
	}

	/**
	 * Validate a ActionScheduler_Schedule object.
	 *
	 * @param mixed $schedule  The unserialized ActionScheduler_Schedule object.
	 * @param int   $action_id The action ID.
	 *
	 * @throws ActionScheduler_InvalidActionException When the schedule is invalid.
	 */
	protected function validate_schedule( $schedule, $action_id ) {
		if ( empty( $schedule ) || ! is_a( $schedule, 'ActionScheduler_Schedule' ) ) {
			throw ActionScheduler_InvalidActionException::from_schedule( $action_id, $schedule );
		}
	}

	/**
	 * InnoDB indexes have a maximum size of 767 bytes by default, which is only 191 characters with utf8mb4.
	 *
	 * Previously, AS wasn't concerned about args length, as we used the (unindex) post_content column. However,
	 * with custom tables, we use an indexed VARCHAR column instead.
	 *
	 * @param  ActionScheduler_Action $action Action to be validated.
	 * @throws InvalidArgumentException When json encoded args is too long.
	 */
	protected function validate_action( ActionScheduler_Action $action ) {
		if ( strlen( json_encode( $action->get_args() ) ) > static::$max_args_length ) {
			throw new InvalidArgumentException( sprintf( __( 'ActionScheduler_Action::$args too long. To ensure the args column can be indexed, action args should not be more than %d characters when encoded as JSON.', 'action-scheduler' ), static::$max_args_length ) );
		}
	}

	/**
	 * Cancel pending actions by hook.
	 *
	 * @since 3.0.0
	 *
	 * @param string $hook Hook name.
	 *
	 * @return void
	 */
	public function cancel_actions_by_hook( $hook ) {
		$action_ids = true;
		while ( ! empty( $action_ids ) ) {
			$action_ids = $this->query_actions(
				array(
					'hook'     => $hook,
					'status'   => self::STATUS_PENDING,
					'per_page' => 1000,
					'orderby'  => 'action_id',
				)
			);

			$this->bulk_cancel_actions( $action_ids );
		}
	}

	/**
	 * Cancel pending actions by group.
	 *
	 * @since 3.0.0
	 *
	 * @param string $group Group slug.
	 *
	 * @return void
	 */
	public function cancel_actions_by_group( $group ) {
		$action_ids = true;
		while ( ! empty( $action_ids ) ) {
			$action_ids = $this->query_actions(
				array(
					'group'    => $group,
					'status'   => self::STATUS_PENDING,
					'per_page' => 1000,
					'orderby'  => 'action_id',
				)
			);

			$this->bulk_cancel_actions( $action_ids );
		}
	}

	/**
	 * Cancel a set of action IDs.
	 *
	 * @since 3.0.0
	 *
	 * @param array $action_ids List of action IDs.
	 *
	 * @return void
	 */
	private function bulk_cancel_actions( $action_ids ) {
		foreach ( $action_ids as $action_id ) {
			$this->cancel_action( $action_id );
		}

		do_action( 'action_scheduler_bulk_cancel_actions', $action_ids );
	}

	/**
	 * @return array
	 */
	public function get_status_labels() {
		return array(
			self::STATUS_COMPLETE => __( 'Complete', 'action-scheduler' ),
			self::STATUS_PENDING  => __( 'Pending', 'action-scheduler' ),
			self::STATUS_RUNNING  => __( 'In-progress', 'action-scheduler' ),
			self::STATUS_FAILED   => __( 'Failed', 'action-scheduler' ),
			self::STATUS_CANCELED => __( 'Canceled', 'action-scheduler' ),
		);
	}

	/**
	 * Check if there are any pending scheduled actions due to run.
	 *
	 * @param ActionScheduler_Action $action
	 * @param DateTime $scheduled_date (optional)
	 * @return string
	 */
	public function has_pending_actions_due() {
		$pending_actions = $this->query_actions( array(
			'date'    => as_get_datetime_object(),
			'status'  => ActionScheduler_Store::STATUS_PENDING,
			'orderby' => 'none',
		) );

		return ! empty( $pending_actions );
	}

	/**
	 * Callable initialization function optionally overridden in derived classes.
	 */
	public function init() {}

	/**
	 * Callable function to mark an action as migrated optionally overridden in derived classes.
	 */
	public function mark_migrated( $action_id ) {}

	/**
	 * @return ActionScheduler_Store
	 */
	public static function instance() {
		if ( empty( self::$store ) ) {
			$class = apply_filters( 'action_scheduler_store_class', self::DEFAULT_CLASS );
			self::$store = new $class();
		}
		return self::$store;
	}
}
ActionScheduler_TimezoneHelper.php                                                                                                                                                                                                                             4414          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/abstracts                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

/**
 * Class ActionScheduler_TimezoneHelper
 */
abstract class ActionScheduler_TimezoneHelper {
	private static $local_timezone = NULL;

	/**
	 * Set a DateTime's timezone to the WordPress site's timezone, or a UTC offset
	 * if no timezone string is available.
	 *
	 * @since  2.1.0
	 *
	 * @param DateTime $date
	 * @return ActionScheduler_DateTime
	 */
	public static function set_local_timezone( DateTime $date ) {

		// Accept a DateTime for easier backward compatibility, even though we require methods on ActionScheduler_DateTime
		if ( ! is_a( $date, 'ActionScheduler_DateTime' ) ) {
			$date = as_get_datetime_object( $date->format( 'U' ) );
		}

		if ( get_option( 'timezone_string' ) ) {
			$date->setTimezone( new DateTimeZone( self::get_local_timezone_string() ) );
		} else {
			$date->setUtcOffset( self::get_local_timezone_offset() );
		}

		return $date;
	}

	/**
	 * Helper to retrieve the timezone string for a site until a WP core method exists
	 * (see https://core.trac.wordpress.org/ticket/24730).
	 *
	 * Adapted from wc_timezone_string() and https://secure.php.net/manual/en/function.timezone-name-from-abbr.php#89155.
	 *
	 * If no timezone string is set, and its not possible to match the UTC offset set for the site to a timezone
	 * string, then an empty string will be returned, and the UTC offset should be used to set a DateTime's
	 * timezone.
	 *
	 * @since 2.1.0
	 * @return string PHP timezone string for the site or empty if no timezone string is available.
	 */
	protected static function get_local_timezone_string( $reset = false ) {
		// If site timezone string exists, return it.
		$timezone = get_option( 'timezone_string' );
		if ( $timezone ) {
			return $timezone;
		}

		// Get UTC offset, if it isn't set then return UTC.
		$utc_offset = intval( get_option( 'gmt_offset', 0 ) );
		if ( 0 === $utc_offset ) {
			return 'UTC';
		}

		// Adjust UTC offset from hours to seconds.
		$utc_offset *= 3600;

		// Attempt to guess the timezone string from the UTC offset.
		$timezone = timezone_name_from_abbr( '', $utc_offset );
		if ( $timezone ) {
			return $timezone;
		}

		// Last try, guess timezone string manually.
		foreach ( timezone_abbreviations_list() as $abbr ) {
			foreach ( $abbr as $city ) {
				if ( (bool) date( 'I' ) === (bool) $city['dst'] && $city['timezone_id'] && intval( $city['offset'] ) === $utc_offset ) {
					return $city['timezone_id'];
				}
			}
		}

		// No timezone string
		return '';
	}

	/**
	 * Get timezone offset in seconds.
	 *
	 * @since  2.1.0
	 * @return float
	 */
	protected static function get_local_timezone_offset() {
		$timezone = get_option( 'timezone_string' );

		if ( $timezone ) {
			$timezone_object = new DateTimeZone( $timezone );
			return $timezone_object->getOffset( new DateTime( 'now' ) );
		} else {
			return floatval( get_option( 'gmt_offset', 0 ) ) * HOUR_IN_SECONDS;
		}
	}

	/**
	 * @deprecated 2.1.0
	 */
	public static function get_local_timezone( $reset = FALSE ) {
		_deprecated_function( __FUNCTION__, '2.1.0', 'ActionScheduler_TimezoneHelper::set_local_timezone()' );
		if ( $reset ) {
			self::$local_timezone = NULL;
		}
		if ( !isset(self::$local_timezone) ) {
			$tzstring = get_option('timezone_string');

			if ( empty($tzstring) ) {
				$gmt_offset = get_option('gmt_offset');
				if ( $gmt_offset == 0 ) {
					$tzstring = 'UTC';
				} else {
					$gmt_offset *= HOUR_IN_SECONDS;
					$tzstring   = timezone_name_from_abbr( '', $gmt_offset, 1 );

					// If there's no timezone string, try again with no DST.
					if ( false === $tzstring ) {
						$tzstring = timezone_name_from_abbr( '', $gmt_offset, 0 );
					}

					// Try mapping to the first abbreviation we can find.
					if ( false === $tzstring ) {
						$is_dst = date( 'I' );
						foreach ( timezone_abbreviations_list() as $abbr ) {
							foreach ( $abbr as $city ) {
								if ( $city['dst'] == $is_dst && $city['offset'] == $gmt_offset ) {
									// If there's no valid timezone ID, keep looking.
									if ( null === $city['timezone_id'] ) {
										continue;
									}

									$tzstring = $city['timezone_id'];
									break 2;
								}
							}
						}
					}

					// If we still have no valid string, then fall back to UTC.
					if ( false === $tzstring ) {
						$tzstring = 'UTC';
					}
				}
			}

			self::$local_timezone = new DateTimeZone($tzstring);
		}
		return self::$local_timezone;
	}
}
ActionScheduler_Action.php                                                                                                                                                                                                                                     2067          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/actions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php

/**
 * Class ActionScheduler_Action
 */
class ActionScheduler_Action {
	protected $hook = '';
	protected $args = array();
	/** @var ActionScheduler_Schedule */
	protected $schedule = NULL;
	protected $group = '';

	public function __construct( $hook, array $args = array(), ActionScheduler_Schedule $schedule = NULL, $group = '' ) {
		$schedule = empty( $schedule ) ? new ActionScheduler_NullSchedule() : $schedule;
		$this->set_hook($hook);
		$this->set_schedule($schedule);
		$this->set_args($args);
		$this->set_group($group);
	}

	/**
	 * Executes the action.
	 *
	 * If no callbacks are registered, an exception will be thrown and the action will not be
	 * fired. This is useful to help detect cases where the code responsible for setting up
	 * a scheduled action no longer exists.
	 *
	 * @throws Exception If no callbacks are registered for this action.
	 */
	public function execute() {
		$hook = $this->get_hook();

		if ( ! has_action( $hook ) ) {
			throw new Exception(
				sprintf(
					/* translators: 1: action hook. */
					__( 'Scheduled action for %1$s will not be executed as no callbacks are registered.', 'action-scheduler' ),
					$hook
				)
			);
		}

		do_action_ref_array( $hook, array_values( $this->get_args() ) );
	}

	/**
	 * @param string $hook
	 */
	protected function set_hook( $hook ) {
		$this->hook = $hook;
	}

	public function get_hook() {
		return $this->hook;
	}

	protected function set_schedule( ActionScheduler_Schedule $schedule ) {
		$this->schedule = $schedule;
	}

	/**
	 * @return ActionScheduler_Schedule
	 */
	public function get_schedule() {
		return $this->schedule;
	}

	protected function set_args( array $args ) {
		$this->args = $args;
	}

	public function get_args() {
		return $this->args;
	}

	/**
	 * @param string $group
	 */
	protected function set_group( $group ) {
		$this->group = $group;
	}

	/**
	 * @return string
	 */
	public function get_group() {
		return $this->group;
	}

	/**
	 * @return bool If the action has been finished
	 */
	public function is_finished() {
		return FALSE;
	}
}
ActionScheduler_CanceledAction.php                                                                                                                                                                                                                             718           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/actions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php

/**
 * Class ActionScheduler_CanceledAction
 *
 * Stored action which was canceled and therefore acts like a finished action but should always return a null schedule,
 * regardless of schedule passed to its constructor.
 */
class ActionScheduler_CanceledAction extends ActionScheduler_FinishedAction {

	/**
	 * @param string $hook
	 * @param array $args
	 * @param ActionScheduler_Schedule $schedule
	 * @param string $group
	 */
	public function __construct( $hook, array $args = array(), ActionScheduler_Schedule $schedule = null, $group = '' ) {
		parent::__construct( $hook, $args, $schedule, $group );
		if ( is_null( $schedule ) ) {
			$this->set_schedule( new ActionScheduler_NullSchedule() );
		}
	}
}
ActionScheduler_FinishedAction.php                                                                                                                                                                                                                             232           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/actions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php

/**
 * Class ActionScheduler_FinishedAction
 */
class ActionScheduler_FinishedAction extends ActionScheduler_Action {

	public function execute() {
		// don't execute
	}

	public function is_finished() {
		return TRUE;
	}
}
 ActionScheduler_NullAction.php                                                                                                                                                                                                                                 348           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/actions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php

/**
 * Class ActionScheduler_NullAction
 */
class ActionScheduler_NullAction extends ActionScheduler_Action {

	public function __construct( $hook = '', array $args = array(), ActionScheduler_Schedule $schedule = NULL ) {
		$this->set_schedule( new ActionScheduler_NullSchedule() );
	}

	public function execute() {
		// don't execute
	}
}
 ActionScheduler_ActionClaim.php                                                                                                                                                                                                                                374           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_ActionClaim
 */
class ActionScheduler_ActionClaim {
	private $id = '';
	private $action_ids = array();

	public function __construct( $id, array $action_ids ) {
		$this->id = $id;
		$this->action_ids = $action_ids;
	}

	public function get_id() {
		return $this->id;
	}

	public function get_actions() {
		return $this->action_ids;
	}
}
 ActionScheduler_ActionFactory.php                                                                                                                                                                                                                              11497         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_ActionFactory
 */
class ActionScheduler_ActionFactory {

	/**
	 * Return stored actions for given params.
	 *
	 * @param string                   $status The action's status in the data store.
	 * @param string                   $hook The hook to trigger when this action runs.
	 * @param array                    $args Args to pass to callbacks when the hook is triggered.
	 * @param ActionScheduler_Schedule $schedule The action's schedule.
	 * @param string                   $group A group to put the action in.
	 *
	 * @return ActionScheduler_Action An instance of the stored action.
	 */
	public function get_stored_action( $status, $hook, array $args = array(), ActionScheduler_Schedule $schedule = null, $group = '' ) {

		switch ( $status ) {
			case ActionScheduler_Store::STATUS_PENDING:
				$action_class = 'ActionScheduler_Action';
				break;
			case ActionScheduler_Store::STATUS_CANCELED:
				$action_class = 'ActionScheduler_CanceledAction';
				if ( ! is_null( $schedule ) && ! is_a( $schedule, 'ActionScheduler_CanceledSchedule' ) && ! is_a( $schedule, 'ActionScheduler_NullSchedule' ) ) {
					$schedule = new ActionScheduler_CanceledSchedule( $schedule->get_date() );
				}
				break;
			default:
				$action_class = 'ActionScheduler_FinishedAction';
				break;
		}

		$action_class = apply_filters( 'action_scheduler_stored_action_class', $action_class, $status, $hook, $args, $schedule, $group );

		$action = new $action_class( $hook, $args, $schedule, $group );

		/**
		 * Allow 3rd party code to change the instantiated action for a given hook, args, schedule and group.
		 *
		 * @param ActionScheduler_Action $action The instantiated action.
		 * @param string $hook The instantiated action's hook.
		 * @param array $args The instantiated action's args.
		 * @param ActionScheduler_Schedule $schedule The instantiated action's schedule.
		 * @param string $group The instantiated action's group.
		 */
		return apply_filters( 'action_scheduler_stored_action_instance', $action, $hook, $args, $schedule, $group );
	}

	/**
	 * Enqueue an action to run one time, as soon as possible (rather a specific scheduled time).
	 *
	 * This method creates a new action using the NullSchedule. In practice, this results in an action scheduled to
	 * execute "now". Therefore, it will generally run as soon as possible but is not prioritized ahead of other actions
	 * that are already past-due.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param string $group A group to put the action in.
	 *
	 * @return int The ID of the stored action.
	 */
	public function async( $hook, $args = array(), $group = '' ) {
		return $this->async_unique( $hook, $args, $group, false );
	}

	/**
	 * Same as async, but also supports $unique param.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param string $group A group to put the action in.
	 * @param bool   $unique Whether to ensure the action is unique.
	 *
	 * @return int The ID of the stored action.
	 */
	public function async_unique( $hook, $args = array(), $group = '', $unique = true ) {
		$schedule = new ActionScheduler_NullSchedule();
		$action   = new ActionScheduler_Action( $hook, $args, $schedule, $group );
		return $unique ? $this->store_unique_action( $action, $unique ) : $this->store( $action );
	}

	/**
	 * Create single action.
	 *
	 * @param string $hook  The hook to trigger when this action runs.
	 * @param array  $args  Args to pass when the hook is triggered.
	 * @param int    $when  Unix timestamp when the action will run.
	 * @param string $group A group to put the action in.
	 *
	 * @return int The ID of the stored action.
	 */
	public function single( $hook, $args = array(), $when = null, $group = '' ) {
		return $this->single_unique( $hook, $args, $when, $group, false );
	}

	/**
	 * Create single action only if there is no pending or running action with same name and params.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param int    $when Unix timestamp when the action will run.
	 * @param string $group A group to put the action in.
	 * @param bool   $unique Whether action scheduled should be unique.
	 *
	 * @return int The ID of the stored action.
	 */
	public function single_unique( $hook, $args = array(), $when = null, $group = '', $unique = true ) {
		$date     = as_get_datetime_object( $when );
		$schedule = new ActionScheduler_SimpleSchedule( $date );
		$action   = new ActionScheduler_Action( $hook, $args, $schedule, $group );
		return $unique ? $this->store_unique_action( $action ) : $this->store( $action );
	}

	/**
	 * Create the first instance of an action recurring on a given interval.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param int    $first Unix timestamp for the first run.
	 * @param int    $interval Seconds between runs.
	 * @param string $group A group to put the action in.
	 *
	 * @return int The ID of the stored action.
	 */
	public function recurring( $hook, $args = array(), $first = null, $interval = null, $group = '' ) {
		return $this->recurring_unique( $hook, $args, $first, $interval, $group, false );
	}

	/**
	 * Create the first instance of an action recurring on a given interval only if there is no pending or running action with same name and params.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param int    $first Unix timestamp for the first run.
	 * @param int    $interval Seconds between runs.
	 * @param string $group A group to put the action in.
	 * @param bool   $unique Whether action scheduled should be unique.
	 *
	 * @return int The ID of the stored action.
	 */
	public function recurring_unique( $hook, $args = array(), $first = null, $interval = null, $group = '', $unique = true ) {
		if ( empty( $interval ) ) {
			return $this->single_unique( $hook, $args, $first, $group, $unique );
		}
		$date     = as_get_datetime_object( $first );
		$schedule = new ActionScheduler_IntervalSchedule( $date, $interval );
		$action   = new ActionScheduler_Action( $hook, $args, $schedule, $group );
		return $unique ? $this->store_unique_action( $action ) : $this->store( $action );
	}

	/**
	 * Create the first instance of an action recurring on a Cron schedule.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param int    $base_timestamp The first instance of the action will be scheduled
	 *        to run at a time calculated after this timestamp matching the cron
	 *        expression. This can be used to delay the first instance of the action.
	 * @param int    $schedule A cron definition string.
	 * @param string $group A group to put the action in.
	 *
	 * @return int The ID of the stored action.
	 */
	public function cron( $hook, $args = array(), $base_timestamp = null, $schedule = null, $group = '' ) {
		return $this->cron_unique( $hook, $args, $base_timestamp, $schedule, $group, false );
	}


	/**
	 * Create the first instance of an action recurring on a Cron schedule only if there is no pending or running action with same name and params.
	 *
	 * @param string $hook The hook to trigger when this action runs.
	 * @param array  $args Args to pass when the hook is triggered.
	 * @param int    $base_timestamp The first instance of the action will be scheduled
	 *        to run at a time calculated after this timestamp matching the cron
	 *        expression. This can be used to delay the first instance of the action.
	 * @param int    $schedule A cron definition string.
	 * @param string $group A group to put the action in.
	 * @param bool   $unique Whether action scheduled should be unique.
	 *
	 * @return int The ID of the stored action.
	 **/
	public function cron_unique( $hook, $args = array(), $base_timestamp = null, $schedule = null, $group = '', $unique = true ) {
		if ( empty( $schedule ) ) {
			return $this->single_unique( $hook, $args, $base_timestamp, $group, $unique );
		}
		$date     = as_get_datetime_object( $base_timestamp );
		$cron     = CronExpression::factory( $schedule );
		$schedule = new ActionScheduler_CronSchedule( $date, $cron );
		$action   = new ActionScheduler_Action( $hook, $args, $schedule, $group );
		return $unique ? $this->store_unique_action( $action ) : $this->store( $action );
	}

	/**
	 * Create a successive instance of a recurring or cron action.
	 *
	 * Importantly, the action will be rescheduled to run based on the current date/time.
	 * That means when the action is scheduled to run in the past, the next scheduled date
	 * will be pushed forward. For example, if a recurring action set to run every hour
	 * was scheduled to run 5 seconds ago, it will be next scheduled for 1 hour in the
	 * future, which is 1 hour and 5 seconds from when it was last scheduled to run.
	 *
	 * Alternatively, if the action is scheduled to run in the future, and is run early,
	 * likely via manual intervention, then its schedule will change based on the time now.
	 * For example, if a recurring action set to run every day, and is run 12 hours early,
	 * it will run again in 24 hours, not 36 hours.
	 *
	 * This slippage is less of an issue with Cron actions, as the specific run time can
	 * be set for them to run, e.g. 1am each day. In those cases, and entire period would
	 * need to be missed before there was any change is scheduled, e.g. in the case of an
	 * action scheduled for 1am each day, the action would need to run an entire day late.
	 *
	 * @param ActionScheduler_Action $action The existing action.
	 *
	 * @return string The ID of the stored action
	 * @throws InvalidArgumentException If $action is not a recurring action.
	 */
	public function repeat( $action ) {
		$schedule = $action->get_schedule();
		$next     = $schedule->get_next( as_get_datetime_object() );

		if ( is_null( $next ) || ! $schedule->is_recurring() ) {
			throw new InvalidArgumentException( __( 'Invalid action - must be a recurring action.', 'action-scheduler' ) );
		}

		$schedule_class = get_class( $schedule );
		$new_schedule   = new $schedule( $next, $schedule->get_recurrence(), $schedule->get_first_date() );
		$new_action     = new ActionScheduler_Action( $action->get_hook(), $action->get_args(), $new_schedule, $action->get_group() );
		return $this->store( $new_action );
	}

	/**
	 * Save action to database.
	 *
	 * @param ActionScheduler_Action $action Action object to save.
	 *
	 * @return int The ID of the stored action
	 */
	protected function store( ActionScheduler_Action $action ) {
		$store = ActionScheduler_Store::instance();
		return $store->save_action( $action );
	}

	/**
	 * Store action if it's unique.
	 *
	 * @param ActionScheduler_Action $action Action object to store.
	 *
	 * @return int ID of the created action. Will be 0 if action was not created.
	 */
	protected function store_unique_action( ActionScheduler_Action $action ) {
		$store = ActionScheduler_Store::instance();
		return method_exists( $store, 'save_unique_action' ) ?
			$store->save_unique_action( $action ) : $store->save_action( $action );
	}
}
ActionScheduler_AdminView.php                                                                                                                                                                                                                                  9102          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_AdminView
 * @codeCoverageIgnore
 */
class ActionScheduler_AdminView extends ActionScheduler_AdminView_Deprecated {

	private static $admin_view = NULL;

	private static $screen_id = 'tools_page_action-scheduler';

	/** @var ActionScheduler_ListTable */
	protected $list_table;

	/**
	 * @return ActionScheduler_AdminView
	 * @codeCoverageIgnore
	 */
	public static function instance() {

		if ( empty( self::$admin_view ) ) {
			$class = apply_filters('action_scheduler_admin_view_class', 'ActionScheduler_AdminView');
			self::$admin_view = new $class();
		}

		return self::$admin_view;
	}

	/**
	 * @codeCoverageIgnore
	 */
	public function init() {
		if ( is_admin() && ( ! defined( 'DOING_AJAX' ) || false == DOING_AJAX ) ) {

			if ( class_exists( 'WooCommerce' ) ) {
				add_action( 'woocommerce_admin_status_content_action-scheduler', array( $this, 'render_admin_ui' ) );
				add_action( 'woocommerce_system_status_report', array( $this, 'system_status_report' ) );
				add_filter( 'woocommerce_admin_status_tabs', array( $this, 'register_system_status_tab' ) );
			}

			add_action( 'admin_menu', array( $this, 'register_menu' ) );
			add_action( 'admin_notices', array( $this, 'maybe_check_pastdue_actions' ) );
			add_action( 'current_screen', array( $this, 'add_help_tabs' ) );
		}
	}

	public function system_status_report() {
		$table = new ActionScheduler_wcSystemStatus( ActionScheduler::store() );
		$table->render();
	}

	/**
	 * Registers action-scheduler into WooCommerce > System status.
	 *
	 * @param array $tabs An associative array of tab key => label.
	 * @return array $tabs An associative array of tab key => label, including Action Scheduler's tabs
	 */
	public function register_system_status_tab( array $tabs ) {
		$tabs['action-scheduler'] = __( 'Scheduled Actions', 'action-scheduler' );

		return $tabs;
	}

	/**
	 * Include Action Scheduler's administration under the Tools menu.
	 *
	 * A menu under the Tools menu is important for backward compatibility (as that's
	 * where it started), and also provides more convenient access than the WooCommerce
	 * System Status page, and for sites where WooCommerce isn't active.
	 */
	public function register_menu() {
		$hook_suffix = add_submenu_page(
			'tools.php',
			__( 'Scheduled Actions', 'action-scheduler' ),
			__( 'Scheduled Actions', 'action-scheduler' ),
			'manage_options',
			'action-scheduler',
			array( $this, 'render_admin_ui' )
		);
		add_action( 'load-' . $hook_suffix , array( $this, 'process_admin_ui' ) );
	}

	/**
	 * Triggers processing of any pending actions.
	 */
	public function process_admin_ui() {
		$this->get_list_table();
	}

	/**
	 * Renders the Admin UI
	 */
	public function render_admin_ui() {
		$table = $this->get_list_table();
		$table->display_page();
	}

	/**
	 * Get the admin UI object and process any requested actions.
	 *
	 * @return ActionScheduler_ListTable
	 */
	protected function get_list_table() {
		if ( null === $this->list_table ) {
			$this->list_table = new ActionScheduler_ListTable( ActionScheduler::store(), ActionScheduler::logger(), ActionScheduler::runner() );
			$this->list_table->process_actions();
		}

		return $this->list_table;
	}

	/**
	 * Action: admin_notices
	 *
	 * Maybe check past-due actions, and print notice.
	 *
	 * @uses $this->check_pastdue_actions()
	 */
	public function maybe_check_pastdue_actions() {

		# Filter to prevent checking actions (ex: inappropriate user).
		if ( ! apply_filters( 'action_scheduler_check_pastdue_actions', current_user_can( 'manage_options' ) ) ) {
			return;
		}

		# Get last check transient.
		$last_check = get_transient( 'action_scheduler_last_pastdue_actions_check' );

		# If transient exists, we're within interval, so bail.
		if ( ! empty( $last_check ) ) {
			return;
		}

		# Perform the check.
		$this->check_pastdue_actions();
	}

	/**
	 * Check past-due actions, and print notice.
	 *
	 * @todo update $link_url to "Past-due" filter when released (see issue #510, PR #511)
	 */
	protected function check_pastdue_actions() {

		# Set thresholds.
		$threshold_seconds = ( int ) apply_filters( 'action_scheduler_pastdue_actions_seconds', DAY_IN_SECONDS );
		$threshhold_min    = ( int ) apply_filters( 'action_scheduler_pastdue_actions_min', 1 );

		// Set fallback value for past-due actions count.
		$num_pastdue_actions = 0;

		// Allow third-parties to preempt the default check logic.
		$check = apply_filters( 'action_scheduler_pastdue_actions_check_pre', null );

		// If no third-party preempted and there are no past-due actions, return early.
		if ( ! is_null( $check ) ) {
			return;
		}

		# Scheduled actions query arguments.
		$query_args = array(
			'date'     => as_get_datetime_object( time() - $threshold_seconds ),
			'status'   => ActionScheduler_Store::STATUS_PENDING,
			'per_page' => $threshhold_min,
		);

		# If no third-party preempted, run default check.
		if ( is_null( $check ) ) {
			$store = ActionScheduler_Store::instance();
			$num_pastdue_actions = ( int ) $store->query_actions( $query_args, 'count' );

			# Check if past-due actions count is greater than or equal to threshold.
			$check = ( $num_pastdue_actions >= $threshhold_min );
			$check = ( bool ) apply_filters( 'action_scheduler_pastdue_actions_check', $check, $num_pastdue_actions, $threshold_seconds, $threshhold_min );
		}

		# If check failed, set transient and abort.
		if ( ! boolval( $check ) ) {
			$interval = apply_filters( 'action_scheduler_pastdue_actions_check_interval', round( $threshold_seconds / 4 ), $threshold_seconds );
			set_transient( 'action_scheduler_last_pastdue_actions_check', time(), $interval );

			return;
		}

		$actions_url = add_query_arg( array(
			'page'   => 'action-scheduler',
			'status' => 'past-due',
			'order'  => 'asc',
		), admin_url( 'tools.php' ) );

		# Print notice.
		echo '<div class="notice notice-warning"><p>';
		printf(
			_n(
				// translators: 1) is the number of affected actions, 2) is a link to an admin screen.
				'<strong>Action Scheduler:</strong> %1$d <a href="%2$s">past-due action</a> found; something may be wrong. <a href="https://actionscheduler.org/faq/#my-site-has-past-due-actions-what-can-i-do" target="_blank">Read documentation &raquo;</a>',
				'<strong>Action Scheduler:</strong> %1$d <a href="%2$s">past-due actions</a> found; something may be wrong. <a href="https://actionscheduler.org/faq/#my-site-has-past-due-actions-what-can-i-do" target="_blank">Read documentation &raquo;</a>',
				$num_pastdue_actions,
				'action-scheduler'
			),
			$num_pastdue_actions,
			esc_attr( esc_url( $actions_url ) )
		);
		echo '</p></div>';

		# Facilitate third-parties to evaluate and print notices.
		do_action( 'action_scheduler_pastdue_actions_extra_notices', $query_args );
	}

	/**
	 * Provide more information about the screen and its data in the help tab.
	 */
	public function add_help_tabs() {
		$screen = get_current_screen();

		if ( ! $screen || self::$screen_id != $screen->id ) {
			return;
		}

		$as_version = ActionScheduler_Versions::instance()->latest_version();
		$screen->add_help_tab(
			array(
				'id'      => 'action_scheduler_about',
				'title'   => __( 'About', 'action-scheduler' ),
				'content' =>
					'<h2>' . sprintf( __( 'About Action Scheduler %s', 'action-scheduler' ), $as_version ) . '</h2>' .
					'<p>' .
						__( 'Action Scheduler is a scalable, traceable job queue for background processing large sets of actions. Action Scheduler works by triggering an action hook to run at some time in the future. Scheduled actions can also be scheduled to run on a recurring schedule.', 'action-scheduler' ) .
					'</p>',
			)
		);

		$screen->add_help_tab(
			array(
				'id'      => 'action_scheduler_columns',
				'title'   => __( 'Columns', 'action-scheduler' ),
				'content' =>
					'<h2>' . __( 'Scheduled Action Columns', 'action-scheduler' ) . '</h2>' .
					'<ul>' .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Hook', 'action-scheduler' ), __( 'Name of the action hook that will be triggered.', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Status', 'action-scheduler' ), __( 'Action statuses are Pending, Complete, Canceled, Failed', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Arguments', 'action-scheduler' ), __( 'Optional data array passed to the action hook.', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Group', 'action-scheduler' ), __( 'Optional action group.', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Recurrence', 'action-scheduler' ), __( 'The action\'s schedule frequency.', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Scheduled', 'action-scheduler' ), __( 'The date/time the action is/was scheduled to run.', 'action-scheduler' ) ) .
					sprintf( '<li><strong>%1$s</strong>: %2$s</li>', __( 'Log', 'action-scheduler' ), __( 'Activity log for the action.', 'action-scheduler' ) ) .
					'</ul>',
			)
		);
	}
}
ActionScheduler_AsyncRequest_QueueRunner.php                                                                                                                                                                                                                   2221          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php
/**
 * ActionScheduler_AsyncRequest_QueueRunner
 */

defined( 'ABSPATH' ) || exit;

/**
 * ActionScheduler_AsyncRequest_QueueRunner class.
 */
class ActionScheduler_AsyncRequest_QueueRunner extends WP_Async_Request {

	/**
	 * Data store for querying actions
	 *
	 * @var ActionScheduler_Store
	 * @access protected
	 */
	protected $store;

	/**
	 * Prefix for ajax hooks
	 *
	 * @var string
	 * @access protected
	 */
	protected $prefix = 'as';

	/**
	 * Action for ajax hooks
	 *
	 * @var string
	 * @access protected
	 */
	protected $action = 'async_request_queue_runner';

	/**
	 * Initiate new async request
	 */
	public function __construct( ActionScheduler_Store $store ) {
		parent::__construct();
		$this->store = $store;
	}

	/**
	 * Handle async requests
	 *
	 * Run a queue, and maybe dispatch another async request to run another queue
	 * if there are still pending actions after completing a queue in this request.
	 */
	protected function handle() {
		do_action( 'action_scheduler_run_queue', 'Async Request' ); // run a queue in the same way as WP Cron, but declare the Async Request context

		$sleep_seconds = $this->get_sleep_seconds();

		if ( $sleep_seconds ) {
			sleep( $sleep_seconds );
		}

		$this->maybe_dispatch();
	}

	/**
	 * If the async request runner is needed and allowed to run, dispatch a request.
	 */
	public function maybe_dispatch() {
		if ( ! $this->allow() ) {
			return;
		}

		$this->dispatch();
		ActionScheduler_QueueRunner::instance()->unhook_dispatch_async_request();
	}

	/**
	 * Only allow async requests when needed.
	 *
	 * Also allow 3rd party code to disable running actions via async requests.
	 */
	protected function allow() {

		if ( ! has_action( 'action_scheduler_run_queue' ) || ActionScheduler::runner()->has_maximum_concurrent_batches() || ! $this->store->has_pending_actions_due() ) {
			$allow = false;
		} else {
			$allow = true;
		}

		return apply_filters( 'action_scheduler_allow_async_request_runner', $allow );
	}

	/**
	 * Chaining async requests can crash MySQL. A brief sleep call in PHP prevents that.
	 */
	protected function get_sleep_seconds() {
		return apply_filters( 'action_scheduler_async_request_sleep_seconds', 5, $this );
	}
}
ActionScheduler_Compatibility.php                                                                                                                                                                                                                              3637          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_Compatibility
 */
class ActionScheduler_Compatibility {

	/**
	 * Converts a shorthand byte value to an integer byte value.
	 *
	 * Wrapper for wp_convert_hr_to_bytes(), moved to load.php in WordPress 4.6 from media.php
	 *
	 * @link https://secure.php.net/manual/en/function.ini-get.php
	 * @link https://secure.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
	 *
	 * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
	 * @return int An integer byte value.
	 */
	public static function convert_hr_to_bytes( $value ) {
		if ( function_exists( 'wp_convert_hr_to_bytes' ) ) {
			return wp_convert_hr_to_bytes( $value );
		}

		$value = strtolower( trim( $value ) );
		$bytes = (int) $value;

		if ( false !== strpos( $value, 'g' ) ) {
			$bytes *= GB_IN_BYTES;
		} elseif ( false !== strpos( $value, 'm' ) ) {
			$bytes *= MB_IN_BYTES;
		} elseif ( false !== strpos( $value, 'k' ) ) {
			$bytes *= KB_IN_BYTES;
		}

		// Deal with large (float) values which run into the maximum integer size.
		return min( $bytes, PHP_INT_MAX );
	}

	/**
	 * Attempts to raise the PHP memory limit for memory intensive processes.
	 *
	 * Only allows raising the existing limit and prevents lowering it.
	 *
	 * Wrapper for wp_raise_memory_limit(), added in WordPress v4.6.0
	 *
	 * @return bool|int|string The limit that was set or false on failure.
	 */
	public static function raise_memory_limit() {
		if ( function_exists( 'wp_raise_memory_limit' ) ) {
			return wp_raise_memory_limit( 'admin' );
		}

		$current_limit     = @ini_get( 'memory_limit' );
		$current_limit_int = self::convert_hr_to_bytes( $current_limit );

		if ( -1 === $current_limit_int ) {
			return false;
		}

		$wp_max_limit       = WP_MAX_MEMORY_LIMIT;
		$wp_max_limit_int   = self::convert_hr_to_bytes( $wp_max_limit );
		$filtered_limit     = apply_filters( 'admin_memory_limit', $wp_max_limit );
		$filtered_limit_int = self::convert_hr_to_bytes( $filtered_limit );

		if ( -1 === $filtered_limit_int || ( $filtered_limit_int > $wp_max_limit_int && $filtered_limit_int > $current_limit_int ) ) {
			if ( false !== @ini_set( 'memory_limit', $filtered_limit ) ) {
				return $filtered_limit;
			} else {
				return false;
			}
		} elseif ( -1 === $wp_max_limit_int || $wp_max_limit_int > $current_limit_int ) {
			if ( false !== @ini_set( 'memory_limit', $wp_max_limit ) ) {
				return $wp_max_limit;
			} else {
				return false;
			}
		}
		return false;
	}

	/**
	 * Attempts to raise the PHP timeout for time intensive processes.
	 *
	 * Only allows raising the existing limit and prevents lowering it. Wrapper for wc_set_time_limit(), when available.
	 *
	 * @param int $limit The time limit in seconds.
	 */
	public static function raise_time_limit( $limit = 0 ) {
		$limit = (int) $limit;
		$max_execution_time = (int) ini_get( 'max_execution_time' );

		/*
		 * If the max execution time is already unlimited (zero), or if it exceeds or is equal to the proposed
		 * limit, there is no reason for us to make further changes (we never want to lower it).
		 */
		if (
			0 === $max_execution_time
			|| ( $max_execution_time >= $limit && $limit !== 0 )
		) {
			return;
		}

		if ( function_exists( 'wc_set_time_limit' ) ) {
			wc_set_time_limit( $limit );
		} elseif ( function_exists( 'set_time_limit' ) && false === strpos( ini_get( 'disable_functions' ), 'set_time_limit' ) && ! ini_get( 'safe_mode' ) ) { // phpcs:ignore PHPCompatibility.IniDirectives.RemovedIniDirectives.safe_modeDeprecatedRemoved
			@set_time_limit( $limit ); // phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
		}
	}
}
ActionScheduler_DataController.php                                                                                                                                                                                                                             5285          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

use Action_Scheduler\Migration\Controller;

/**
 * Class ActionScheduler_DataController
 *
 * The main plugin/initialization class for the data stores.
 *
 * Responsible for hooking everything up with WordPress.
 *
 * @package Action_Scheduler
 *
 * @since 3.0.0
 */
class ActionScheduler_DataController {
	/** Action data store class name. */
	const DATASTORE_CLASS = 'ActionScheduler_DBStore';

	/** Logger data store class name. */
	const LOGGER_CLASS    = 'ActionScheduler_DBLogger';

	/** Migration status option name. */
	const STATUS_FLAG     = 'action_scheduler_migration_status';

	/** Migration status option value. */
	const STATUS_COMPLETE = 'complete';

	/** Migration minimum required PHP version. */
	const MIN_PHP_VERSION = '5.5';

	/** @var ActionScheduler_DataController */
	private static $instance;

	/** @var int */
	private static $sleep_time = 0;

	/** @var int */
	private static $free_ticks = 50;

	/**
	 * Get a flag indicating whether the migration environment dependencies are met.
	 *
	 * @return bool
	 */
	public static function dependencies_met() {
		$php_support = version_compare( PHP_VERSION, self::MIN_PHP_VERSION, '>=' );
		return $php_support && apply_filters( 'action_scheduler_migration_dependencies_met', true );
	}

	/**
	 * Get a flag indicating whether the migration is complete.
	 *
	 * @return bool Whether the flag has been set marking the migration as complete
	 */
	public static function is_migration_complete() {
		return get_option( self::STATUS_FLAG ) === self::STATUS_COMPLETE;
	}

	/**
	 * Mark the migration as complete.
	 */
	public static function mark_migration_complete() {
		update_option( self::STATUS_FLAG, self::STATUS_COMPLETE );
	}

	/**
	 * Unmark migration when a plugin is de-activated. Will not work in case of silent activation, for example in an update.
	 * We do this to mitigate the bug of lost actions which happens if there was an AS 2.x to AS 3.x migration in the past, but that plugin is now
	 * deactivated and the site was running on AS 2.x again.
	 */
	public static function mark_migration_incomplete() {
		delete_option( self::STATUS_FLAG );
	}

	/**
	 * Set the action store class name.
	 *
	 * @param string $class Classname of the store class.
	 *
	 * @return string
	 */
	public static function set_store_class( $class ) {
		return self::DATASTORE_CLASS;
	}

	/**
	 * Set the action logger class name.
	 *
	 * @param string $class Classname of the logger class.
	 *
	 * @return string
	 */
	public static function set_logger_class( $class ) {
		return self::LOGGER_CLASS;
	}

	/**
	 * Set the sleep time in seconds.
	 *
	 * @param integer $sleep_time The number of seconds to pause before resuming operation.
	 */
	public static function set_sleep_time( $sleep_time ) {
		self::$sleep_time = (int) $sleep_time;
	}

	/**
	 * Set the tick count required for freeing memory.
	 *
	 * @param integer $free_ticks The number of ticks to free memory on.
	 */
	public static function set_free_ticks( $free_ticks ) {
		self::$free_ticks = (int) $free_ticks;
	}

	/**
	 * Free memory if conditions are met.
	 *
	 * @param int $ticks Current tick count.
	 */
	public static function maybe_free_memory( $ticks ) {
		if ( self::$free_ticks && 0 === $ticks % self::$free_ticks ) {
			self::free_memory();
		}
	}

	/**
	 * Reduce memory footprint by clearing the database query and object caches.
	 */
	public static function free_memory() {
		if ( 0 < self::$sleep_time ) {
			/* translators: %d: amount of time */
			\WP_CLI::warning( sprintf( _n( 'Stopped the insanity for %d second', 'Stopped the insanity for %d seconds', self::$sleep_time, 'action-scheduler' ), self::$sleep_time ) );
			sleep( self::$sleep_time );
		}

		\WP_CLI::warning( __( 'Attempting to reduce used memory...', 'action-scheduler' ) );

		/**
		 * @var $wpdb            \wpdb
		 * @var $wp_object_cache \WP_Object_Cache
		 */
		global $wpdb, $wp_object_cache;

		$wpdb->queries = array();

		if ( ! is_a( $wp_object_cache, 'WP_Object_Cache' ) ) {
			return;
		}

		$wp_object_cache->group_ops      = array();
		$wp_object_cache->stats          = array();
		$wp_object_cache->memcache_debug = array();
		$wp_object_cache->cache          = array();

		if ( is_callable( array( $wp_object_cache, '__remoteset' ) ) ) {
			call_user_func( array( $wp_object_cache, '__remoteset' ) ); // important
		}
	}

	/**
	 * Connect to table datastores if migration is complete.
	 * Otherwise, proceed with the migration if the dependencies have been met.
	 */
	public static function init() {
		if ( self::is_migration_complete() ) {
			add_filter( 'action_scheduler_store_class', array( 'ActionScheduler_DataController', 'set_store_class' ), 100 );
			add_filter( 'action_scheduler_logger_class', array( 'ActionScheduler_DataController', 'set_logger_class' ), 100 );
			add_action( 'deactivate_plugin', array( 'ActionScheduler_DataController', 'mark_migration_incomplete' ) );
		} elseif ( self::dependencies_met() ) {
			Controller::init();
		}

		add_action( 'action_scheduler/progress_tick', array( 'ActionScheduler_DataController', 'maybe_free_memory' ) );
	}

	/**
	 * Singleton factory.
	 */
	public static function instance() {
		if ( ! isset( self::$instance ) ) {
			self::$instance = new static();
		}

		return self::$instance;
	}
}
ActionScheduler_DateTime.php                                                                                                                                                                                                                                   1670          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * ActionScheduler DateTime class.
 *
 * This is a custom extension to DateTime that
 */
class ActionScheduler_DateTime extends DateTime {

	/**
	 * UTC offset.
	 *
	 * Only used when a timezone is not set. When a timezone string is
	 * used, this will be set to 0.
	 *
	 * @var int
	 */
	protected $utcOffset = 0;

	/**
	 * Get the unix timestamp of the current object.
	 *
	 * Missing in PHP 5.2 so just here so it can be supported consistently.
	 *
	 * @return int
	 */
	#[\ReturnTypeWillChange]
	public function getTimestamp() {
		return method_exists( 'DateTime', 'getTimestamp' ) ? parent::getTimestamp() : $this->format( 'U' );
	}

	/**
	 * Set the UTC offset.
	 *
	 * This represents a fixed offset instead of a timezone setting.
	 *
	 * @param $offset
	 */
	public function setUtcOffset( $offset ) {
		$this->utcOffset = intval( $offset );
	}

	/**
	 * Returns the timezone offset.
	 *
	 * @return int
	 * @link http://php.net/manual/en/datetime.getoffset.php
	 */
	#[\ReturnTypeWillChange]
	public function getOffset() {
		return $this->utcOffset ? $this->utcOffset : parent::getOffset();
	}

	/**
	 * Set the TimeZone associated with the DateTime
	 *
	 * @param DateTimeZone $timezone
	 *
	 * @return static
	 * @link http://php.net/manual/en/datetime.settimezone.php
	 */
	#[\ReturnTypeWillChange]
	public function setTimezone( $timezone ) {
		$this->utcOffset = 0;
		parent::setTimezone( $timezone );

		return $this;
	}

	/**
	 * Get the timestamp with the WordPress timezone offset added or subtracted.
	 *
	 * @since  3.0.0
	 * @return int
	 */
	public function getOffsetTimestamp() {
		return $this->getTimestamp() + $this->getOffset();
	}
}
ActionScheduler_Exception.php                                                                                                                                                                                                                                  207           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * ActionScheduler Exception Interface.
 *
 * Facilitates catching Exceptions unique to Action Scheduler.
 *
 * @package ActionScheduler
 * @since 2.1.0
 */
interface ActionScheduler_Exception {}
ActionScheduler_FatalErrorMonitor.php                                                                                                                                                                                                                          2023          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_FatalErrorMonitor
 */
class ActionScheduler_FatalErrorMonitor {
	/** @var ActionScheduler_ActionClaim */
	private $claim = NULL;
	/** @var ActionScheduler_Store */
	private $store = NULL;
	private $action_id = 0;

	public function __construct( ActionScheduler_Store $store ) {
		$this->store = $store;
	}

	public function attach( ActionScheduler_ActionClaim $claim ) {
		$this->claim = $claim;
		add_action( 'shutdown', array( $this, 'handle_unexpected_shutdown' ) );
		add_action( 'action_scheduler_before_execute', array( $this, 'track_current_action' ), 0, 1 );
		add_action( 'action_scheduler_after_execute',  array( $this, 'untrack_action' ), 0, 0 );
		add_action( 'action_scheduler_execution_ignored',  array( $this, 'untrack_action' ), 0, 0 );
		add_action( 'action_scheduler_failed_execution',  array( $this, 'untrack_action' ), 0, 0 );
	}

	public function detach() {
		$this->claim = NULL;
		$this->untrack_action();
		remove_action( 'shutdown', array( $this, 'handle_unexpected_shutdown' ) );
		remove_action( 'action_scheduler_before_execute', array( $this, 'track_current_action' ), 0 );
		remove_action( 'action_scheduler_after_execute',  array( $this, 'untrack_action' ), 0 );
		remove_action( 'action_scheduler_execution_ignored',  array( $this, 'untrack_action' ), 0 );
		remove_action( 'action_scheduler_failed_execution',  array( $this, 'untrack_action' ), 0 );
	}

	public function track_current_action( $action_id ) {
		$this->action_id = $action_id;
	}

	public function untrack_action() {
		$this->action_id = 0;
	}

	public function handle_unexpected_shutdown() {
		if ( $error = error_get_last() ) {
			if ( in_array( $error['type'], array( E_ERROR, E_PARSE, E_COMPILE_ERROR, E_USER_ERROR, E_RECOVERABLE_ERROR ) ) ) {
				if ( !empty($this->action_id) ) {
					$this->store->mark_failure( $this->action_id );
					do_action( 'action_scheduler_unexpected_shutdown', $this->action_id, $error );
				}
			}
			$this->store->release_claim( $this->claim );
		}
	}
}
ActionScheduler_InvalidActionException.php                                                                                                                                                                                                                     1277          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * InvalidAction Exception.
 *
 * Used for identifying actions that are invalid in some way.
 *
 * @package ActionScheduler
 */
class ActionScheduler_InvalidActionException extends \InvalidArgumentException implements ActionScheduler_Exception {

	/**
	 * Create a new exception when the action's schedule cannot be fetched.
	 *
	 * @param string $action_id The action ID with bad args.
	 * @return static
	 */
	public static function from_schedule( $action_id, $schedule ) {
		$message = sprintf(
			/* translators: 1: action ID 2: schedule */
			__( 'Action [%1$s] has an invalid schedule: %2$s', 'action-scheduler' ),
			$action_id,
			var_export( $schedule, true )
		);

		return new static( $message );
	}

	/**
	 * Create a new exception when the action's args cannot be decoded to an array.
	 *
	 * @author Jeremy Pry
	 *
	 * @param string $action_id The action ID with bad args.
	 * @return static
	 */
	public static function from_decoding_args( $action_id, $args = array() ) {
		$message = sprintf(
			/* translators: 1: action ID 2: arguments */
			__( 'Action [%1$s] has invalid arguments. It cannot be JSON decoded to an array. $args = %2$s', 'action-scheduler' ),
			$action_id,
			var_export( $args, true )
		);

		return new static( $message );
	}
}
ActionScheduler_ListTable.php                                                                                                                                                                                                                                  20713         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Implements the admin view of the actions.
 * @codeCoverageIgnore
 */
class ActionScheduler_ListTable extends ActionScheduler_Abstract_ListTable {

	/**
	 * The package name.
	 *
	 * @var string
	 */
	protected $package = 'action-scheduler';

	/**
	 * Columns to show (name => label).
	 *
	 * @var array
	 */
	protected $columns = array();

	/**
	 * Actions (name => label).
	 *
	 * @var array
	 */
	protected $row_actions = array();

	/**
	 * The active data stores
	 *
	 * @var ActionScheduler_Store
	 */
	protected $store;

	/**
	 * A logger to use for getting action logs to display
	 *
	 * @var ActionScheduler_Logger
	 */
	protected $logger;

	/**
	 * A ActionScheduler_QueueRunner runner instance (or child class)
	 *
	 * @var ActionScheduler_QueueRunner
	 */
	protected $runner;

	/**
	 * Bulk actions. The key of the array is the method name of the implementation:
	 *
	 *     bulk_<key>(array $ids, string $sql_in).
	 *
	 * See the comments in the parent class for further details
	 *
	 * @var array
	 */
	protected $bulk_actions = array();

	/**
	 * Flag variable to render our notifications, if any, once.
	 *
	 * @var bool
	 */
	protected static $did_notification = false;

	/**
	 * Array of seconds for common time periods, like week or month, alongside an internationalised string representation, i.e. "Day" or "Days"
	 *
	 * @var array
	 */
	private static $time_periods;

	/**
	 * Sets the current data store object into `store->action` and initialises the object.
	 *
	 * @param ActionScheduler_Store $store
	 * @param ActionScheduler_Logger $logger
	 * @param ActionScheduler_QueueRunner $runner
	 */
	public function __construct( ActionScheduler_Store $store, ActionScheduler_Logger $logger, ActionScheduler_QueueRunner $runner ) {

		$this->store  = $store;
		$this->logger = $logger;
		$this->runner = $runner;

		$this->table_header = __( 'Scheduled Actions', 'action-scheduler' );

		$this->bulk_actions = array(
			'delete' => __( 'Delete', 'action-scheduler' ),
		);

		$this->columns = array(
			'hook'        => __( 'Hook', 'action-scheduler' ),
			'status'      => __( 'Status', 'action-scheduler' ),
			'args'        => __( 'Arguments', 'action-scheduler' ),
			'group'       => __( 'Group', 'action-scheduler' ),
			'recurrence'  => __( 'Recurrence', 'action-scheduler' ),
			'schedule'    => __( 'Scheduled Date', 'action-scheduler' ),
			'log_entries' => __( 'Log', 'action-scheduler' ),
		);

		$this->sort_by = array(
			'schedule',
			'hook',
			'group',
		);

		$this->search_by = array(
			'hook',
			'args',
			'claim_id',
		);

		$request_status = $this->get_request_status();

		if ( empty( $request_status ) ) {
			$this->sort_by[] = 'status';
		} elseif ( in_array( $request_status, array( 'in-progress', 'failed' ) ) ) {
			$this->columns  += array( 'claim_id' => __( 'Claim ID', 'action-scheduler' ) );
			$this->sort_by[] = 'claim_id';
		}

		$this->row_actions = array(
			'hook' => array(
				'run' => array(
					'name'  => __( 'Run', 'action-scheduler' ),
					'desc'  => __( 'Process the action now as if it were run as part of a queue', 'action-scheduler' ),
				),
				'cancel' => array(
					'name'  => __( 'Cancel', 'action-scheduler' ),
					'desc'  => __( 'Cancel the action now to avoid it being run in future', 'action-scheduler' ),
					'class' => 'cancel trash',
				),
			),
		);

		self::$time_periods = array(
			array(
				'seconds' => YEAR_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s year', '%s years', 'action-scheduler' ),
			),
			array(
				'seconds' => MONTH_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s month', '%s months', 'action-scheduler' ),
			),
			array(
				'seconds' => WEEK_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s week', '%s weeks', 'action-scheduler' ),
			),
			array(
				'seconds' => DAY_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s day', '%s days', 'action-scheduler' ),
			),
			array(
				'seconds' => HOUR_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s hour', '%s hours', 'action-scheduler' ),
			),
			array(
				'seconds' => MINUTE_IN_SECONDS,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s minute', '%s minutes', 'action-scheduler' ),
			),
			array(
				'seconds' => 1,
				/* translators: %s: amount of time */
				'names'   => _n_noop( '%s second', '%s seconds', 'action-scheduler' ),
			),
		);

		parent::__construct(
			array(
				'singular' => 'action-scheduler',
				'plural'   => 'action-scheduler',
				'ajax'     => false,
			)
		);

		add_screen_option(
			'per_page',
			array(
				'default' => $this->items_per_page,
			)
		);

		add_filter( 'set_screen_option_' . $this->get_per_page_option_name(), array( $this, 'set_items_per_page_option' ), 10, 3 );
		set_screen_options();
	}

	/**
	 * Handles setting the items_per_page option for this screen.
	 *
	 * @param mixed  $status Default false (to skip saving the current option).
	 * @param string $option Screen option name.
	 * @param int    $value  Screen option value.
	 * @return int
	 */
	public function set_items_per_page_option( $status, $option, $value ) {
		return $value;
	}
	/**
	 * Convert an interval of seconds into a two part human friendly string.
	 *
	 * The WordPress human_time_diff() function only calculates the time difference to one degree, meaning
	 * even if an action is 1 day and 11 hours away, it will display "1 day". This function goes one step
	 * further to display two degrees of accuracy.
	 *
	 * Inspired by the Crontrol::interval() function by Edward Dale: https://wordpress.org/plugins/wp-crontrol/
	 *
	 * @param int $interval A interval in seconds.
	 * @param int $periods_to_include Depth of time periods to include, e.g. for an interval of 70, and $periods_to_include of 2, both minutes and seconds would be included. With a value of 1, only minutes would be included.
	 * @return string A human friendly string representation of the interval.
	 */
	private static function human_interval( $interval, $periods_to_include = 2 ) {

		if ( $interval <= 0 ) {
			return __( 'Now!', 'action-scheduler' );
		}

		$output = '';

		for ( $time_period_index = 0, $periods_included = 0, $seconds_remaining = $interval; $time_period_index < count( self::$time_periods ) && $seconds_remaining > 0 && $periods_included < $periods_to_include; $time_period_index++ ) {

			$periods_in_interval = floor( $seconds_remaining / self::$time_periods[ $time_period_index ]['seconds'] );

			if ( $periods_in_interval > 0 ) {
				if ( ! empty( $output ) ) {
					$output .= ' ';
				}
				$output .= sprintf( _n( self::$time_periods[ $time_period_index ]['names'][0], self::$time_periods[ $time_period_index ]['names'][1], $periods_in_interval, 'action-scheduler' ), $periods_in_interval );
				$seconds_remaining -= $periods_in_interval * self::$time_periods[ $time_period_index ]['seconds'];
				$periods_included++;
			}
		}

		return $output;
	}

	/**
	 * Returns the recurrence of an action or 'Non-repeating'. The output is human readable.
	 *
	 * @param ActionScheduler_Action $action
	 *
	 * @return string
	 */
	protected function get_recurrence( $action ) {
		$schedule = $action->get_schedule();
		if ( $schedule->is_recurring() ) {
			$recurrence = $schedule->get_recurrence();

			if ( is_numeric( $recurrence ) ) {
				/* translators: %s: time interval */
				return sprintf( __( 'Every %s', 'action-scheduler' ), self::human_interval( $recurrence ) );
			} else {
				return $recurrence;
			}
		}

		return __( 'Non-repeating', 'action-scheduler' );
	}

	/**
	 * Serializes the argument of an action to render it in a human friendly format.
	 *
	 * @param array $row The array representation of the current row of the table
	 *
	 * @return string
	 */
	public function column_args( array $row ) {
		if ( empty( $row['args'] ) ) {
			return apply_filters( 'action_scheduler_list_table_column_args', '', $row );
		}

		$row_html = '<ul>';
		foreach ( $row['args'] as $key => $value ) {
			$row_html .= sprintf( '<li><code>%s => %s</code></li>', esc_html( var_export( $key, true ) ), esc_html( var_export( $value, true ) ) );
		}
		$row_html .= '</ul>';

		return apply_filters( 'action_scheduler_list_table_column_args', $row_html, $row );
	}

	/**
	 * Prints the logs entries inline. We do so to avoid loading Javascript and other hacks to show it in a modal.
	 *
	 * @param array $row Action array.
	 * @return string
	 */
	public function column_log_entries( array $row ) {

		$log_entries_html = '<ol>';

		$timezone = new DateTimezone( 'UTC' );

		foreach ( $row['log_entries'] as $log_entry ) {
			$log_entries_html .= $this->get_log_entry_html( $log_entry, $timezone );
		}

		$log_entries_html .= '</ol>';

		return $log_entries_html;
	}

	/**
	 * Prints the logs entries inline. We do so to avoid loading Javascript and other hacks to show it in a modal.
	 *
	 * @param ActionScheduler_LogEntry $log_entry
	 * @param DateTimezone $timezone
	 * @return string
	 */
	protected function get_log_entry_html( ActionScheduler_LogEntry $log_entry, DateTimezone $timezone ) {
		$date = $log_entry->get_date();
		$date->setTimezone( $timezone );
		return sprintf( '<li><strong>%s</strong><br/>%s</li>', esc_html( $date->format( 'Y-m-d H:i:s O' ) ), esc_html( $log_entry->get_message() ) );
	}

	/**
	 * Only display row actions for pending actions.
	 *
	 * @param array  $row         Row to render
	 * @param string $column_name Current row
	 *
	 * @return string
	 */
	protected function maybe_render_actions( $row, $column_name ) {
		if ( 'pending' === strtolower( $row[ 'status_name' ] ) ) {
			return parent::maybe_render_actions( $row, $column_name );
		}

		return '';
	}

	/**
	 * Renders admin notifications
	 *
	 * Notifications:
	 *  1. When the maximum number of tasks are being executed simultaneously.
	 *  2. Notifications when a task is manually executed.
	 *  3. Tables are missing.
	 */
	public function display_admin_notices() {
		global $wpdb;

		if ( ( is_a( $this->store, 'ActionScheduler_HybridStore' ) || is_a( $this->store, 'ActionScheduler_DBStore' ) ) && apply_filters( 'action_scheduler_enable_recreate_data_store', true ) ) {
			$table_list = array(
				'actionscheduler_actions',
				'actionscheduler_logs',
				'actionscheduler_groups',
				'actionscheduler_claims',
			);

			$found_tables = $wpdb->get_col( "SHOW TABLES LIKE '{$wpdb->prefix}actionscheduler%'" ); // phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
			foreach ( $table_list as $table_name ) {
				if ( ! in_array( $wpdb->prefix . $table_name, $found_tables ) ) {
					$this->admin_notices[] = array(
						'class'   => 'error',
						'message' => __( 'It appears one or more database tables were missing. Attempting to re-create the missing table(s).' , 'action-scheduler' ),
					);
					$this->recreate_tables();
					parent::display_admin_notices();

					return;
				}
			}
		}

		if ( $this->runner->has_maximum_concurrent_batches() ) {
			$claim_count           = $this->store->get_claim_count();
			$this->admin_notices[] = array(
				'class'   => 'updated',
				'message' => sprintf(
					/* translators: %s: amount of claims */
					_n(
						'Maximum simultaneous queues already in progress (%s queue). No additional queues will begin processing until the current queues are complete.',
						'Maximum simultaneous queues already in progress (%s queues). No additional queues will begin processing until the current queues are complete.',
						$claim_count,
						'action-scheduler'
					),
					$claim_count
				),
			);
		} elseif ( $this->store->has_pending_actions_due() ) {

			$async_request_lock_expiration = ActionScheduler::lock()->get_expiration( 'async-request-runner' );

			// No lock set or lock expired
			if ( false === $async_request_lock_expiration || $async_request_lock_expiration < time() ) {
				$in_progress_url       = add_query_arg( 'status', 'in-progress', remove_query_arg( 'status' ) );
				/* translators: %s: process URL */
				$async_request_message = sprintf( __( 'A new queue has begun processing. <a href="%s">View actions in-progress &raquo;</a>', 'action-scheduler' ), esc_url( $in_progress_url ) );
			} else {
				/* translators: %d: seconds */
				$async_request_message = sprintf( __( 'The next queue will begin processing in approximately %d seconds.', 'action-scheduler' ), $async_request_lock_expiration - time() );
			}

			$this->admin_notices[] = array(
				'class'   => 'notice notice-info',
				'message' => $async_request_message,
			);
		}

		$notification = get_transient( 'action_scheduler_admin_notice' );

		if ( is_array( $notification ) ) {
			delete_transient( 'action_scheduler_admin_notice' );

			$action = $this->store->fetch_action( $notification['action_id'] );
			$action_hook_html = '<strong><code>' . $action->get_hook() . '</code></strong>';
			if ( 1 == $notification['success'] ) {
				$class = 'updated';
				switch ( $notification['row_action_type'] ) {
					case 'run' :
						/* translators: %s: action HTML */
						$action_message_html = sprintf( __( 'Successfully executed action: %s', 'action-scheduler' ), $action_hook_html );
						break;
					case 'cancel' :
						/* translators: %s: action HTML */
						$action_message_html = sprintf( __( 'Successfully canceled action: %s', 'action-scheduler' ), $action_hook_html );
						break;
					default :
						/* translators: %s: action HTML */
						$action_message_html = sprintf( __( 'Successfully processed change for action: %s', 'action-scheduler' ), $action_hook_html );
						break;
				}
			} else {
				$class = 'error';
				/* translators: 1: action HTML 2: action ID 3: error message */
				$action_message_html = sprintf( __( 'Could not process change for action: "%1$s" (ID: %2$d). Error: %3$s', 'action-scheduler' ), $action_hook_html, esc_html( $notification['action_id'] ), esc_html( $notification['error_message'] ) );
			}

			$action_message_html = apply_filters( 'action_scheduler_admin_notice_html', $action_message_html, $action, $notification );

			$this->admin_notices[] = array(
				'class'   => $class,
				'message' => $action_message_html,
			);
		}

		parent::display_admin_notices();
	}

	/**
	 * Prints the scheduled date in a human friendly format.
	 *
	 * @param array $row The array representation of the current row of the table
	 *
	 * @return string
	 */
	public function column_schedule( $row ) {
		return $this->get_schedule_display_string( $row['schedule'] );
	}

	/**
	 * Get the scheduled date in a human friendly format.
	 *
	 * @param ActionScheduler_Schedule $schedule
	 * @return string
	 */
	protected function get_schedule_display_string( ActionScheduler_Schedule $schedule ) {

		$schedule_display_string = '';

		if ( is_a( $schedule, 'ActionScheduler_NullSchedule' ) ) {
			return __( 'async', 'action-scheduler' );
		}

		if ( ! $schedule->get_date() ) {
			return '0000-00-00 00:00:00';
		}

		$next_timestamp = $schedule->get_date()->getTimestamp();

		$schedule_display_string .= $schedule->get_date()->format( 'Y-m-d H:i:s O' );
		$schedule_display_string .= '<br/>';

		if ( gmdate( 'U' ) > $next_timestamp ) {
			/* translators: %s: date interval */
			$schedule_display_string .= sprintf( __( ' (%s ago)', 'action-scheduler' ), self::human_interval( gmdate( 'U' ) - $next_timestamp ) );
		} else {
			/* translators: %s: date interval */
			$schedule_display_string .= sprintf( __( ' (%s)', 'action-scheduler' ), self::human_interval( $next_timestamp - gmdate( 'U' ) ) );
		}

		return $schedule_display_string;
	}

	/**
	 * Bulk delete
	 *
	 * Deletes actions based on their ID. This is the handler for the bulk delete. It assumes the data
	 * properly validated by the callee and it will delete the actions without any extra validation.
	 *
	 * @param array $ids
	 * @param string $ids_sql Inherited and unused
	 */
	protected function bulk_delete( array $ids, $ids_sql ) {
		foreach ( $ids as $id ) {
			$this->store->delete_action( $id );
		}
	}

	/**
	 * Implements the logic behind running an action. ActionScheduler_Abstract_ListTable validates the request and their
	 * parameters are valid.
	 *
	 * @param int $action_id
	 */
	protected function row_action_cancel( $action_id ) {
		$this->process_row_action( $action_id, 'cancel' );
	}

	/**
	 * Implements the logic behind running an action. ActionScheduler_Abstract_ListTable validates the request and their
	 * parameters are valid.
	 *
	 * @param int $action_id
	 */
	protected function row_action_run( $action_id ) {
		$this->process_row_action( $action_id, 'run' );
	}

	/**
	 * Force the data store schema updates.
	 */
	protected function recreate_tables() {
		if ( is_a( $this->store, 'ActionScheduler_HybridStore' ) ) {
			$store = $this->store;
		} else {
			$store = new ActionScheduler_HybridStore();
		}
		add_action( 'action_scheduler/created_table', array( $store, 'set_autoincrement' ), 10, 2 );

		$store_schema  = new ActionScheduler_StoreSchema();
		$logger_schema = new ActionScheduler_LoggerSchema();
		$store_schema->register_tables( true );
		$logger_schema->register_tables( true );

		remove_action( 'action_scheduler/created_table', array( $store, 'set_autoincrement' ), 10 );
	}
	/**
	 * Implements the logic behind processing an action once an action link is clicked on the list table.
	 *
	 * @param int $action_id
	 * @param string $row_action_type The type of action to perform on the action.
	 */
	protected function process_row_action( $action_id, $row_action_type ) {
		try {
			switch ( $row_action_type ) {
				case 'run' :
					$this->runner->process_action( $action_id, 'Admin List Table' );
					break;
				case 'cancel' :
					$this->store->cancel_action( $action_id );
					break;
			}
			$success = 1;
			$error_message = '';
		} catch ( Exception $e ) {
			$success = 0;
			$error_message = $e->getMessage();
		}

		set_transient( 'action_scheduler_admin_notice', compact( 'action_id', 'success', 'error_message', 'row_action_type' ), 30 );
	}

	/**
	 * {@inheritDoc}
	 */
	public function prepare_items() {
		$this->prepare_column_headers();

		$per_page = $this->get_items_per_page( $this->get_per_page_option_name(), $this->items_per_page );

		$query = array(
			'per_page' => $per_page,
			'offset'   => $this->get_items_offset(),
			'status'   => $this->get_request_status(),
			'orderby'  => $this->get_request_orderby(),
			'order'    => $this->get_request_order(),
			'search'   => $this->get_request_search_query(),
		);

		/**
		 * Change query arguments to query for past-due actions.
		 * Past-due actions have the 'pending' status and are in the past.
		 * This is needed because registering 'past-due' as a status is overkill.
		 */
		if ( 'past-due' === $this->get_request_status() ) {
			$query['status'] = ActionScheduler_Store::STATUS_PENDING;
			$query['date']   = as_get_datetime_object();
		}

		$this->items = array();

		$total_items = $this->store->query_actions( $query, 'count' );

		$status_labels = $this->store->get_status_labels();

		foreach ( $this->store->query_actions( $query ) as $action_id ) {
			try {
				$action = $this->store->fetch_action( $action_id );
			} catch ( Exception $e ) {
				continue;
			}
			if ( is_a( $action, 'ActionScheduler_NullAction' ) ) {
				continue;
			}
			$this->items[ $action_id ] = array(
				'ID'          => $action_id,
				'hook'        => $action->get_hook(),
				'status_name' => $this->store->get_status( $action_id ),
				'status'      => $status_labels[ $this->store->get_status( $action_id ) ],
				'args'        => $action->get_args(),
				'group'       => $action->get_group(),
				'log_entries' => $this->logger->get_logs( $action_id ),
				'claim_id'    => $this->store->get_claim_id( $action_id ),
				'recurrence'  => $this->get_recurrence( $action ),
				'schedule'    => $action->get_schedule(),
			);
		}

		$this->set_pagination_args( array(
			'total_items' => $total_items,
			'per_page'    => $per_page,
			'total_pages' => ceil( $total_items / $per_page ),
		) );
	}

	/**
	 * Prints the available statuses so the user can click to filter.
	 */
	protected function display_filter_by_status() {
		$this->status_counts = $this->store->action_counts() + $this->store->extra_action_counts();
		parent::display_filter_by_status();
	}

	/**
	 * Get the text to display in the search box on the list table.
	 */
	protected function get_search_box_button_text() {
		return __( 'Search hook, args and claim ID', 'action-scheduler' );
	}

	/**
	 * {@inheritDoc}
	 */
	protected function get_per_page_option_name() {
		return str_replace( '-', '_', $this->screen->id ) . '_per_page';
	}
}
ActionScheduler_LogEntry.php                                                                                                                                                                                                                                   1764          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_LogEntry
 */
class ActionScheduler_LogEntry {

	/**
	 * @var int $action_id
	 */
	protected $action_id =  '';

	/**
	 * @var string $message
	 */
	protected $message =  '';

	/**
	 * @var Datetime $date
	 */
	protected $date;

	/**
	 * Constructor
	 *
	 * @param mixed  $action_id Action ID
	 * @param string $message   Message
	 * @param Datetime $date    Datetime object with the time when this log entry was created. If this parameter is
	 *                          not provided a new Datetime object (with current time) will be created.
	 */
	public function __construct( $action_id, $message, $date = null ) {

		/*
		 * ActionScheduler_wpCommentLogger::get_entry() previously passed a 3rd param of $comment->comment_type
		 * to ActionScheduler_LogEntry::__construct(), goodness knows why, and the Follow-up Emails plugin
		 * hard-codes loading its own version of ActionScheduler_wpCommentLogger with that out-dated method,
		 * goodness knows why, so we need to guard against that here instead of using a DateTime type declaration
		 * for the constructor's 3rd param of $date and causing a fatal error with older versions of FUE.
		 */
		if ( null !== $date && ! is_a( $date, 'DateTime' ) ) {
			_doing_it_wrong( __METHOD__, 'The third parameter must be a valid DateTime instance, or null.', '2.0.0' );
			$date = null;
		}

		$this->action_id = $action_id;
		$this->message   = $message;
		$this->date      = $date ? $date : new Datetime;
	}

	/**
	 * Returns the date when this log entry was created
	 *
	 * @return Datetime
	 */
	public function get_date() {
		return $this->date;
	}

	public function get_action_id() {
		return $this->action_id;
	}

	public function get_message() {
		return $this->message;
	}
}

ActionScheduler_NullLogEntry.php                                                                                                                                                                                                                               219           1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_NullLogEntry
 */
class ActionScheduler_NullLogEntry extends ActionScheduler_LogEntry {
	public function __construct( $action_id = '', $message = '' ) {
		// nothing to see here
	}
}
 ActionScheduler_OptionLock.php                                                                                                                                                                                                                                 1777          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Provide a way to set simple transient locks to block behaviour
 * for up-to a given duration.
 *
 * Class ActionScheduler_OptionLock
 * @since 3.0.0
 */
class ActionScheduler_OptionLock extends ActionScheduler_Lock {

	/**
	 * Set a lock using options for a given amount of time (60 seconds by default).
	 *
	 * Using an autoloaded option avoids running database queries or other resource intensive tasks
	 * on frequently triggered hooks, like 'init' or 'shutdown'.
	 *
	 * For example, ActionScheduler_QueueRunner->maybe_dispatch_async_request() uses a lock to avoid
	 * calling ActionScheduler_QueueRunner->has_maximum_concurrent_batches() every time the 'shutdown',
	 * hook is triggered, because that method calls ActionScheduler_QueueRunner->store->get_claim_count()
	 * to find the current number of claims in the database.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @bool True if lock value has changed, false if not or if set failed.
	 */
	public function set( $lock_type ) {
		return update_option( $this->get_key( $lock_type ), time() + $this->get_duration( $lock_type ) );
	}

	/**
	 * If a lock is set, return the timestamp it was set to expiry.
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return bool|int False if no lock is set, otherwise the timestamp for when the lock is set to expire.
	 */
	public function get_expiration( $lock_type ) {
		return get_option( $this->get_key( $lock_type ) );
	}

	/**
	 * Get the key to use for storing the lock in the transient
	 *
	 * @param string $lock_type A string to identify different lock types.
	 * @return string
	 */
	protected function get_key( $lock_type ) {
		return sprintf( 'action_scheduler_lock_%s', $lock_type );
	}
}
ActionScheduler_QueueCleaner.php                                                                                                                                                                                                                               5240          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_QueueCleaner
 */
class ActionScheduler_QueueCleaner {

	/** @var int */
	protected $batch_size;

	/** @var ActionScheduler_Store */
	private $store = null;

	/**
	 * 31 days in seconds.
	 *
	 * @var int
	 */
	private $month_in_seconds = 2678400;

	/**
	 * ActionScheduler_QueueCleaner constructor.
	 *
	 * @param ActionScheduler_Store $store      The store instance.
	 * @param int                   $batch_size The batch size.
	 */
	public function __construct( ActionScheduler_Store $store = null, $batch_size = 20 ) {
		$this->store = $store ? $store : ActionScheduler_Store::instance();
		$this->batch_size = $batch_size;
	}

	public function delete_old_actions() {
		$lifespan = apply_filters( 'action_scheduler_retention_period', $this->month_in_seconds );
		$cutoff = as_get_datetime_object($lifespan.' seconds ago');

		$statuses_to_purge = array(
			ActionScheduler_Store::STATUS_COMPLETE,
			ActionScheduler_Store::STATUS_CANCELED,
		);

		foreach ( $statuses_to_purge as $status ) {
			$actions_to_delete = $this->store->query_actions( array(
				'status'           => $status,
				'modified'         => $cutoff,
				'modified_compare' => '<=',
				'per_page'         => $this->get_batch_size(),
				'orderby'          => 'none',
			) );

			foreach ( $actions_to_delete as $action_id ) {
				try {
					$this->store->delete_action( $action_id );
				} catch ( Exception $e ) {

					/**
					 * Notify 3rd party code of exceptions when deleting a completed action older than the retention period
					 *
					 * This hook provides a way for 3rd party code to log or otherwise handle exceptions relating to their
					 * actions.
					 *
					 * @since 2.0.0
					 *
					 * @param int $action_id The scheduled actions ID in the data store
					 * @param Exception $e The exception thrown when attempting to delete the action from the data store
					 * @param int $lifespan The retention period, in seconds, for old actions
					 * @param int $count_of_actions_to_delete The number of old actions being deleted in this batch
					 */
					do_action( 'action_scheduler_failed_old_action_deletion', $action_id, $e, $lifespan, count( $actions_to_delete ) );
				}
			}
		}
	}

	/**
	 * Unclaim pending actions that have not been run within a given time limit.
	 *
	 * When called by ActionScheduler_Abstract_QueueRunner::run_cleanup(), the time limit passed
	 * as a parameter is 10x the time limit used for queue processing.
	 *
	 * @param int $time_limit The number of seconds to allow a queue to run before unclaiming its pending actions. Default 300 (5 minutes).
	 */
	public function reset_timeouts( $time_limit = 300 ) {
		$timeout = apply_filters( 'action_scheduler_timeout_period', $time_limit );
		if ( $timeout < 0 ) {
			return;
		}
		$cutoff = as_get_datetime_object($timeout.' seconds ago');
		$actions_to_reset = $this->store->query_actions( array(
			'status'           => ActionScheduler_Store::STATUS_PENDING,
			'modified'         => $cutoff,
			'modified_compare' => '<=',
			'claimed'          => true,
			'per_page'         => $this->get_batch_size(),
			'orderby'          => 'none',
		) );

		foreach ( $actions_to_reset as $action_id ) {
			$this->store->unclaim_action( $action_id );
			do_action( 'action_scheduler_reset_action', $action_id );
		}
	}

	/**
	 * Mark actions that have been running for more than a given time limit as failed, based on
	 * the assumption some uncatachable and unloggable fatal error occurred during processing.
	 *
	 * When called by ActionScheduler_Abstract_QueueRunner::run_cleanup(), the time limit passed
	 * as a parameter is 10x the time limit used for queue processing.
	 *
	 * @param int $time_limit The number of seconds to allow an action to run before it is considered to have failed. Default 300 (5 minutes).
	 */
	public function mark_failures( $time_limit = 300 ) {
		$timeout = apply_filters( 'action_scheduler_failure_period', $time_limit );
		if ( $timeout < 0 ) {
			return;
		}
		$cutoff = as_get_datetime_object($timeout.' seconds ago');
		$actions_to_reset = $this->store->query_actions( array(
			'status'           => ActionScheduler_Store::STATUS_RUNNING,
			'modified'         => $cutoff,
			'modified_compare' => '<=',
			'per_page'         => $this->get_batch_size(),
			'orderby'          => 'none',
		) );

		foreach ( $actions_to_reset as $action_id ) {
			$this->store->mark_failure( $action_id );
			do_action( 'action_scheduler_failed_action', $action_id, $timeout );
		}
	}

	/**
	 * Do all of the cleaning actions.
	 *
	 * @param int $time_limit The number of seconds to use as the timeout and failure period. Default 300 (5 minutes).
	 * @author Jeremy Pry
	 */
	public function clean( $time_limit = 300 ) {
		$this->delete_old_actions();
		$this->reset_timeouts( $time_limit );
		$this->mark_failures( $time_limit );
	}

	/**
	 * Get the batch size for cleaning the queue.
	 *
	 * @author Jeremy Pry
	 * @return int
	 */
	protected function get_batch_size() {
		/**
		 * Filter the batch size when cleaning the queue.
		 *
		 * @param int $batch_size The number of actions to clean in one batch.
		 */
		return absint( apply_filters( 'action_scheduler_cleanup_batch_size', $this->batch_size ) );
	}
}
ActionScheduler_QueueRunner.php                                                                                                                                                                                                                                8463          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_QueueRunner
 */
class ActionScheduler_QueueRunner extends ActionScheduler_Abstract_QueueRunner {
	const WP_CRON_HOOK = 'action_scheduler_run_queue';

	const WP_CRON_SCHEDULE = 'every_minute';

	/** @var ActionScheduler_AsyncRequest_QueueRunner */
	protected $async_request;

	/** @var ActionScheduler_QueueRunner  */
	private static $runner = null;

	/** @var int  */
	private $processed_actions_count = 0;

	/**
	 * @return ActionScheduler_QueueRunner
	 * @codeCoverageIgnore
	 */
	public static function instance() {
		if ( empty(self::$runner) ) {
			$class = apply_filters('action_scheduler_queue_runner_class', 'ActionScheduler_QueueRunner');
			self::$runner = new $class();
		}
		return self::$runner;
	}

	/**
	 * ActionScheduler_QueueRunner constructor.
	 *
	 * @param ActionScheduler_Store             $store
	 * @param ActionScheduler_FatalErrorMonitor $monitor
	 * @param ActionScheduler_QueueCleaner      $cleaner
	 */
	public function __construct( ActionScheduler_Store $store = null, ActionScheduler_FatalErrorMonitor $monitor = null, ActionScheduler_QueueCleaner $cleaner = null, ActionScheduler_AsyncRequest_QueueRunner $async_request = null ) {
		parent::__construct( $store, $monitor, $cleaner );

		if ( is_null( $async_request ) ) {
			$async_request = new ActionScheduler_AsyncRequest_QueueRunner( $this->store );
		}

		$this->async_request = $async_request;
	}

	/**
	 * @codeCoverageIgnore
	 */
	public function init() {

		add_filter( 'cron_schedules', array( self::instance(), 'add_wp_cron_schedule' ) );

		// Check for and remove any WP Cron hook scheduled by Action Scheduler < 3.0.0, which didn't include the $context param
		$next_timestamp = wp_next_scheduled( self::WP_CRON_HOOK );
		if ( $next_timestamp ) {
			wp_unschedule_event( $next_timestamp, self::WP_CRON_HOOK );
		}

		$cron_context = array( 'WP Cron' );

		if ( ! wp_next_scheduled( self::WP_CRON_HOOK, $cron_context ) ) {
			$schedule = apply_filters( 'action_scheduler_run_schedule', self::WP_CRON_SCHEDULE );
			wp_schedule_event( time(), $schedule, self::WP_CRON_HOOK, $cron_context );
		}

		add_action( self::WP_CRON_HOOK, array( self::instance(), 'run' ) );
		$this->hook_dispatch_async_request();
	}

	/**
	 * Hook check for dispatching an async request.
	 */
	public function hook_dispatch_async_request() {
		add_action( 'shutdown', array( $this, 'maybe_dispatch_async_request' ) );
	}

	/**
	 * Unhook check for dispatching an async request.
	 */
	public function unhook_dispatch_async_request() {
		remove_action( 'shutdown', array( $this, 'maybe_dispatch_async_request' ) );
	}

	/**
	 * Check if we should dispatch an async request to process actions.
	 *
	 * This method is attached to 'shutdown', so is called frequently. To avoid slowing down
	 * the site, it mitigates the work performed in each request by:
	 * 1. checking if it's in the admin context and then
	 * 2. haven't run on the 'shutdown' hook within the lock time (60 seconds by default)
	 * 3. haven't exceeded the number of allowed batches.
	 *
	 * The order of these checks is important, because they run from a check on a value:
	 * 1. in memory - is_admin() maps to $GLOBALS or the WP_ADMIN constant
	 * 2. in memory - transients use autoloaded options by default
	 * 3. from a database query - has_maximum_concurrent_batches() run the query
	 *    $this->store->get_claim_count() to find the current number of claims in the DB.
	 *
	 * If all of these conditions are met, then we request an async runner check whether it
	 * should dispatch a request to process pending actions.
	 */
	public function maybe_dispatch_async_request() {
		if ( is_admin() && ! ActionScheduler::lock()->is_locked( 'async-request-runner' ) ) {
			// Only start an async queue at most once every 60 seconds
			ActionScheduler::lock()->set( 'async-request-runner' );
			$this->async_request->maybe_dispatch();
		}
	}

	/**
	 * Process actions in the queue. Attached to self::WP_CRON_HOOK i.e. 'action_scheduler_run_queue'
	 *
	 * The $context param of this method defaults to 'WP Cron', because prior to Action Scheduler 3.0.0
	 * that was the only context in which this method was run, and the self::WP_CRON_HOOK hook had no context
	 * passed along with it. New code calling this method directly, or by triggering the self::WP_CRON_HOOK,
	 * should set a context as the first parameter. For an example of this, refer to the code seen in
	 * @see ActionScheduler_AsyncRequest_QueueRunner::handle()
	 *
	 * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
	 *        Generally, this should be capitalised and not localised as it's a proper noun.
	 * @return int The number of actions processed.
	 */
	public function run( $context = 'WP Cron' ) {
		ActionScheduler_Compatibility::raise_memory_limit();
		ActionScheduler_Compatibility::raise_time_limit( $this->get_time_limit() );
		do_action( 'action_scheduler_before_process_queue' );
		$this->run_cleanup();

		$this->processed_actions_count = 0;
		if ( false === $this->has_maximum_concurrent_batches() ) {
			$batch_size = apply_filters( 'action_scheduler_queue_runner_batch_size', 25 );
			do {
				$processed_actions_in_batch     = $this->do_batch( $batch_size, $context );
				$this->processed_actions_count += $processed_actions_in_batch;
			} while ( $processed_actions_in_batch > 0 && ! $this->batch_limits_exceeded( $this->processed_actions_count ) ); // keep going until we run out of actions, time, or memory
		}

		do_action( 'action_scheduler_after_process_queue' );
		return $this->processed_actions_count;
	}

	/**
	 * Process a batch of actions pending in the queue.
	 *
	 * Actions are processed by claiming a set of pending actions then processing each one until either the batch
	 * size is completed, or memory or time limits are reached, defined by @see $this->batch_limits_exceeded().
	 *
	 * @param int $size The maximum number of actions to process in the batch.
	 * @param string $context Optional identifer for the context in which this action is being processed, e.g. 'WP CLI' or 'WP Cron'
	 *        Generally, this should be capitalised and not localised as it's a proper noun.
	 * @return int The number of actions processed.
	 */
	protected function do_batch( $size = 100, $context = '' ) {
		$claim = $this->store->stake_claim($size);
		$this->monitor->attach($claim);
		$processed_actions = 0;

		foreach ( $claim->get_actions() as $action_id ) {
			// bail if we lost the claim
			if ( ! in_array( $action_id, $this->store->find_actions_by_claim_id( $claim->get_id() ) ) ) {
				break;
			}
			$this->process_action( $action_id, $context );
			$processed_actions++;

			if ( $this->batch_limits_exceeded( $processed_actions + $this->processed_actions_count ) ) {
				break;
			}
		}
		$this->store->release_claim($claim);
		$this->monitor->detach();
		$this->clear_caches();
		return $processed_actions;
	}

	/**
	 * Flush the cache if possible (intended for use after a batch of actions has been processed).
	 *
	 * This is useful because running large batches can eat up memory and because invalid data can accrue in the
	 * runtime cache, which may lead to unexpected results.
	 */
	protected function clear_caches() {
		/*
		 * Calling wp_cache_flush_runtime() lets us clear the runtime cache without invalidating the external object
		 * cache, so we will always prefer this when it is available (but it was only introduced in WordPress 6.0).
		 */
		if ( function_exists( 'wp_cache_flush_runtime' ) ) {
			wp_cache_flush_runtime();
		} elseif (
			! wp_using_ext_object_cache()
			/**
			 * When an external object cache is in use, and when wp_cache_flush_runtime() is not available, then
			 * normally the cache will not be flushed after processing a batch of actions (to avoid a performance
			 * penalty for other processes).
			 *
			 * This filter makes it possible to override this behavior and always flush the cache, even if an external
			 * object cache is in use.
			 *
			 * @since 1.0
			 *
			 * @param bool $flush_cache If the cache should be flushed.
			 */
			|| apply_filters( 'action_scheduler_queue_runner_flush_cache', false )
		) {
			wp_cache_flush();
		}
	}

	public function add_wp_cron_schedule( $schedules ) {
		$schedules['every_minute'] = array(
			'interval' => 60, // in seconds
			'display'  => __( 'Every minute', 'action-scheduler' ),
		);

		return $schedules;
	}
}
ActionScheduler_Versions.php                                                                                                                                                                                                                                   1263          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_Versions
 */
class ActionScheduler_Versions {
	/**
	 * @var ActionScheduler_Versions
	 */
	private static $instance = NULL;

	private $versions = array();

	public function register( $version_string, $initialization_callback ) {
		if ( isset($this->versions[$version_string]) ) {
			return FALSE;
		}
		$this->versions[$version_string] = $initialization_callback;
		return TRUE;
	}

	public function get_versions() {
		return $this->versions;
	}

	public function latest_version() {
		$keys = array_keys($this->versions);
		if ( empty($keys) ) {
			return false;
		}
		uasort( $keys, 'version_compare' );
		return end($keys);
	}

	public function latest_version_callback() {
		$latest = $this->latest_version();
		if ( empty($latest) || !isset($this->versions[$latest]) ) {
			return '__return_null';
		}
		return $this->versions[$latest];
	}

	/**
	 * @return ActionScheduler_Versions
	 * @codeCoverageIgnore
	 */
	public static function instance() {
		if ( empty(self::$instance) ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * @codeCoverageIgnore
	 */
	public static function initialize_latest_version() {
		$self = self::instance();
		call_user_func($self->latest_version_callback());
	}
}
 ActionScheduler_wcSystemStatus.php                                                                                                                                                                                                                             5304          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_wcSystemStatus
 */
class ActionScheduler_wcSystemStatus {

	/**
	 * The active data stores
	 *
	 * @var ActionScheduler_Store
	 */
	protected $store;

	/**
	 * Constructor method for ActionScheduler_wcSystemStatus.
	 *
	 * @param ActionScheduler_Store $store Active store object.
	 *
	 * @return void
	 */
	public function __construct( $store ) {
		$this->store = $store;
	}

	/**
	 * Display action data, including number of actions grouped by status and the oldest & newest action in each status.
	 *
	 * Helpful to identify issues, like a clogged queue.
	 */
	public function render() {
		$action_counts     = $this->store->action_counts();
		$status_labels     = $this->store->get_status_labels();
		$oldest_and_newest = $this->get_oldest_and_newest( array_keys( $status_labels ) );

		$this->get_template( $status_labels, $action_counts, $oldest_and_newest );
	}

	/**
	 * Get oldest and newest scheduled dates for a given set of statuses.
	 *
	 * @param array $status_keys Set of statuses to find oldest & newest action for.
	 * @return array
	 */
	protected function get_oldest_and_newest( $status_keys ) {

		$oldest_and_newest = array();

		foreach ( $status_keys as $status ) {
			$oldest_and_newest[ $status ] = array(
				'oldest' => '&ndash;',
				'newest' => '&ndash;',
			);

			if ( 'in-progress' === $status ) {
				continue;
			}

			$oldest_and_newest[ $status ]['oldest'] = $this->get_action_status_date( $status, 'oldest' );
			$oldest_and_newest[ $status ]['newest'] = $this->get_action_status_date( $status, 'newest' );
		}

		return $oldest_and_newest;
	}

	/**
	 * Get oldest or newest scheduled date for a given status.
	 *
	 * @param string $status Action status label/name string.
	 * @param string $date_type Oldest or Newest.
	 * @return DateTime
	 */
	protected function get_action_status_date( $status, $date_type = 'oldest' ) {

		$order = 'oldest' === $date_type ? 'ASC' : 'DESC';

		$action = $this->store->query_actions(
			array(
				'claimed'  => false,
				'status'   => $status,
				'per_page' => 1,
				'order'    => $order,
			)
		);

		if ( ! empty( $action ) ) {
			$date_object = $this->store->get_date( $action[0] );
			$action_date = $date_object->format( 'Y-m-d H:i:s O' );
		} else {
			$action_date = '&ndash;';
		}

		return $action_date;
	}

	/**
	 * Get oldest or newest scheduled date for a given status.
	 *
	 * @param array $status_labels Set of statuses to find oldest & newest action for.
	 * @param array $action_counts Number of actions grouped by status.
	 * @param array $oldest_and_newest Date of the oldest and newest action with each status.
	 */
	protected function get_template( $status_labels, $action_counts, $oldest_and_newest ) {
		$as_version   = ActionScheduler_Versions::instance()->latest_version();
		$as_datastore = get_class( ActionScheduler_Store::instance() );
		?>

		<table class="wc_status_table widefat" cellspacing="0">
			<thead>
				<tr>
					<th colspan="5" data-export-label="Action Scheduler"><h2><?php esc_html_e( 'Action Scheduler', 'action-scheduler' ); ?><?php echo wc_help_tip( esc_html__( 'This section shows details of Action Scheduler.', 'action-scheduler' ) ); ?></h2></th>
				</tr>
				<tr>
					<td colspan="2" data-export-label="Version"><?php esc_html_e( 'Version:', 'action-scheduler' ); ?></td>
					<td colspan="3"><?php echo esc_html( $as_version ); ?></td>
				</tr>
				<tr>
					<td colspan="2" data-export-label="Data store"><?php esc_html_e( 'Data store:', 'action-scheduler' ); ?></td>
					<td colspan="3"><?php echo esc_html( $as_datastore ); ?></td>
				</tr>
				<tr>
					<td><strong><?php esc_html_e( 'Action Status', 'action-scheduler' ); ?></strong></td>
					<td class="help">&nbsp;</td>
					<td><strong><?php esc_html_e( 'Count', 'action-scheduler' ); ?></strong></td>
					<td><strong><?php esc_html_e( 'Oldest Scheduled Date', 'action-scheduler' ); ?></strong></td>
					<td><strong><?php esc_html_e( 'Newest Scheduled Date', 'action-scheduler' ); ?></strong></td>
				</tr>
			</thead>
			<tbody>
				<?php
				foreach ( $action_counts as $status => $count ) {
					// WC uses the 3rd column for export, so we need to display more data in that (hidden when viewed as part of the table) and add an empty 2nd column.
					printf(
						'<tr><td>%1$s</td><td>&nbsp;</td><td>%2$s<span style="display: none;">, Oldest: %3$s, Newest: %4$s</span></td><td>%3$s</td><td>%4$s</td></tr>',
						esc_html( $status_labels[ $status ] ),
						esc_html( number_format_i18n( $count ) ),
						esc_html( $oldest_and_newest[ $status ]['oldest'] ),
						esc_html( $oldest_and_newest[ $status ]['newest'] )
					);
				}
				?>
			</tbody>
		</table>

		<?php
	}

	/**
	 * Is triggered when invoking inaccessible methods in an object context.
	 *
	 * @param string $name Name of method called.
	 * @param array  $arguments Parameters to invoke the method with.
	 *
	 * @return mixed
	 * @link https://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.methods
	 */
	public function __call( $name, $arguments ) {
		switch ( $name ) {
			case 'print':
				_deprecated_function( __CLASS__ . '::print()', '2.2.4', __CLASS__ . '::render()' );
				return call_user_func_array( array( $this, 'render' ), $arguments );
		}

		return null;
	}
}
ActionScheduler_WPCommentCleaner.php                                                                                                                                                                                                                           4408          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php

/**
 * Class ActionScheduler_WPCommentCleaner
 *
 * @since 3.0.0
 */
class ActionScheduler_WPCommentCleaner {

	/**
	 * Post migration hook used to cleanup the WP comment table.
	 *
	 * @var string
	 */
	protected static $cleanup_hook = 'action_scheduler/cleanup_wp_comment_logs';

	/**
	 * An instance of the ActionScheduler_wpCommentLogger class to interact with the comments table.
	 *
	 * This instance should only be used as an interface. It should not be initialized.
	 *
	 * @var ActionScheduler_wpCommentLogger
	 */
	protected static $wp_comment_logger = null;

	/**
	 * The key used to store the cached value of whether there are logs in the WP comment table.
	 *
	 * @var string
	 */
	protected static $has_logs_option_key = 'as_has_wp_comment_logs';

	/**
	 * Initialize the class and attach callbacks.
	 */
	public static function init() {
		if ( empty( self::$wp_comment_logger ) ) {
			self::$wp_comment_logger = new ActionScheduler_wpCommentLogger();
		}

		add_action( self::$cleanup_hook, array( __CLASS__, 'delete_all_action_comments' ) );

		// While there are orphaned logs left in the comments table, we need to attach the callbacks which filter comment counts.
		add_action( 'pre_get_comments', array( self::$wp_comment_logger, 'filter_comment_queries' ), 10, 1 );
		add_action( 'wp_count_comments', array( self::$wp_comment_logger, 'filter_comment_count' ), 20, 2 ); // run after WC_Comments::wp_count_comments() to make sure we exclude order notes and action logs
		add_action( 'comment_feed_where', array( self::$wp_comment_logger, 'filter_comment_feed' ), 10, 2 );

		// Action Scheduler may be displayed as a Tools screen or WooCommerce > Status administration screen
		add_action( 'load-tools_page_action-scheduler', array( __CLASS__, 'register_admin_notice' ) );
		add_action( 'load-woocommerce_page_wc-status', array( __CLASS__, 'register_admin_notice' ) );
	}

	/**
	 * Determines if there are log entries in the wp comments table.
	 *
	 * Uses the flag set on migration completion set by @see self::maybe_schedule_cleanup().
	 *
	 * @return boolean Whether there are scheduled action comments in the comments table.
	 */
	public static function has_logs() {
		return 'yes' === get_option( self::$has_logs_option_key );
	}

	/**
	 * Schedules the WP Post comment table cleanup to run in 6 months if it's not already scheduled.
	 * Attached to the migration complete hook 'action_scheduler/migration_complete'.
	 */
	public static function maybe_schedule_cleanup() {
		if ( (bool) get_comments( array( 'type' => ActionScheduler_wpCommentLogger::TYPE, 'number' => 1, 'fields' => 'ids' ) ) ) {
			update_option( self::$has_logs_option_key, 'yes' );

			if ( ! as_next_scheduled_action( self::$cleanup_hook ) ) {
				as_schedule_single_action( gmdate( 'U' ) + ( 6 * MONTH_IN_SECONDS ), self::$cleanup_hook );
			}
		}
	}

	/**
	 * Delete all action comments from the WP Comments table.
	 */
	public static function delete_all_action_comments() {
		global $wpdb;
		$wpdb->delete( $wpdb->comments, array( 'comment_type' => ActionScheduler_wpCommentLogger::TYPE, 'comment_agent' => ActionScheduler_wpCommentLogger::AGENT ) );
		delete_option( self::$has_logs_option_key );
	}

	/**
	 * Registers admin notices about the orphaned action logs.
	 */
	public static function register_admin_notice() {
		add_action( 'admin_notices', array( __CLASS__, 'print_admin_notice' ) );
	}
	
	/**
	 * Prints details about the orphaned action logs and includes information on where to learn more.
	 */
	public static function print_admin_notice() {
		$next_cleanup_message        = '';
		$next_scheduled_cleanup_hook = as_next_scheduled_action( self::$cleanup_hook );

		if ( $next_scheduled_cleanup_hook ) {
			/* translators: %s: date interval */
			$next_cleanup_message = sprintf( __( 'This data will be deleted in %s.', 'action-scheduler' ), human_time_diff( gmdate( 'U' ), $next_scheduled_cleanup_hook ) );
		}

		$notice = sprintf(
			/* translators: 1: next cleanup message 2: github issue URL */
			__( 'Action Scheduler has migrated data to custom tables; however, orphaned log entries exist in the WordPress Comments table. %1$s <a href="%2$s">Learn more &raquo;</a>', 'action-scheduler' ),
			$next_cleanup_message,
			'https://github.com/woocommerce/action-scheduler/issues/368'
		);

		echo '<div class="notice notice-warning"><p>' . wp_kses_post( $notice ) . '</p></div>';
	}
}
ActionScheduler_DBLogger.php                                                                                                                                                                                                                                   4484          1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/data-stores                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

/**
 * Class ActionScheduler_DBLogger
 *
 * Action logs data table data store.
 *
 * @since 3.0.0
 */
class ActionScheduler_DBLogger extends ActionScheduler_Logger {

	/**
	 * Add a record to an action log.
	 *
	 * @param int      $action_id Action ID.
	 * @param string   $message Message to be saved in the log entry.
	 * @param DateTime $date Timestamp of the log entry.
	 *
	 * @return int     The log entry ID.
	 */
	public function log( $action_id, $message, DateTime $date = null ) {
		if ( empty( $date ) ) {
			$date = as_get_datetime_object();
		} else {
			$date = clone $date;
		}

		$date_gmt = $date->format( 'Y-m-d H:i:s' );
		ActionScheduler_TimezoneHelper::set_local_timezone( $date );
		$date_local = $date->format( 'Y-m-d H:i:s' );

		/** @var \wpdb $wpdb */ //phpcs:ignore Generic.Commenting.DocComment.MissingShort
		global $wpdb;
		$wpdb->insert(
			$wpdb->actionscheduler_logs,
			array(
				'action_id'      => $action_id,
				'message'        => $message,
				'log_date_gmt'   => $date_gmt,
				'log_date_local' => $date_local,
			),
			array( '%d', '%s', '%s', '%s' )
		);

		return $wpdb->insert_id;
	}

	/**
	 * Retrieve an action log entry.
	 *
	 * @param int $entry_id Log entry ID.
	 *
	 * @return ActionScheduler_LogEntry
	 */
	public function get_entry( $entry_id ) {
		/** @var \wpdb $wpdb */ //phpcs:ignore Generic.Commenting.DocComment.MissingShort
		global $wpdb;
		$entry = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->actionscheduler_logs} WHERE log_id=%d", $entry_id ) );

		return $this->create_entry_from_db_record( $entry );
	}

	/**
	 * Create an action log entry from a database record.
	 *
	 * @param object $record Log entry database record object.
	 *
	 * @return ActionScheduler_LogEntry
	 */
	private function create_entry_from_db_record( $record ) {
		if ( empty( $record ) ) {
			return new ActionScheduler_NullLogEntry();
		}

		if ( is_null( $record->log_date_gmt ) ) {
			$date = as_get_datetime_object( ActionScheduler_StoreSchema::DEFAULT_DATE );
		} else {
			$date = as_get_datetime_object( $record->log_date_gmt );
		}

		return new ActionScheduler_LogEntry( $record->action_id, $record->message, $date );
	}

	/**
	 * Retrieve the an action's log entries from the database.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return ActionScheduler_LogEntry[]
	 */
	public function get_logs( $action_id ) {
		/** @var \wpdb $wpdb */ //phpcs:ignore Generic.Commenting.DocComment.MissingShort
		global $wpdb;

		$records = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM {$wpdb->actionscheduler_logs} WHERE action_id=%d", $action_id ) );

		return array_map( array( $this, 'create_entry_from_db_record' ), $records );
	}

	/**
	 * Initialize the data store.
	 *
	 * @codeCoverageIgnore
	 */
	public function init() {
		$table_maker = new ActionScheduler_LoggerSchema();
		$table_maker->init();
		$table_maker->register_tables();

		parent::init();

		add_action( 'action_scheduler_deleted_action', array( $this, 'clear_deleted_action_logs' ), 10, 1 );
	}

	/**
	 * Delete the action logs for an action.
	 *
	 * @param int $action_id Action ID.
	 */
	public function clear_deleted_action_logs( $action_id ) {
		/** @var \wpdb $wpdb */ //phpcs:ignore Generic.Commenting.DocComment.MissingShort
		global $wpdb;
		$wpdb->delete( $wpdb->actionscheduler_logs, array( 'action_id' => $action_id ), array( '%d' ) );
	}

	/**
	 * Bulk add cancel action log entries.
	 *
	 * @param array $action_ids List of action ID.
	 */
	public function bulk_log_cancel_actions( $action_ids ) {
		if ( empty( $action_ids ) ) {
			return;
		}

		/** @var \wpdb $wpdb */ //phpcs:ignore Generic.Commenting.DocComment.MissingShort
		global $wpdb;
		$date     = as_get_datetime_object();
		$date_gmt = $date->format( 'Y-m-d H:i:s' );
		ActionScheduler_TimezoneHelper::set_local_timezone( $date );
		$date_local = $date->format( 'Y-m-d H:i:s' );
		$message    = __( 'action canceled', 'action-scheduler' );
		$format     = '(%d, ' . $wpdb->prepare( '%s, %s, %s', $message, $date_gmt, $date_local ) . ')';
		$sql_query  = "INSERT {$wpdb->actionscheduler_logs} (action_id, message, log_date_gmt, log_date_local) VALUES ";
		$value_rows = array();

		foreach ( $action_ids as $action_id ) {
			$value_rows[] = $wpdb->prepare( $format, $action_id ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		}
		$sql_query .= implode( ',', $value_rows );

		$wpdb->query( $sql_query ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
	}
}
ActionScheduler_DBStore.php                                                                                                                                                                                                                                    35384         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/data-stores                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

/**
 * Class ActionScheduler_DBStore
 *
 * Action data table data store.
 *
 * @since 3.0.0
 */
class ActionScheduler_DBStore extends ActionScheduler_Store {

	/**
	 * Used to share information about the before_date property of claims internally.
	 *
	 * This is used in preference to passing the same information as a method param
	 * for backwards-compatibility reasons.
	 *
	 * @var DateTime|null
	 */
	private $claim_before_date = null;

	/** @var int */
	protected static $max_args_length = 8000;

	/** @var int */
	protected static $max_index_length = 191;

	/**
	 * Initialize the data store
	 *
	 * @codeCoverageIgnore
	 */
	public function init() {
		$table_maker = new ActionScheduler_StoreSchema();
		$table_maker->init();
		$table_maker->register_tables();
	}

	/**
	 * Save an action, checks if this is a unique action before actually saving.
	 *
	 * @param ActionScheduler_Action $action         Action object.
	 * @param \DateTime              $scheduled_date Optional schedule date. Default null.
	 *
	 * @return int                  Action ID.
	 * @throws RuntimeException     Throws exception when saving the action fails.
	 */
	public function save_unique_action( ActionScheduler_Action $action, \DateTime $scheduled_date = null ) {
		return $this->save_action_to_db( $action, $scheduled_date, true );
	}

	/**
	 * Save an action. Can save duplicate action as well, prefer using `save_unique_action` instead.
	 *
	 * @param ActionScheduler_Action $action Action object.
	 * @param \DateTime              $scheduled_date Optional schedule date. Default null.
	 *
	 * @return int Action ID.
	 * @throws RuntimeException     Throws exception when saving the action fails.
	 */
	public function save_action( ActionScheduler_Action $action, \DateTime $scheduled_date = null ) {
		return $this->save_action_to_db( $action, $scheduled_date, false );
	}

	/**
	 * Save an action.
	 *
	 * @param ActionScheduler_Action $action Action object.
	 * @param ?DateTime              $date Optional schedule date. Default null.
	 * @param bool                   $unique Whether the action should be unique.
	 *
	 * @return int Action ID.
	 * @throws RuntimeException     Throws exception when saving the action fails.
	 */
	private function save_action_to_db( ActionScheduler_Action $action, DateTime $date = null, $unique = false ) {
		global $wpdb;

		try {
			$this->validate_action( $action );

			$data = array(
				'hook'                 => $action->get_hook(),
				'status'               => ( $action->is_finished() ? self::STATUS_COMPLETE : self::STATUS_PENDING ),
				'scheduled_date_gmt'   => $this->get_scheduled_date_string( $action, $date ),
				'scheduled_date_local' => $this->get_scheduled_date_string_local( $action, $date ),
				'schedule'             => serialize( $action->get_schedule() ), // phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_serialize
				'group_id'             => $this->get_group_id( $action->get_group() ),
			);

			$args = wp_json_encode( $action->get_args() );
			if ( strlen( $args ) <= static::$max_index_length ) {
				$data['args'] = $args;
			} else {
				$data['args']          = $this->hash_args( $args );
				$data['extended_args'] = $args;
			}

			$insert_sql = $this->build_insert_sql( $data, $unique );

			// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared -- $insert_sql should be already prepared.
			$wpdb->query( $insert_sql );
			$action_id = $wpdb->insert_id;

			if ( is_wp_error( $action_id ) ) {
				throw new \RuntimeException( $action_id->get_error_message() );
			} elseif ( empty( $action_id ) ) {
				if ( $unique ) {
					return 0;
				}
				throw new \RuntimeException( $wpdb->last_error ? $wpdb->last_error : __( 'Database error.', 'action-scheduler' ) );
			}

			do_action( 'action_scheduler_stored_action', $action_id );

			return $action_id;
		} catch ( \Exception $e ) {
			/* translators: %s: error message */
			throw new \RuntimeException( sprintf( __( 'Error saving action: %s', 'action-scheduler' ), $e->getMessage() ), 0 );
		}
	}

	/**
	 * Helper function to build insert query.
	 *
	 * @param array $data Row data for action.
	 * @param bool  $unique Whether the action should be unique.
	 *
	 * @return string Insert query.
	 */
	private function build_insert_sql( array $data, $unique ) {
		global $wpdb;
		$columns      = array_keys( $data );
		$values       = array_values( $data );
		$placeholders = array_map( array( $this, 'get_placeholder_for_column' ), $columns );

		$table_name = ! empty( $wpdb->actionscheduler_actions ) ? $wpdb->actionscheduler_actions : $wpdb->prefix . 'actionscheduler_actions';

		$column_sql      = '`' . implode( '`, `', $columns ) . '`';
		$placeholder_sql = implode( ', ', $placeholders );
		$where_clause    = $this->build_where_clause_for_insert( $data, $table_name, $unique );
		// phpcs:disable WordPress.DB.PreparedSQL.NotPrepared, WordPress.DB.PreparedSQL.InterpolatedNotPrepared -- $column_sql and $where_clause are already prepared. $placeholder_sql is hardcoded.
		$insert_query    = $wpdb->prepare(
			"
INSERT INTO $table_name ( $column_sql )
SELECT $placeholder_sql FROM DUAL
WHERE ( $where_clause ) IS NULL",
			$values
		);
		// phpcs:enable

		return $insert_query;
	}

	/**
	 * Helper method to build where clause for action insert statement.
	 *
	 * @param array  $data Row data for action.
	 * @param string $table_name Action table name.
	 * @param bool   $unique Where action should be unique.
	 *
	 * @return string Where clause to be used with insert.
	 */
	private function build_where_clause_for_insert( $data, $table_name, $unique ) {
		global $wpdb;

		if ( ! $unique ) {
			return 'SELECT NULL FROM DUAL';
		}

		$pending_statuses            = array(
			ActionScheduler_Store::STATUS_PENDING,
			ActionScheduler_Store::STATUS_RUNNING,
		);
		$pending_status_placeholders = implode( ', ', array_fill( 0, count( $pending_statuses ), '%s' ) );
		// phpcs:disable WordPress.DB.PreparedSQL.NotPrepared, WordPress.DB.PreparedSQL.InterpolatedNotPrepared -- $pending_status_placeholders is hardcoded.
		$where_clause = $wpdb->prepare(
			"
SELECT action_id FROM $table_name
WHERE status IN ( $pending_status_placeholders )
AND hook = %s
AND `group_id` = %d
",
			array_merge(
				$pending_statuses,
				array(
					$data['hook'],
					$data['group_id'],
				)
			)
		);
		// phpcs:enable

		return "$where_clause" . ' LIMIT 1';
	}

	/**
	 * Helper method to get $wpdb->prepare placeholder for a given column name.
	 *
	 * @param string $column_name Name of column in actions table.
	 *
	 * @return string Placeholder to use for given column.
	 */
	private function get_placeholder_for_column( $column_name ) {
		$string_columns = array(
			'hook',
			'status',
			'scheduled_date_gmt',
			'scheduled_date_local',
			'args',
			'schedule',
			'last_attempt_gmt',
			'last_attempt_local',
			'extended_args',
		);

		return in_array( $column_name, $string_columns ) ? '%s' : '%d';
	}

	/**
	 * Generate a hash from json_encoded $args using MD5 as this isn't for security.
	 *
	 * @param string $args JSON encoded action args.
	 * @return string
	 */
	protected function hash_args( $args ) {
		return md5( $args );
	}

	/**
	 * Get action args query param value from action args.
	 *
	 * @param array $args Action args.
	 * @return string
	 */
	protected function get_args_for_query( $args ) {
		$encoded = wp_json_encode( $args );
		if ( strlen( $encoded ) <= static::$max_index_length ) {
			return $encoded;
		}
		return $this->hash_args( $encoded );
	}
	/**
	 * Get a group's ID based on its name/slug.
	 *
	 * @param string $slug The string name of a group.
	 * @param bool   $create_if_not_exists Whether to create the group if it does not already exist. Default, true - create the group.
	 *
	 * @return int The group's ID, if it exists or is created, or 0 if it does not exist and is not created.
	 */
	protected function get_group_id( $slug, $create_if_not_exists = true ) {
		if ( empty( $slug ) ) {
			return 0;
		}
		/** @var \wpdb $wpdb */
		global $wpdb;
		$group_id = (int) $wpdb->get_var( $wpdb->prepare( "SELECT group_id FROM {$wpdb->actionscheduler_groups} WHERE slug=%s", $slug ) );
		if ( empty( $group_id ) && $create_if_not_exists ) {
			$group_id = $this->create_group( $slug );
		}

		return $group_id;
	}

	/**
	 * Create an action group.
	 *
	 * @param string $slug Group slug.
	 *
	 * @return int Group ID.
	 */
	protected function create_group( $slug ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$wpdb->insert( $wpdb->actionscheduler_groups, array( 'slug' => $slug ) );

		return (int) $wpdb->insert_id;
	}

	/**
	 * Retrieve an action.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return ActionScheduler_Action
	 */
	public function fetch_action( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$data = $wpdb->get_row(
			$wpdb->prepare(
				"SELECT a.*, g.slug AS `group` FROM {$wpdb->actionscheduler_actions} a LEFT JOIN {$wpdb->actionscheduler_groups} g ON a.group_id=g.group_id WHERE a.action_id=%d",
				$action_id
			)
		);

		if ( empty( $data ) ) {
			return $this->get_null_action();
		}

		if ( ! empty( $data->extended_args ) ) {
			$data->args = $data->extended_args;
			unset( $data->extended_args );
		}

		// Convert NULL dates to zero dates.
		$date_fields = array(
			'scheduled_date_gmt',
			'scheduled_date_local',
			'last_attempt_gmt',
			'last_attempt_gmt',
		);
		foreach ( $date_fields as $date_field ) {
			if ( is_null( $data->$date_field ) ) {
				$data->$date_field = ActionScheduler_StoreSchema::DEFAULT_DATE;
			}
		}

		try {
			$action = $this->make_action_from_db_record( $data );
		} catch ( ActionScheduler_InvalidActionException $exception ) {
			do_action( 'action_scheduler_failed_fetch_action', $action_id, $exception );
			return $this->get_null_action();
		}

		return $action;
	}

	/**
	 * Create a null action.
	 *
	 * @return ActionScheduler_NullAction
	 */
	protected function get_null_action() {
		return new ActionScheduler_NullAction();
	}

	/**
	 * Create an action from a database record.
	 *
	 * @param object $data Action database record.
	 *
	 * @return ActionScheduler_Action|ActionScheduler_CanceledAction|ActionScheduler_FinishedAction
	 */
	protected function make_action_from_db_record( $data ) {

		$hook     = $data->hook;
		$args     = json_decode( $data->args, true );
		$schedule = unserialize( $data->schedule ); // phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_unserialize

		$this->validate_args( $args, $data->action_id );
		$this->validate_schedule( $schedule, $data->action_id );

		if ( empty( $schedule ) ) {
			$schedule = new ActionScheduler_NullSchedule();
		}
		$group = $data->group ? $data->group : '';

		return ActionScheduler::factory()->get_stored_action( $data->status, $data->hook, $args, $schedule, $group );
	}

	/**
	 * Returns the SQL statement to query (or count) actions.
	 *
	 * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
	 *
	 * @param array  $query Filtering options.
	 * @param string $select_or_count  Whether the SQL should select and return the IDs or just the row count.
	 *
	 * @return string SQL statement already properly escaped.
	 * @throws InvalidArgumentException If the query is invalid.
	 */
	protected function get_query_actions_sql( array $query, $select_or_count = 'select' ) {

		if ( ! in_array( $select_or_count, array( 'select', 'count' ), true ) ) {
			throw new InvalidArgumentException( __( 'Invalid value for select or count parameter. Cannot query actions.', 'action-scheduler' ) );
		}

		$query = wp_parse_args( $query, array(
			'hook'                  => '',
			'args'                  => null,
			'partial_args_matching' => 'off', // can be 'like' or 'json'
			'date'                  => null,
			'date_compare'          => '<=',
			'modified'              => null,
			'modified_compare'      => '<=',
			'group'                 => '',
			'status'                => '',
			'claimed'               => null,
			'per_page'              => 5,
			'offset'                => 0,
			'orderby'               => 'date',
			'order'                 => 'ASC',
		 ) );

		/** @var \wpdb $wpdb */
		global $wpdb;

		$db_server_info = is_callable( array( $wpdb, 'db_server_info' ) ) ? $wpdb->db_server_info() : $wpdb->db_version();
		if ( false !== strpos( $db_server_info, 'MariaDB' ) ) {
			$supports_json = version_compare(
				PHP_VERSION_ID >= 80016 ? $wpdb->db_version() : preg_replace( '/[^0-9.].*/', '', str_replace( '5.5.5-', '', $db_server_info ) ),
				'10.2',
				'>='
			);
		} else {
			$supports_json = version_compare( $wpdb->db_version(), '5.7', '>=' );
		}

		$sql        = ( 'count' === $select_or_count ) ? 'SELECT count(a.action_id)' : 'SELECT a.action_id';
		$sql        .= " FROM {$wpdb->actionscheduler_actions} a";
		$sql_params = array();

		if ( ! empty( $query['group'] ) || 'group' === $query['orderby'] ) {
			$sql .= " LEFT JOIN {$wpdb->actionscheduler_groups} g ON g.group_id=a.group_id";
		}

		$sql .= " WHERE 1=1";

		if ( ! empty( $query['group'] ) ) {
			$sql          .= " AND g.slug=%s";
			$sql_params[] = $query['group'];
		}

		if ( ! empty( $query['hook'] ) ) {
			$sql          .= " AND a.hook=%s";
			$sql_params[] = $query['hook'];
		}

		if ( ! is_null( $query['args'] ) ) {
			switch ( $query['partial_args_matching'] ) {
				case 'json':
					if ( ! $supports_json ) {
						throw new \RuntimeException( __( 'JSON partial matching not supported in your environment. Please check your MySQL/MariaDB version.', 'action-scheduler' ) );
					}
					$supported_types = array(
						'integer' => '%d',
						'boolean' => '%s',
						'double'  => '%f',
						'string'  => '%s',
					);
					foreach ( $query['args'] as $key => $value ) {
						$value_type = gettype( $value );
						if ( 'boolean' === $value_type ) {
							$value = $value ? 'true' : 'false';
						}
						$placeholder = isset( $supported_types[ $value_type ] ) ? $supported_types[ $value_type ] : false;
						if ( ! $placeholder ) {
							throw new \RuntimeException( sprintf(
								/* translators: %s: provided value type */
								__( 'The value type for the JSON partial matching is not supported. Must be either integer, boolean, double or string. %s type provided.', 'action-scheduler' ),
								$value_type
							) );
						}
						$sql          .= ' AND JSON_EXTRACT(a.args, %s)='.$placeholder;
						$sql_params[] = '$.'.$key;
						$sql_params[] = $value;
					}
					break;
				case 'like':
					foreach ( $query['args'] as $key => $value ) {
						$sql          .= ' AND a.args LIKE %s';
						$json_partial = $wpdb->esc_like( trim( json_encode( array( $key => $value ) ), '{}' ) );
						$sql_params[] = "%{$json_partial}%";
					}
					break;
				case 'off':
					$sql          .= " AND a.args=%s";
					$sql_params[] = $this->get_args_for_query( $query['args'] );
					break;
				default:
					throw new \RuntimeException( __( 'Unknown partial args matching value.', 'action-scheduler' ) );
			}
		}

		if ( $query['status'] ) {
			$statuses     = (array) $query['status'];
			$placeholders = array_fill( 0, count( $statuses ), '%s' );
			$sql         .= ' AND a.status IN (' . join( ', ', $placeholders ) . ')';
			$sql_params   = array_merge( $sql_params, array_values( $statuses ) );
		}

		if ( $query['date'] instanceof \DateTime ) {
			$date = clone $query['date'];
			$date->setTimezone( new \DateTimeZone( 'UTC' ) );
			$date_string  = $date->format( 'Y-m-d H:i:s' );
			$comparator   = $this->validate_sql_comparator( $query['date_compare'] );
			$sql         .= " AND a.scheduled_date_gmt $comparator %s";
			$sql_params[] = $date_string;
		}

		if ( $query['modified'] instanceof \DateTime ) {
			$modified = clone $query['modified'];
			$modified->setTimezone( new \DateTimeZone( 'UTC' ) );
			$date_string  = $modified->format( 'Y-m-d H:i:s' );
			$comparator   = $this->validate_sql_comparator( $query['modified_compare'] );
			$sql         .= " AND a.last_attempt_gmt $comparator %s";
			$sql_params[] = $date_string;
		}

		if ( true === $query['claimed'] ) {
			$sql .= ' AND a.claim_id != 0';
		} elseif ( false === $query['claimed'] ) {
			$sql .= ' AND a.claim_id = 0';
		} elseif ( ! is_null( $query['claimed'] ) ) {
			$sql         .= ' AND a.claim_id = %d';
			$sql_params[] = $query['claimed'];
		}

		if ( ! empty( $query['search'] ) ) {
			$sql .= ' AND (a.hook LIKE %s OR (a.extended_args IS NULL AND a.args LIKE %s) OR a.extended_args LIKE %s';
			for ( $i = 0; $i < 3; $i++ ) {
				$sql_params[] = sprintf( '%%%s%%', $query['search'] );
			}

			$search_claim_id = (int) $query['search'];
			if ( $search_claim_id ) {
				$sql         .= ' OR a.claim_id = %d';
				$sql_params[] = $search_claim_id;
			}

			$sql .= ')';
		}

		if ( 'select' === $select_or_count ) {
			if ( 'ASC' === strtoupper( $query['order'] ) ) {
				$order = 'ASC';
			} else {
				$order = 'DESC';
			}
			switch ( $query['orderby'] ) {
				case 'hook':
					$sql .= " ORDER BY a.hook $order";
					break;
				case 'group':
					$sql .= " ORDER BY g.slug $order";
					break;
				case 'modified':
					$sql .= " ORDER BY a.last_attempt_gmt $order";
					break;
				case 'none':
					break;
				case 'action_id':
					$sql .= " ORDER BY a.action_id $order";
					break;
				case 'date':
				default:
					$sql .= " ORDER BY a.scheduled_date_gmt $order";
					break;
			}

			if ( $query['per_page'] > 0 ) {
				$sql         .= ' LIMIT %d, %d';
				$sql_params[] = $query['offset'];
				$sql_params[] = $query['per_page'];
			}
		}

		if ( ! empty( $sql_params ) ) {
			$sql = $wpdb->prepare( $sql, $sql_params ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		}

		return $sql;
	}

	/**
	 * Query for action count or list of action IDs.
	 *
	 * @since 3.3.0 $query['status'] accepts array of statuses instead of a single status.
	 *
	 * @see ActionScheduler_Store::query_actions for $query arg usage.
	 *
	 * @param array  $query      Query filtering options.
	 * @param string $query_type Whether to select or count the results. Defaults to select.
	 *
	 * @return string|array|null The IDs of actions matching the query. Null on failure.
	 */
	public function query_actions( $query = array(), $query_type = 'select' ) {
		/** @var wpdb $wpdb */
		global $wpdb;

		$sql = $this->get_query_actions_sql( $query, $query_type );

		return ( 'count' === $query_type ) ? $wpdb->get_var( $sql ) : $wpdb->get_col( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared, WordPress.DB.DirectDatabaseQuery.NoSql, WordPress.DB.DirectDatabaseQuery.NoCaching
	}

	/**
	 * Get a count of all actions in the store, grouped by status.
	 *
	 * @return array Set of 'status' => int $count pairs for statuses with 1 or more actions of that status.
	 */
	public function action_counts() {
		global $wpdb;

		$sql  = "SELECT a.status, count(a.status) as 'count'";
		$sql .= " FROM {$wpdb->actionscheduler_actions} a";
		$sql .= ' GROUP BY a.status';

		$actions_count_by_status = array();
		$action_stati_and_labels = $this->get_status_labels();

		foreach ( $wpdb->get_results( $sql ) as $action_data ) { // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
			// Ignore any actions with invalid status.
			if ( array_key_exists( $action_data->status, $action_stati_and_labels ) ) {
				$actions_count_by_status[ $action_data->status ] = $action_data->count;
			}
		}

		return $actions_count_by_status;
	}

	/**
	 * Cancel an action.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return void
	 * @throws \InvalidArgumentException If the action update failed.
	 */
	public function cancel_action( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		$updated = $wpdb->update(
			$wpdb->actionscheduler_actions,
			array( 'status' => self::STATUS_CANCELED ),
			array( 'action_id' => $action_id ),
			array( '%s' ),
			array( '%d' )
		);
		if ( false === $updated ) {
			/* translators: %s: action ID */
			throw new \InvalidArgumentException( sprintf( __( 'Unidentified action %s', 'action-scheduler' ), $action_id ) );
		}
		do_action( 'action_scheduler_canceled_action', $action_id );
	}

	/**
	 * Cancel pending actions by hook.
	 *
	 * @since 3.0.0
	 *
	 * @param string $hook Hook name.
	 *
	 * @return void
	 */
	public function cancel_actions_by_hook( $hook ) {
		$this->bulk_cancel_actions( array( 'hook' => $hook ) );
	}

	/**
	 * Cancel pending actions by group.
	 *
	 * @param string $group Group slug.
	 *
	 * @return void
	 */
	public function cancel_actions_by_group( $group ) {
		$this->bulk_cancel_actions( array( 'group' => $group ) );
	}

	/**
	 * Bulk cancel actions.
	 *
	 * @since 3.0.0
	 *
	 * @param array $query_args Query parameters.
	 */
	protected function bulk_cancel_actions( $query_args ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		if ( ! is_array( $query_args ) ) {
			return;
		}

		// Don't cancel actions that are already canceled.
		if ( isset( $query_args['status'] ) && self::STATUS_CANCELED === $query_args['status'] ) {
			return;
		}

		$action_ids = true;
		$query_args = wp_parse_args(
			$query_args,
			array(
				'per_page' => 1000,
				'status'   => self::STATUS_PENDING,
				'orderby'  => 'action_id',
			)
		);

		while ( $action_ids ) {
			$action_ids = $this->query_actions( $query_args );
			if ( empty( $action_ids ) ) {
				break;
			}

			$format     = array_fill( 0, count( $action_ids ), '%d' );
			$query_in   = '(' . implode( ',', $format ) . ')';
			$parameters = $action_ids;
			array_unshift( $parameters, self::STATUS_CANCELED );

			$wpdb->query(
				$wpdb->prepare(
					"UPDATE {$wpdb->actionscheduler_actions} SET status = %s WHERE action_id IN {$query_in}", // phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
					$parameters
				)
			);

			do_action( 'action_scheduler_bulk_cancel_actions', $action_ids );
		}
	}

	/**
	 * Delete an action.
	 *
	 * @param int $action_id Action ID.
	 * @throws \InvalidArgumentException If the action deletion failed.
	 */
	public function delete_action( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$deleted = $wpdb->delete( $wpdb->actionscheduler_actions, array( 'action_id' => $action_id ), array( '%d' ) );
		if ( empty( $deleted ) ) {
			throw new \InvalidArgumentException( sprintf( __( 'Unidentified action %s', 'action-scheduler' ), $action_id ) ); //phpcs:ignore WordPress.WP.I18n.MissingTranslatorsComment
		}
		do_action( 'action_scheduler_deleted_action', $action_id );
	}

	/**
	 * Get the schedule date for an action.
	 *
	 * @param string $action_id Action ID.
	 *
	 * @return \DateTime The local date the action is scheduled to run, or the date that it ran.
	 */
	public function get_date( $action_id ) {
		$date = $this->get_date_gmt( $action_id );
		ActionScheduler_TimezoneHelper::set_local_timezone( $date );
		return $date;
	}

	/**
	 * Get the GMT schedule date for an action.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @throws \InvalidArgumentException If action cannot be identified.
	 * @return \DateTime The GMT date the action is scheduled to run, or the date that it ran.
	 */
	protected function get_date_gmt( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$record = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->actionscheduler_actions} WHERE action_id=%d", $action_id ) );
		if ( empty( $record ) ) {
			throw new \InvalidArgumentException( sprintf( __( 'Unidentified action %s', 'action-scheduler' ), $action_id ) ); //phpcs:ignore WordPress.WP.I18n.MissingTranslatorsComment
		}
		if ( self::STATUS_PENDING === $record->status ) {
			return as_get_datetime_object( $record->scheduled_date_gmt );
		} else {
			return as_get_datetime_object( $record->last_attempt_gmt );
		}
	}

	/**
	 * Stake a claim on actions.
	 *
	 * @param int       $max_actions Maximum number of action to include in claim.
	 * @param \DateTime $before_date Jobs must be schedule before this date. Defaults to now.
	 * @param array     $hooks Hooks to filter for.
	 * @param string    $group Group to filter for.
	 *
	 * @return ActionScheduler_ActionClaim
	 */
	public function stake_claim( $max_actions = 10, \DateTime $before_date = null, $hooks = array(), $group = '' ) {
		$claim_id = $this->generate_claim_id();

		$this->claim_before_date = $before_date;
		$this->claim_actions( $claim_id, $max_actions, $before_date, $hooks, $group );
		$action_ids              = $this->find_actions_by_claim_id( $claim_id );
		$this->claim_before_date = null;

		return new ActionScheduler_ActionClaim( $claim_id, $action_ids );
	}

	/**
	 * Generate a new action claim.
	 *
	 * @return int Claim ID.
	 */
	protected function generate_claim_id() {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$now = as_get_datetime_object();
		$wpdb->insert( $wpdb->actionscheduler_claims, array( 'date_created_gmt' => $now->format( 'Y-m-d H:i:s' ) ) );

		return $wpdb->insert_id;
	}

	/**
	 * Mark actions claimed.
	 *
	 * @param string    $claim_id Claim Id.
	 * @param int       $limit Number of action to include in claim.
	 * @param \DateTime $before_date Should use UTC timezone.
	 * @param array     $hooks Hooks to filter for.
	 * @param string    $group Group to filter for.
	 *
	 * @return int The number of actions that were claimed.
	 * @throws \InvalidArgumentException Throws InvalidArgumentException if group doesn't exist.
	 * @throws \RuntimeException Throws RuntimeException if unable to claim action.
	 */
	protected function claim_actions( $claim_id, $limit, \DateTime $before_date = null, $hooks = array(), $group = '' ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		$now  = as_get_datetime_object();
		$date = is_null( $before_date ) ? $now : clone $before_date;

		// can't use $wpdb->update() because of the <= condition.
		$update = "UPDATE {$wpdb->actionscheduler_actions} SET claim_id=%d, last_attempt_gmt=%s, last_attempt_local=%s";
		$params = array(
			$claim_id,
			$now->format( 'Y-m-d H:i:s' ),
			current_time( 'mysql' ),
		);

		$where    = 'WHERE claim_id = 0 AND scheduled_date_gmt <= %s AND status=%s';
		$params[] = $date->format( 'Y-m-d H:i:s' );
		$params[] = self::STATUS_PENDING;

		if ( ! empty( $hooks ) ) {
			$placeholders = array_fill( 0, count( $hooks ), '%s' );
			$where        .= ' AND hook IN (' . join( ', ', $placeholders ) . ')';
			$params       = array_merge( $params, array_values( $hooks ) );
		}

		if ( ! empty( $group ) ) {

			$group_id = $this->get_group_id( $group, false );

			// throw exception if no matching group found, this matches ActionScheduler_wpPostStore's behaviour.
			if ( empty( $group_id ) ) {
				/* translators: %s: group name */
				throw new InvalidArgumentException( sprintf( __( 'The group "%s" does not exist.', 'action-scheduler' ), $group ) );
			}

			$where    .= ' AND group_id = %d';
			$params[] = $group_id;
		}

		/**
		 * Sets the order-by clause used in the action claim query.
		 *
		 * @since 3.4.0
		 *
		 * @param string $order_by_sql
		 */
		$order    = apply_filters( 'action_scheduler_claim_actions_order_by', 'ORDER BY attempts ASC, scheduled_date_gmt ASC, action_id ASC' );
		$params[] = $limit;

		$sql           = $wpdb->prepare( "{$update} {$where} {$order} LIMIT %d", $params ); // phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared, WordPress.DB.PreparedSQLPlaceholders
		$rows_affected = $wpdb->query( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared, WordPress.DB.DirectDatabaseQuery.DirectQuery, WordPress.DB.DirectDatabaseQuery.NoCaching
		if ( false === $rows_affected ) {
			throw new \RuntimeException( __( 'Unable to claim actions. Database error.', 'action-scheduler' ) );
		}

		return (int) $rows_affected;
	}

	/**
	 * Get the number of active claims.
	 *
	 * @return int
	 */
	public function get_claim_count() {
		global $wpdb;

		$sql = "SELECT COUNT(DISTINCT claim_id) FROM {$wpdb->actionscheduler_actions} WHERE claim_id != 0 AND status IN ( %s, %s)";
		$sql = $wpdb->prepare( $sql, array( self::STATUS_PENDING, self::STATUS_RUNNING ) ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared

		return (int) $wpdb->get_var( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
	}

	/**
	 * Return an action's claim ID, as stored in the claim_id column.
	 *
	 * @param string $action_id Action ID.
	 * @return mixed
	 */
	public function get_claim_id( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		$sql = "SELECT claim_id FROM {$wpdb->actionscheduler_actions} WHERE action_id=%d";
		$sql = $wpdb->prepare( $sql, $action_id ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared

		return (int) $wpdb->get_var( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
	}

	/**
	 * Retrieve the action IDs of action in a claim.
	 *
	 * @param  int $claim_id Claim ID.
	 * @return int[]
	 */
	public function find_actions_by_claim_id( $claim_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		$action_ids  = array();
		$before_date = isset( $this->claim_before_date ) ? $this->claim_before_date : as_get_datetime_object();
		$cut_off     = $before_date->format( 'Y-m-d H:i:s' );

		$sql = $wpdb->prepare(
			"SELECT action_id, scheduled_date_gmt FROM {$wpdb->actionscheduler_actions} WHERE claim_id = %d",
			$claim_id
		);

		// Verify that the scheduled date for each action is within the expected bounds (in some unusual
		// cases, we cannot depend on MySQL to honor all of the WHERE conditions we specify).
		foreach ( $wpdb->get_results( $sql ) as $claimed_action ) { // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
			if ( $claimed_action->scheduled_date_gmt <= $cut_off ) {
				$action_ids[] = absint( $claimed_action->action_id );
			}
		}

		return $action_ids;
	}

	/**
	 * Release actions from a claim and delete the claim.
	 *
	 * @param ActionScheduler_ActionClaim $claim Claim object.
	 */
	public function release_claim( ActionScheduler_ActionClaim $claim ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		/**
		 * Deadlock warning: This function modifies actions to release them from claims that have been processed. Earlier, we used to it in a atomic query, i.e. we would update all actions belonging to a particular claim_id with claim_id = 0.
		 * While this was functionally correct, it would cause deadlock, since this update query will hold a lock on the claim_id_.. index on the action table.
		 * This allowed the possibility of a race condition, where the claimer query is also running at the same time, then the claimer query will also try to acquire a lock on the claim_id_.. index, and in this case if claim release query has already progressed to the point of acquiring the lock, but have not updated yet, it would cause a deadlock.
		 *
		 * We resolve this by getting all the actions_id that we want to release claim from in a separate query, and then releasing the claim on each of them. This way, our lock is acquired on the action_id index instead of the claim_id index. Note that the lock on claim_id will still be acquired, but it will only when we actually make the update, rather than when we select the actions.
		 */
		$action_ids = $wpdb->get_col( $wpdb->prepare( "SELECT action_id FROM {$wpdb->actionscheduler_actions} WHERE claim_id = %d", $claim->get_id() ) );

		$row_updates = 0;
		if ( count( $action_ids ) > 0 ) {
			$action_id_string = implode( ',', array_map( 'absint', $action_ids ) );
			$row_updates = $wpdb->query( "UPDATE {$wpdb->actionscheduler_actions} SET claim_id = 0 WHERE action_id IN ({$action_id_string})" ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		}

		$wpdb->delete( $wpdb->actionscheduler_claims, array( 'claim_id' => $claim->get_id() ), array( '%d' ) );

		if ( $row_updates < count( $action_ids ) ) {
			throw new RuntimeException(
				sprintf(
					__( 'Unable to release actions from claim id %d.', 'woocommerce' ),
					$claim->get_id()
				)
			);
		}
	}

	/**
	 * Remove the claim from an action.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return void
	 */
	public function unclaim_action( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$wpdb->update(
			$wpdb->actionscheduler_actions,
			array( 'claim_id' => 0 ),
			array( 'action_id' => $action_id ),
			array( '%s' ),
			array( '%d' )
		);
	}

	/**
	 * Mark an action as failed.
	 *
	 * @param int $action_id Action ID.
	 * @throws \InvalidArgumentException Throw an exception if action was not updated.
	 */
	public function mark_failure( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$updated = $wpdb->update(
			$wpdb->actionscheduler_actions,
			array( 'status' => self::STATUS_FAILED ),
			array( 'action_id' => $action_id ),
			array( '%s' ),
			array( '%d' )
		);
		if ( empty( $updated ) ) {
			throw new \InvalidArgumentException( sprintf( __( 'Unidentified action %s', 'action-scheduler' ), $action_id ) ); //phpcs:ignore WordPress.WP.I18n.MissingTranslatorsComment
		}
	}

	/**
	 * Add execution message to action log.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return void
	 */
	public function log_execution( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;

		$sql = "UPDATE {$wpdb->actionscheduler_actions} SET attempts = attempts+1, status=%s, last_attempt_gmt = %s, last_attempt_local = %s WHERE action_id = %d";
		$sql = $wpdb->prepare( $sql, self::STATUS_RUNNING, current_time( 'mysql', true ), current_time( 'mysql' ), $action_id ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		$wpdb->query( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
	}

	/**
	 * Mark an action as complete.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return void
	 * @throws \InvalidArgumentException Throw an exception if action was not updated.
	 */
	public function mark_complete( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$updated = $wpdb->update(
			$wpdb->actionscheduler_actions,
			array(
				'status'             => self::STATUS_COMPLETE,
				'last_attempt_gmt'   => current_time( 'mysql', true ),
				'last_attempt_local' => current_time( 'mysql' ),
			),
			array( 'action_id' => $action_id ),
			array( '%s' ),
			array( '%d' )
		);
		if ( empty( $updated ) ) {
			throw new \InvalidArgumentException( sprintf( __( 'Unidentified action %s', 'action-scheduler' ), $action_id ) ); //phpcs:ignore WordPress.WP.I18n.MissingTranslatorsComment
		}

		/**
		 * Fires after a scheduled action has been completed.
		 *
		 * @since 3.4.2
		 *
		 * @param int $action_id Action ID.
		 */
		do_action( 'action_scheduler_completed_action', $action_id );
	}

	/**
	 * Get an action's status.
	 *
	 * @param int $action_id Action ID.
	 *
	 * @return string
	 * @throws \InvalidArgumentException Throw an exception if not status was found for action_id.
	 * @throws \RuntimeException Throw an exception if action status could not be retrieved.
	 */
	public function get_status( $action_id ) {
		/** @var \wpdb $wpdb */
		global $wpdb;
		$sql    = "SELECT status FROM {$wpdb->actionscheduler_actions} WHERE action_id=%d";
		$sql    = $wpdb->prepare( $sql, $action_id ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
		$status = $wpdb->get_var( $sql ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared

		if ( null === $status ) {
			throw new \InvalidArgumentException( __( 'Invalid action ID. No status found.', 'action-scheduler' ) );
		} elseif ( empty( $status ) ) {
			throw new \RuntimeException( __( 'Unknown status found for action.', 'action-scheduler' ) );
		} else {
			return $status;
		}
	}
}
ActionScheduler_HybridStore.php                                                                                                                                                                                                                                12022         1711191352  plugins/mailchimp-for-woocommerce/includes/vendor/action-scheduler/classes/data-stores                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

use ActionScheduler_Store as Store;
use Action_Scheduler\Migration\Runner;
use Action_Scheduler\Migration\Config;
use Action_Scheduler\Migration\Controller;

/**
 * Class ActionScheduler_HybridStore
 *
 * A wrapper around multiple stores that fetches data from both.
 *
 * @since 3.0.0
 */
class ActionScheduler_HybridStore extends Store {
	const DEMARKATION_OPTION = 'action_scheduler_hybrid_store_demarkation';

	private $primary_store;
	private $secondary_store;
	private $migration_runner;

	/**
	 * @var int The dividing line between IDs of actions created
	 *          by the primary and secondary stores.
	 *
	 * Methods that accept an action ID will compare the ID against
	 * this to determine which store will contain that ID. In almost
	 * all cases, the ID should come from the primary store, but if
	 * client code is bypassing the API functions and fetching IDs
	 * from elsewhere, then there is a chance that an unmigrated ID
	 * might be requested.
	 */
	private $demarkation_id = 0;

	/**
	 * ActionScheduler_HybridStore constructor.
	 *
	 * @param Config $config Migration config object.
	 */
	public function __construct( Config $config = null ) {
		$this->demarkation_id = (int) get_option( self::DEMARKATION_OPTION, 0 );
		if ( empty( $config ) ) {
			$config = Controller::instance()->get_migration_config_object();
		}
		$this->primary_store    = $config->get_destination_store();
		$this->secondary_store  = $config->get_source_store();
		$this->migration_runner = new Runner( $config );
	}

	/**
	 * Initialize the table data store tables.
	 *
	 * @codeCoverageIgnore
	 */
	public function init() {
		add_action( 'action_scheduler/created_table', [ $this, 'set_autoincrement' ], 10, 2 );
		$this->primary_store->init();
		$this->secondary_store->init();
		remove_action( 'action_scheduler/created_table', [ $this, 'set_autoincrement' ], 10 );
	}

	/**
	 * When the actions table is created, set its autoincrement
	 * value to be one higher than the posts table to ensure that
	 * there are no ID collisions.
	 *
	 * @param string $table_name
	 * @param string $table_suffix
	 *
	 * @return void
	 * @codeCoverageIgnore
	 */
	public function set_autoincrement( $table_name, $table_suffix ) {
		if ( ActionScheduler_StoreSchema::ACTIONS_TABLE === $table_suffix ) {
			if ( empty( $this->demarkation_id ) ) {
				$this->demarkation_id = $this->set_demarkation_id();
			}
			/** @var \wpdb $wpdb */
			global $wpdb;
			/**
			 * A default date of '0000-00-00 00:00:00' is invalid in MySQL 5.7 when configured with 
			 * sql_mode including both STRICT_TRANS_TAB